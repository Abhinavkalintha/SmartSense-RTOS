
SmartSenseRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007060  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08007230  08007230  00008230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072e8  080072e8  00009060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080072e8  080072e8  000082e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072f0  080072f0  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072f0  080072f0  000082f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080072f4  080072f4  000082f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080072f8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c6c  20000060  08007358  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ccc  08007358  00009ccc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af47  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b3  00000000  00000000  00023fd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  00027790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001317  00000000  00000000  00028fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045c9  00000000  00000000  0002a2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c5f2  00000000  00000000  0002e8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea7d4  00000000  00000000  0004aeb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135686  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006dd4  00000000  00000000  001356cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0013c4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007218 	.word	0x08007218

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007218 	.word	0x08007218

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_uldivmod>:
 8000628:	b953      	cbnz	r3, 8000640 <__aeabi_uldivmod+0x18>
 800062a:	b94a      	cbnz	r2, 8000640 <__aeabi_uldivmod+0x18>
 800062c:	2900      	cmp	r1, #0
 800062e:	bf08      	it	eq
 8000630:	2800      	cmpeq	r0, #0
 8000632:	bf1c      	itt	ne
 8000634:	f04f 31ff 	movne.w	r1, #4294967295
 8000638:	f04f 30ff 	movne.w	r0, #4294967295
 800063c:	f000 b988 	b.w	8000950 <__aeabi_idiv0>
 8000640:	f1ad 0c08 	sub.w	ip, sp, #8
 8000644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000648:	f000 f806 	bl	8000658 <__udivmoddi4>
 800064c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000654:	b004      	add	sp, #16
 8000656:	4770      	bx	lr

08000658 <__udivmoddi4>:
 8000658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800065c:	9d08      	ldr	r5, [sp, #32]
 800065e:	468e      	mov	lr, r1
 8000660:	4604      	mov	r4, r0
 8000662:	4688      	mov	r8, r1
 8000664:	2b00      	cmp	r3, #0
 8000666:	d14a      	bne.n	80006fe <__udivmoddi4+0xa6>
 8000668:	428a      	cmp	r2, r1
 800066a:	4617      	mov	r7, r2
 800066c:	d962      	bls.n	8000734 <__udivmoddi4+0xdc>
 800066e:	fab2 f682 	clz	r6, r2
 8000672:	b14e      	cbz	r6, 8000688 <__udivmoddi4+0x30>
 8000674:	f1c6 0320 	rsb	r3, r6, #32
 8000678:	fa01 f806 	lsl.w	r8, r1, r6
 800067c:	fa20 f303 	lsr.w	r3, r0, r3
 8000680:	40b7      	lsls	r7, r6
 8000682:	ea43 0808 	orr.w	r8, r3, r8
 8000686:	40b4      	lsls	r4, r6
 8000688:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800068c:	fa1f fc87 	uxth.w	ip, r7
 8000690:	fbb8 f1fe 	udiv	r1, r8, lr
 8000694:	0c23      	lsrs	r3, r4, #16
 8000696:	fb0e 8811 	mls	r8, lr, r1, r8
 800069a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800069e:	fb01 f20c 	mul.w	r2, r1, ip
 80006a2:	429a      	cmp	r2, r3
 80006a4:	d909      	bls.n	80006ba <__udivmoddi4+0x62>
 80006a6:	18fb      	adds	r3, r7, r3
 80006a8:	f101 30ff 	add.w	r0, r1, #4294967295
 80006ac:	f080 80ea 	bcs.w	8000884 <__udivmoddi4+0x22c>
 80006b0:	429a      	cmp	r2, r3
 80006b2:	f240 80e7 	bls.w	8000884 <__udivmoddi4+0x22c>
 80006b6:	3902      	subs	r1, #2
 80006b8:	443b      	add	r3, r7
 80006ba:	1a9a      	subs	r2, r3, r2
 80006bc:	b2a3      	uxth	r3, r4
 80006be:	fbb2 f0fe 	udiv	r0, r2, lr
 80006c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006ca:	fb00 fc0c 	mul.w	ip, r0, ip
 80006ce:	459c      	cmp	ip, r3
 80006d0:	d909      	bls.n	80006e6 <__udivmoddi4+0x8e>
 80006d2:	18fb      	adds	r3, r7, r3
 80006d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80006d8:	f080 80d6 	bcs.w	8000888 <__udivmoddi4+0x230>
 80006dc:	459c      	cmp	ip, r3
 80006de:	f240 80d3 	bls.w	8000888 <__udivmoddi4+0x230>
 80006e2:	443b      	add	r3, r7
 80006e4:	3802      	subs	r0, #2
 80006e6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006ea:	eba3 030c 	sub.w	r3, r3, ip
 80006ee:	2100      	movs	r1, #0
 80006f0:	b11d      	cbz	r5, 80006fa <__udivmoddi4+0xa2>
 80006f2:	40f3      	lsrs	r3, r6
 80006f4:	2200      	movs	r2, #0
 80006f6:	e9c5 3200 	strd	r3, r2, [r5]
 80006fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fe:	428b      	cmp	r3, r1
 8000700:	d905      	bls.n	800070e <__udivmoddi4+0xb6>
 8000702:	b10d      	cbz	r5, 8000708 <__udivmoddi4+0xb0>
 8000704:	e9c5 0100 	strd	r0, r1, [r5]
 8000708:	2100      	movs	r1, #0
 800070a:	4608      	mov	r0, r1
 800070c:	e7f5      	b.n	80006fa <__udivmoddi4+0xa2>
 800070e:	fab3 f183 	clz	r1, r3
 8000712:	2900      	cmp	r1, #0
 8000714:	d146      	bne.n	80007a4 <__udivmoddi4+0x14c>
 8000716:	4573      	cmp	r3, lr
 8000718:	d302      	bcc.n	8000720 <__udivmoddi4+0xc8>
 800071a:	4282      	cmp	r2, r0
 800071c:	f200 8105 	bhi.w	800092a <__udivmoddi4+0x2d2>
 8000720:	1a84      	subs	r4, r0, r2
 8000722:	eb6e 0203 	sbc.w	r2, lr, r3
 8000726:	2001      	movs	r0, #1
 8000728:	4690      	mov	r8, r2
 800072a:	2d00      	cmp	r5, #0
 800072c:	d0e5      	beq.n	80006fa <__udivmoddi4+0xa2>
 800072e:	e9c5 4800 	strd	r4, r8, [r5]
 8000732:	e7e2      	b.n	80006fa <__udivmoddi4+0xa2>
 8000734:	2a00      	cmp	r2, #0
 8000736:	f000 8090 	beq.w	800085a <__udivmoddi4+0x202>
 800073a:	fab2 f682 	clz	r6, r2
 800073e:	2e00      	cmp	r6, #0
 8000740:	f040 80a4 	bne.w	800088c <__udivmoddi4+0x234>
 8000744:	1a8a      	subs	r2, r1, r2
 8000746:	0c03      	lsrs	r3, r0, #16
 8000748:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800074c:	b280      	uxth	r0, r0
 800074e:	b2bc      	uxth	r4, r7
 8000750:	2101      	movs	r1, #1
 8000752:	fbb2 fcfe 	udiv	ip, r2, lr
 8000756:	fb0e 221c 	mls	r2, lr, ip, r2
 800075a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800075e:	fb04 f20c 	mul.w	r2, r4, ip
 8000762:	429a      	cmp	r2, r3
 8000764:	d907      	bls.n	8000776 <__udivmoddi4+0x11e>
 8000766:	18fb      	adds	r3, r7, r3
 8000768:	f10c 38ff 	add.w	r8, ip, #4294967295
 800076c:	d202      	bcs.n	8000774 <__udivmoddi4+0x11c>
 800076e:	429a      	cmp	r2, r3
 8000770:	f200 80e0 	bhi.w	8000934 <__udivmoddi4+0x2dc>
 8000774:	46c4      	mov	ip, r8
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	fbb3 f2fe 	udiv	r2, r3, lr
 800077c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000780:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000784:	fb02 f404 	mul.w	r4, r2, r4
 8000788:	429c      	cmp	r4, r3
 800078a:	d907      	bls.n	800079c <__udivmoddi4+0x144>
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000792:	d202      	bcs.n	800079a <__udivmoddi4+0x142>
 8000794:	429c      	cmp	r4, r3
 8000796:	f200 80ca 	bhi.w	800092e <__udivmoddi4+0x2d6>
 800079a:	4602      	mov	r2, r0
 800079c:	1b1b      	subs	r3, r3, r4
 800079e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80007a2:	e7a5      	b.n	80006f0 <__udivmoddi4+0x98>
 80007a4:	f1c1 0620 	rsb	r6, r1, #32
 80007a8:	408b      	lsls	r3, r1
 80007aa:	fa22 f706 	lsr.w	r7, r2, r6
 80007ae:	431f      	orrs	r7, r3
 80007b0:	fa0e f401 	lsl.w	r4, lr, r1
 80007b4:	fa20 f306 	lsr.w	r3, r0, r6
 80007b8:	fa2e fe06 	lsr.w	lr, lr, r6
 80007bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007c0:	4323      	orrs	r3, r4
 80007c2:	fa00 f801 	lsl.w	r8, r0, r1
 80007c6:	fa1f fc87 	uxth.w	ip, r7
 80007ca:	fbbe f0f9 	udiv	r0, lr, r9
 80007ce:	0c1c      	lsrs	r4, r3, #16
 80007d0:	fb09 ee10 	mls	lr, r9, r0, lr
 80007d4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80007d8:	fb00 fe0c 	mul.w	lr, r0, ip
 80007dc:	45a6      	cmp	lr, r4
 80007de:	fa02 f201 	lsl.w	r2, r2, r1
 80007e2:	d909      	bls.n	80007f8 <__udivmoddi4+0x1a0>
 80007e4:	193c      	adds	r4, r7, r4
 80007e6:	f100 3aff 	add.w	sl, r0, #4294967295
 80007ea:	f080 809c 	bcs.w	8000926 <__udivmoddi4+0x2ce>
 80007ee:	45a6      	cmp	lr, r4
 80007f0:	f240 8099 	bls.w	8000926 <__udivmoddi4+0x2ce>
 80007f4:	3802      	subs	r0, #2
 80007f6:	443c      	add	r4, r7
 80007f8:	eba4 040e 	sub.w	r4, r4, lr
 80007fc:	fa1f fe83 	uxth.w	lr, r3
 8000800:	fbb4 f3f9 	udiv	r3, r4, r9
 8000804:	fb09 4413 	mls	r4, r9, r3, r4
 8000808:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800080c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000810:	45a4      	cmp	ip, r4
 8000812:	d908      	bls.n	8000826 <__udivmoddi4+0x1ce>
 8000814:	193c      	adds	r4, r7, r4
 8000816:	f103 3eff 	add.w	lr, r3, #4294967295
 800081a:	f080 8082 	bcs.w	8000922 <__udivmoddi4+0x2ca>
 800081e:	45a4      	cmp	ip, r4
 8000820:	d97f      	bls.n	8000922 <__udivmoddi4+0x2ca>
 8000822:	3b02      	subs	r3, #2
 8000824:	443c      	add	r4, r7
 8000826:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800082a:	eba4 040c 	sub.w	r4, r4, ip
 800082e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000832:	4564      	cmp	r4, ip
 8000834:	4673      	mov	r3, lr
 8000836:	46e1      	mov	r9, ip
 8000838:	d362      	bcc.n	8000900 <__udivmoddi4+0x2a8>
 800083a:	d05f      	beq.n	80008fc <__udivmoddi4+0x2a4>
 800083c:	b15d      	cbz	r5, 8000856 <__udivmoddi4+0x1fe>
 800083e:	ebb8 0203 	subs.w	r2, r8, r3
 8000842:	eb64 0409 	sbc.w	r4, r4, r9
 8000846:	fa04 f606 	lsl.w	r6, r4, r6
 800084a:	fa22 f301 	lsr.w	r3, r2, r1
 800084e:	431e      	orrs	r6, r3
 8000850:	40cc      	lsrs	r4, r1
 8000852:	e9c5 6400 	strd	r6, r4, [r5]
 8000856:	2100      	movs	r1, #0
 8000858:	e74f      	b.n	80006fa <__udivmoddi4+0xa2>
 800085a:	fbb1 fcf2 	udiv	ip, r1, r2
 800085e:	0c01      	lsrs	r1, r0, #16
 8000860:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000864:	b280      	uxth	r0, r0
 8000866:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800086a:	463b      	mov	r3, r7
 800086c:	4638      	mov	r0, r7
 800086e:	463c      	mov	r4, r7
 8000870:	46b8      	mov	r8, r7
 8000872:	46be      	mov	lr, r7
 8000874:	2620      	movs	r6, #32
 8000876:	fbb1 f1f7 	udiv	r1, r1, r7
 800087a:	eba2 0208 	sub.w	r2, r2, r8
 800087e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000882:	e766      	b.n	8000752 <__udivmoddi4+0xfa>
 8000884:	4601      	mov	r1, r0
 8000886:	e718      	b.n	80006ba <__udivmoddi4+0x62>
 8000888:	4610      	mov	r0, r2
 800088a:	e72c      	b.n	80006e6 <__udivmoddi4+0x8e>
 800088c:	f1c6 0220 	rsb	r2, r6, #32
 8000890:	fa2e f302 	lsr.w	r3, lr, r2
 8000894:	40b7      	lsls	r7, r6
 8000896:	40b1      	lsls	r1, r6
 8000898:	fa20 f202 	lsr.w	r2, r0, r2
 800089c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a0:	430a      	orrs	r2, r1
 80008a2:	fbb3 f8fe 	udiv	r8, r3, lr
 80008a6:	b2bc      	uxth	r4, r7
 80008a8:	fb0e 3318 	mls	r3, lr, r8, r3
 80008ac:	0c11      	lsrs	r1, r2, #16
 80008ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b2:	fb08 f904 	mul.w	r9, r8, r4
 80008b6:	40b0      	lsls	r0, r6
 80008b8:	4589      	cmp	r9, r1
 80008ba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80008be:	b280      	uxth	r0, r0
 80008c0:	d93e      	bls.n	8000940 <__udivmoddi4+0x2e8>
 80008c2:	1879      	adds	r1, r7, r1
 80008c4:	f108 3cff 	add.w	ip, r8, #4294967295
 80008c8:	d201      	bcs.n	80008ce <__udivmoddi4+0x276>
 80008ca:	4589      	cmp	r9, r1
 80008cc:	d81f      	bhi.n	800090e <__udivmoddi4+0x2b6>
 80008ce:	eba1 0109 	sub.w	r1, r1, r9
 80008d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80008d6:	fb09 f804 	mul.w	r8, r9, r4
 80008da:	fb0e 1119 	mls	r1, lr, r9, r1
 80008de:	b292      	uxth	r2, r2
 80008e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008e4:	4542      	cmp	r2, r8
 80008e6:	d229      	bcs.n	800093c <__udivmoddi4+0x2e4>
 80008e8:	18ba      	adds	r2, r7, r2
 80008ea:	f109 31ff 	add.w	r1, r9, #4294967295
 80008ee:	d2c4      	bcs.n	800087a <__udivmoddi4+0x222>
 80008f0:	4542      	cmp	r2, r8
 80008f2:	d2c2      	bcs.n	800087a <__udivmoddi4+0x222>
 80008f4:	f1a9 0102 	sub.w	r1, r9, #2
 80008f8:	443a      	add	r2, r7
 80008fa:	e7be      	b.n	800087a <__udivmoddi4+0x222>
 80008fc:	45f0      	cmp	r8, lr
 80008fe:	d29d      	bcs.n	800083c <__udivmoddi4+0x1e4>
 8000900:	ebbe 0302 	subs.w	r3, lr, r2
 8000904:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000908:	3801      	subs	r0, #1
 800090a:	46e1      	mov	r9, ip
 800090c:	e796      	b.n	800083c <__udivmoddi4+0x1e4>
 800090e:	eba7 0909 	sub.w	r9, r7, r9
 8000912:	4449      	add	r1, r9
 8000914:	f1a8 0c02 	sub.w	ip, r8, #2
 8000918:	fbb1 f9fe 	udiv	r9, r1, lr
 800091c:	fb09 f804 	mul.w	r8, r9, r4
 8000920:	e7db      	b.n	80008da <__udivmoddi4+0x282>
 8000922:	4673      	mov	r3, lr
 8000924:	e77f      	b.n	8000826 <__udivmoddi4+0x1ce>
 8000926:	4650      	mov	r0, sl
 8000928:	e766      	b.n	80007f8 <__udivmoddi4+0x1a0>
 800092a:	4608      	mov	r0, r1
 800092c:	e6fd      	b.n	800072a <__udivmoddi4+0xd2>
 800092e:	443b      	add	r3, r7
 8000930:	3a02      	subs	r2, #2
 8000932:	e733      	b.n	800079c <__udivmoddi4+0x144>
 8000934:	f1ac 0c02 	sub.w	ip, ip, #2
 8000938:	443b      	add	r3, r7
 800093a:	e71c      	b.n	8000776 <__udivmoddi4+0x11e>
 800093c:	4649      	mov	r1, r9
 800093e:	e79c      	b.n	800087a <__udivmoddi4+0x222>
 8000940:	eba1 0109 	sub.w	r1, r1, r9
 8000944:	46c4      	mov	ip, r8
 8000946:	fbb1 f9fe 	udiv	r9, r1, lr
 800094a:	fb09 f804 	mul.w	r8, r9, r4
 800094e:	e7c4      	b.n	80008da <__udivmoddi4+0x282>

08000950 <__aeabi_idiv0>:
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fc68 	bl	800122c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f838 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f000 f9b0 	bl	8000cc4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000964:	f000 f8e6 	bl	8000b34 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000968:	f000 f892 	bl	8000a90 <MX_ADC1_Init>
  MX_TIM2_Init();
 800096c:	f000 f910 	bl	8000b90 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000970:	f000 f97e 	bl	8000c70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  sprintf((char*)serial, "MAIN ENTRY: %.2f\r\n", DISTANCE);
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <main+0x60>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff fdfd 	bl	8000578 <__aeabi_f2d>
 800097e:	4602      	mov	r2, r0
 8000980:	460b      	mov	r3, r1
 8000982:	490d      	ldr	r1, [pc, #52]	@ (80009b8 <main+0x64>)
 8000984:	480d      	ldr	r0, [pc, #52]	@ (80009bc <main+0x68>)
 8000986:	f005 ffa7 	bl	80068d8 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)serial, sizeof(serial), 100);
 800098a:	2364      	movs	r3, #100	@ 0x64
 800098c:	2232      	movs	r2, #50	@ 0x32
 800098e:	490b      	ldr	r1, [pc, #44]	@ (80009bc <main+0x68>)
 8000990:	480b      	ldr	r0, [pc, #44]	@ (80009c0 <main+0x6c>)
 8000992:	f002 fe33 	bl	80035fc <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000996:	f003 fa21 	bl	8003ddc <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800099a:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <main+0x70>)
 800099c:	2100      	movs	r1, #0
 800099e:	480a      	ldr	r0, [pc, #40]	@ (80009c8 <main+0x74>)
 80009a0:	f003 fa66 	bl	8003e70 <osThreadNew>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a09      	ldr	r2, [pc, #36]	@ (80009cc <main+0x78>)
 80009a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009aa:	f003 fa3b 	bl	8003e24 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ae:	bf00      	nop
 80009b0:	e7fd      	b.n	80009ae <main+0x5a>
 80009b2:	bf00      	nop
 80009b4:	200001e0 	.word	0x200001e0
 80009b8:	0800723c 	.word	0x0800723c
 80009bc:	200001ac 	.word	0x200001ac
 80009c0:	20000160 	.word	0x20000160
 80009c4:	08007278 	.word	0x08007278
 80009c8:	08000d49 	.word	0x08000d49
 80009cc:	200001a8 	.word	0x200001a8

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	@ 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	2234      	movs	r2, #52	@ 0x34
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f005 ff9c 	bl	800691c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	4b23      	ldr	r3, [pc, #140]	@ (8000a88 <SystemClock_Config+0xb8>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	4a22      	ldr	r2, [pc, #136]	@ (8000a88 <SystemClock_Config+0xb8>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a04:	4b20      	ldr	r3, [pc, #128]	@ (8000a88 <SystemClock_Config+0xb8>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a10:	2300      	movs	r3, #0
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <SystemClock_Config+0xbc>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000a8c <SystemClock_Config+0xbc>)
 8000a1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a22:	6013      	str	r3, [r2, #0]
 8000a24:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <SystemClock_Config+0xbc>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a2c:	603b      	str	r3, [r7, #0]
 8000a2e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a38:	2310      	movs	r3, #16
 8000a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4618      	mov	r0, r3
 8000a46:	f001 fd89 	bl	800255c <HAL_RCC_OscConfig>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000a50:	f000 f98a 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a54:	230f      	movs	r3, #15
 8000a56:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fa7e 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000a7a:	f000 f975 	bl	8000d68 <Error_Handler>
  }
}
 8000a7e:	bf00      	nop
 8000a80:	3750      	adds	r7, #80	@ 0x50
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000aa4:	4a21      	ldr	r2, [pc, #132]	@ (8000b2c <MX_ADC1_Init+0x9c>)
 8000aa6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ace:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000ad0:	4a17      	ldr	r2, [pc, #92]	@ (8000b30 <MX_ADC1_Init+0xa0>)
 8000ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ada:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000aee:	480e      	ldr	r0, [pc, #56]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000af0:	f000 fbde 	bl	80012b0 <HAL_ADC_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000afa:	f000 f935 	bl	8000d68 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4806      	ldr	r0, [pc, #24]	@ (8000b28 <MX_ADC1_Init+0x98>)
 8000b10:	f000 fc12 	bl	8001338 <HAL_ADC_ConfigChannel>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b1a:	f000 f925 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2000007c 	.word	0x2000007c
 8000b2c:	40012000 	.word	0x40012000
 8000b30:	0f000001 	.word	0x0f000001

08000b34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b3a:	4a13      	ldr	r2, [pc, #76]	@ (8000b88 <MX_I2C1_Init+0x54>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b40:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <MX_I2C1_Init+0x58>)
 8000b42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b52:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b58:	4b0a      	ldr	r3, [pc, #40]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b5e:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b64:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <MX_I2C1_Init+0x50>)
 8000b72:	f001 f8b9 	bl	8001ce8 <HAL_I2C_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b7c:	f000 f8f4 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000c4 	.word	0x200000c4
 8000b88:	40005400 	.word	0x40005400
 8000b8c:	000186a0 	.word	0x000186a0

08000b90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b96:	f107 0318 	add.w	r3, r7, #24
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]
 8000ba0:	609a      	str	r2, [r3, #8]
 8000ba2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bba:	4b2c      	ldr	r3, [pc, #176]	@ (8000c6c <MX_TIM2_Init+0xdc>)
 8000bbc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bc0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c6c <MX_TIM2_Init+0xdc>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b28      	ldr	r3, [pc, #160]	@ (8000c6c <MX_TIM2_Init+0xdc>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bce:	4b27      	ldr	r3, [pc, #156]	@ (8000c6c <MX_TIM2_Init+0xdc>)
 8000bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bd4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd6:	4b25      	ldr	r3, [pc, #148]	@ (8000c6c <MX_TIM2_Init+0xdc>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <MX_TIM2_Init+0xdc>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000be2:	4822      	ldr	r0, [pc, #136]	@ (8000c6c <MX_TIM2_Init+0xdc>)
 8000be4:	f001 ff58 	bl	8002a98 <HAL_TIM_Base_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000bee:	f000 f8bb 	bl	8000d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bf6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bf8:	f107 0318 	add.w	r3, r7, #24
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481b      	ldr	r0, [pc, #108]	@ (8000c6c <MX_TIM2_Init+0xdc>)
 8000c00:	f002 f8ff 	bl	8002e02 <HAL_TIM_ConfigClockSource>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000c0a:	f000 f8ad 	bl	8000d68 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c0e:	4817      	ldr	r0, [pc, #92]	@ (8000c6c <MX_TIM2_Init+0xdc>)
 8000c10:	f002 f802 	bl	8002c18 <HAL_TIM_IC_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c1a:	f000 f8a5 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c26:	f107 0310 	add.w	r3, r7, #16
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480f      	ldr	r0, [pc, #60]	@ (8000c6c <MX_TIM2_Init+0xdc>)
 8000c2e:	f002 fc19 	bl	8003464 <HAL_TIMEx_MasterConfigSynchronization>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000c38:	f000 f896 	bl	8000d68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c40:	2301      	movs	r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	4619      	mov	r1, r3
 8000c52:	4806      	ldr	r0, [pc, #24]	@ (8000c6c <MX_TIM2_Init+0xdc>)
 8000c54:	f002 f839 	bl	8002cca <HAL_TIM_IC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000c5e:	f000 f883 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c62:	bf00      	nop
 8000c64:	3728      	adds	r7, #40	@ 0x28
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000118 	.word	0x20000118

08000c70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <MX_USART2_UART_Init+0x50>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b09      	ldr	r3, [pc, #36]	@ (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	@ (8000cbc <MX_USART2_UART_Init+0x4c>)
 8000ca8:	f002 fc58 	bl	800355c <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cb2:	f000 f859 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	20000160 	.word	0x20000160
 8000cc0:	40004400 	.word	0x40004400

08000cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b088      	sub	sp, #32
 8000cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
 8000cd6:	60da      	str	r2, [r3, #12]
 8000cd8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <MX_GPIO_Init+0x7c>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	4a17      	ldr	r2, [pc, #92]	@ (8000d40 <MX_GPIO_Init+0x7c>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <MX_GPIO_Init+0x7c>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <MX_GPIO_Init+0x7c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	4a10      	ldr	r2, [pc, #64]	@ (8000d40 <MX_GPIO_Init+0x7c>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d06:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <MX_GPIO_Init+0x7c>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2101      	movs	r1, #1
 8000d16:	480b      	ldr	r0, [pc, #44]	@ (8000d44 <MX_GPIO_Init+0x80>)
 8000d18:	f000 ffb2 	bl	8001c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	4804      	ldr	r0, [pc, #16]	@ (8000d44 <MX_GPIO_Init+0x80>)
 8000d34:	f000 fe10 	bl	8001958 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d38:	bf00      	nop
 8000d3a:	3720      	adds	r7, #32
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020400 	.word	0x40020400

08000d48 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000d50:	2101      	movs	r1, #1
 8000d52:	4804      	ldr	r0, [pc, #16]	@ (8000d64 <StartDefaultTask+0x1c>)
 8000d54:	f000 ffad 	bl	8001cb2 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8000d58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d5c:	f003 f91a 	bl	8003f94 <osDelay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000d60:	bf00      	nop
 8000d62:	e7f5      	b.n	8000d50 <StartDefaultTask+0x8>
 8000d64:	40020400 	.word	0x40020400

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	bf00      	nop
 8000d72:	e7fd      	b.n	8000d70 <Error_Handler+0x8>

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <HAL_MspInit+0x54>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d82:	4a11      	ldr	r2, [pc, #68]	@ (8000dc8 <HAL_MspInit+0x54>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc8 <HAL_MspInit+0x54>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <HAL_MspInit+0x54>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000dc8 <HAL_MspInit+0x54>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000da6:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <HAL_MspInit+0x54>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	210f      	movs	r1, #15
 8000db6:	f06f 0001 	mvn.w	r0, #1
 8000dba:	f000 fda3 	bl	8001904 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40023800 	.word	0x40023800

08000dcc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08a      	sub	sp, #40	@ 0x28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <HAL_ADC_MspInit+0x7c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d127      	bne.n	8000e3e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	4b16      	ldr	r3, [pc, #88]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df6:	4a15      	ldr	r2, [pc, #84]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000df8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfe:	4b13      	ldr	r3, [pc, #76]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a0e      	ldr	r2, [pc, #56]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <HAL_ADC_MspInit+0x80>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e26:	2301      	movs	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <HAL_ADC_MspInit+0x84>)
 8000e3a:	f000 fd8d 	bl	8001958 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	@ 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40012000 	.word	0x40012000
 8000e4c:	40023800 	.word	0x40023800
 8000e50:	40020000 	.word	0x40020000

08000e54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	@ 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a19      	ldr	r2, [pc, #100]	@ (8000ed8 <HAL_I2C_MspInit+0x84>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d12b      	bne.n	8000ece <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <HAL_I2C_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	4a17      	ldr	r2, [pc, #92]	@ (8000edc <HAL_I2C_MspInit+0x88>)
 8000e80:	f043 0302 	orr.w	r3, r3, #2
 8000e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e86:	4b15      	ldr	r3, [pc, #84]	@ (8000edc <HAL_I2C_MspInit+0x88>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8a:	f003 0302 	and.w	r3, r3, #2
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e92:	23c0      	movs	r3, #192	@ 0xc0
 8000e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e96:	2312      	movs	r3, #18
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	4619      	mov	r1, r3
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <HAL_I2C_MspInit+0x8c>)
 8000eae:	f000 fd53 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <HAL_I2C_MspInit+0x88>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eba:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <HAL_I2C_MspInit+0x88>)
 8000ebc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_I2C_MspInit+0x88>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	@ 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	@ 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f04:	d12b      	bne.n	8000f5e <HAL_TIM_Base_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
 8000f0a:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <HAL_TIM_Base_MspInit+0x84>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	4a16      	ldr	r2, [pc, #88]	@ (8000f68 <HAL_TIM_Base_MspInit+0x84>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f16:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <HAL_TIM_Base_MspInit+0x84>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <HAL_TIM_Base_MspInit+0x84>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f68 <HAL_TIM_Base_MspInit+0x84>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f32:	4b0d      	ldr	r3, [pc, #52]	@ (8000f68 <HAL_TIM_Base_MspInit+0x84>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f3e:	2320      	movs	r3, #32
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4804      	ldr	r0, [pc, #16]	@ (8000f6c <HAL_TIM_Base_MspInit+0x88>)
 8000f5a:	f000 fcfd 	bl	8001958 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	@ 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	@ 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a19      	ldr	r2, [pc, #100]	@ (8000ff4 <HAL_UART_MspInit+0x84>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d12b      	bne.n	8000fea <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_UART_MspInit+0x88>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	4a17      	ldr	r2, [pc, #92]	@ (8000ff8 <HAL_UART_MspInit+0x88>)
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_UART_MspInit+0x88>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ff8 <HAL_UART_MspInit+0x88>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a10      	ldr	r2, [pc, #64]	@ (8000ff8 <HAL_UART_MspInit+0x88>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <HAL_UART_MspInit+0x88>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fca:	230c      	movs	r3, #12
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fda:	2307      	movs	r3, #7
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <HAL_UART_MspInit+0x8c>)
 8000fe6:	f000 fcb7 	bl	8001958 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	@ 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40004400 	.word	0x40004400
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000

08001000 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	@ 0x38
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001008:	2300      	movs	r3, #0
 800100a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800100c:	2300      	movs	r3, #0
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <HAL_InitTick+0xe4>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	4a32      	ldr	r2, [pc, #200]	@ (80010e4 <HAL_InitTick+0xe4>)
 800101a:	f043 0320 	orr.w	r3, r3, #32
 800101e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001020:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <HAL_InitTick+0xe4>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001024:	f003 0320 	and.w	r3, r3, #32
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800102c:	f107 0210 	add.w	r2, r7, #16
 8001030:	f107 0314 	add.w	r3, r7, #20
 8001034:	4611      	mov	r1, r2
 8001036:	4618      	mov	r0, r3
 8001038:	f001 f8b4 	bl	80021a4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001042:	2b00      	cmp	r3, #0
 8001044:	d103      	bne.n	800104e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001046:	f001 f885 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 800104a:	6378      	str	r0, [r7, #52]	@ 0x34
 800104c:	e004      	b.n	8001058 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800104e:	f001 f881 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8001052:	4603      	mov	r3, r0
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800105a:	4a23      	ldr	r2, [pc, #140]	@ (80010e8 <HAL_InitTick+0xe8>)
 800105c:	fba2 2303 	umull	r2, r3, r2, r3
 8001060:	0c9b      	lsrs	r3, r3, #18
 8001062:	3b01      	subs	r3, #1
 8001064:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001066:	4b21      	ldr	r3, [pc, #132]	@ (80010ec <HAL_InitTick+0xec>)
 8001068:	4a21      	ldr	r2, [pc, #132]	@ (80010f0 <HAL_InitTick+0xf0>)
 800106a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800106c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <HAL_InitTick+0xec>)
 800106e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001072:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001074:	4a1d      	ldr	r2, [pc, #116]	@ (80010ec <HAL_InitTick+0xec>)
 8001076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001078:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800107a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <HAL_InitTick+0xec>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <HAL_InitTick+0xec>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001086:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <HAL_InitTick+0xec>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800108c:	4817      	ldr	r0, [pc, #92]	@ (80010ec <HAL_InitTick+0xec>)
 800108e:	f001 fd03 	bl	8002a98 <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001098:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800109c:	2b00      	cmp	r3, #0
 800109e:	d11b      	bne.n	80010d8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80010a0:	4812      	ldr	r0, [pc, #72]	@ (80010ec <HAL_InitTick+0xec>)
 80010a2:	f001 fd49 	bl	8002b38 <HAL_TIM_Base_Start_IT>
 80010a6:	4603      	mov	r3, r0
 80010a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80010ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d111      	bne.n	80010d8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80010b4:	2037      	movs	r0, #55	@ 0x37
 80010b6:	f000 fc41 	bl	800193c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b0f      	cmp	r3, #15
 80010be:	d808      	bhi.n	80010d2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80010c0:	2200      	movs	r2, #0
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	2037      	movs	r0, #55	@ 0x37
 80010c6:	f000 fc1d 	bl	8001904 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <HAL_InitTick+0xf4>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e002      	b.n	80010d8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3738      	adds	r7, #56	@ 0x38
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	431bde83 	.word	0x431bde83
 80010ec:	200001e4 	.word	0x200001e4
 80010f0:	40001400 	.word	0x40001400
 80010f4:	20000004 	.word	0x20000004

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <NMI_Handler+0x4>

08001100 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <MemManage_Handler+0x4>

08001110 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001114:	bf00      	nop
 8001116:	e7fd      	b.n	8001114 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <UsageFault_Handler+0x4>

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001132:	f000 f89d 	bl	8001270 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001136:	f004 fb55 	bl	80057e4 <xTaskGetSchedulerState>
 800113a:	4603      	mov	r3, r0
 800113c:	2b01      	cmp	r3, #1
 800113e:	d001      	beq.n	8001144 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001140:	f005 f94a 	bl	80063d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001150:	4a14      	ldr	r2, [pc, #80]	@ (80011a4 <_sbrk+0x5c>)
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <_sbrk+0x60>)
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800115c:	4b13      	ldr	r3, [pc, #76]	@ (80011ac <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001164:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <_sbrk+0x64>)
 8001166:	4a12      	ldr	r2, [pc, #72]	@ (80011b0 <_sbrk+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	429a      	cmp	r2, r3
 8001176:	d207      	bcs.n	8001188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001178:	f005 fbd8 	bl	800692c <__errno>
 800117c:	4603      	mov	r3, r0
 800117e:	220c      	movs	r2, #12
 8001180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e009      	b.n	800119c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118e:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	4a05      	ldr	r2, [pc, #20]	@ (80011ac <_sbrk+0x64>)
 8001198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20020000 	.word	0x20020000
 80011a8:	00000400 	.word	0x00000400
 80011ac:	2000022c 	.word	0x2000022c
 80011b0:	20004cd0 	.word	0x20004cd0

080011b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <SystemInit+0x20>)
 80011ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011be:	4a05      	ldr	r2, [pc, #20]	@ (80011d4 <SystemInit+0x20>)
 80011c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001210 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80011dc:	f7ff ffea 	bl	80011b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011e0:	480c      	ldr	r0, [pc, #48]	@ (8001214 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011e2:	490d      	ldr	r1, [pc, #52]	@ (8001218 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e4:	4a0d      	ldr	r2, [pc, #52]	@ (800121c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001224 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001206:	f005 fb97 	bl	8006938 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120a:	f7ff fba3 	bl	8000954 <main>
  bx  lr    
 800120e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001210:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800121c:	080072f8 	.word	0x080072f8
  ldr r2, =_sbss
 8001220:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001224:	20004ccc 	.word	0x20004ccc

08001228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC_IRQHandler>
	...

0800122c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001230:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <HAL_Init+0x40>)
 8001236:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800123a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800123c:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <HAL_Init+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <HAL_Init+0x40>)
 8001242:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001246:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	@ (800126c <HAL_Init+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	@ (800126c <HAL_Init+0x40>)
 800124e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 fb4a 	bl	80018ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125a:	200f      	movs	r0, #15
 800125c:	f7ff fed0 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001260:	f7ff fd88 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023c00 	.word	0x40023c00

08001270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001274:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_IncTick+0x20>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <HAL_IncTick+0x24>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4413      	add	r3, r2
 8001280:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <HAL_IncTick+0x24>)
 8001282:	6013      	str	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	20000008 	.word	0x20000008
 8001294:	20000230 	.word	0x20000230

08001298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return uwTick;
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <HAL_GetTick+0x14>)
 800129e:	681b      	ldr	r3, [r3, #0]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	20000230 	.word	0x20000230

080012b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e033      	b.n	800132e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d109      	bne.n	80012e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fd7c 	bl	8000dcc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2200      	movs	r2, #0
 80012d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f003 0310 	and.w	r3, r3, #16
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d118      	bne.n	8001320 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80012f6:	f023 0302 	bic.w	r3, r3, #2
 80012fa:	f043 0202 	orr.w	r2, r3, #2
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f94a 	bl	800159c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f023 0303 	bic.w	r3, r3, #3
 8001316:	f043 0201 	orr.w	r2, r3, #1
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	641a      	str	r2, [r3, #64]	@ 0x40
 800131e:	e001      	b.n	8001324 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x1c>
 8001350:	2302      	movs	r3, #2
 8001352:	e113      	b.n	800157c <HAL_ADC_ConfigChannel+0x244>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b09      	cmp	r3, #9
 8001362:	d925      	bls.n	80013b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	68d9      	ldr	r1, [r3, #12]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	3b1e      	subs	r3, #30
 800137a:	2207      	movs	r2, #7
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43da      	mvns	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	400a      	ands	r2, r1
 8001388:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68d9      	ldr	r1, [r3, #12]
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	4618      	mov	r0, r3
 800139c:	4603      	mov	r3, r0
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	4403      	add	r3, r0
 80013a2:	3b1e      	subs	r3, #30
 80013a4:	409a      	lsls	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	430a      	orrs	r2, r1
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	e022      	b.n	80013f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6919      	ldr	r1, [r3, #16]
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	2207      	movs	r2, #7
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	400a      	ands	r2, r1
 80013d2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6919      	ldr	r1, [r3, #16]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4403      	add	r3, r0
 80013ec:	409a      	lsls	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d824      	bhi.n	8001448 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	3b05      	subs	r3, #5
 8001410:	221f      	movs	r2, #31
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	400a      	ands	r2, r1
 800141e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	b29b      	uxth	r3, r3
 800142c:	4618      	mov	r0, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	3b05      	subs	r3, #5
 800143a:	fa00 f203 	lsl.w	r2, r0, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	635a      	str	r2, [r3, #52]	@ 0x34
 8001446:	e04c      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b0c      	cmp	r3, #12
 800144e:	d824      	bhi.n	800149a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685a      	ldr	r2, [r3, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	3b23      	subs	r3, #35	@ 0x23
 8001462:	221f      	movs	r2, #31
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43da      	mvns	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	400a      	ands	r2, r1
 8001470:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	3b23      	subs	r3, #35	@ 0x23
 800148c:	fa00 f203 	lsl.w	r2, r0, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	631a      	str	r2, [r3, #48]	@ 0x30
 8001498:	e023      	b.n	80014e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	3b41      	subs	r3, #65	@ 0x41
 80014ac:	221f      	movs	r2, #31
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	400a      	ands	r2, r1
 80014ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4413      	add	r3, r2
 80014d4:	3b41      	subs	r3, #65	@ 0x41
 80014d6:	fa00 f203 	lsl.w	r2, r0, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014e2:	4b29      	ldr	r3, [pc, #164]	@ (8001588 <HAL_ADC_ConfigChannel+0x250>)
 80014e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a28      	ldr	r2, [pc, #160]	@ (800158c <HAL_ADC_ConfigChannel+0x254>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d10f      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x1d8>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b12      	cmp	r3, #18
 80014f6:	d10b      	bne.n	8001510 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a1d      	ldr	r2, [pc, #116]	@ (800158c <HAL_ADC_ConfigChannel+0x254>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d12b      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x23a>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a1c      	ldr	r2, [pc, #112]	@ (8001590 <HAL_ADC_ConfigChannel+0x258>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d003      	beq.n	800152c <HAL_ADC_ConfigChannel+0x1f4>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b11      	cmp	r3, #17
 800152a:	d122      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a11      	ldr	r2, [pc, #68]	@ (8001590 <HAL_ADC_ConfigChannel+0x258>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d111      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <HAL_ADC_ConfigChannel+0x25c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a11      	ldr	r2, [pc, #68]	@ (8001598 <HAL_ADC_ConfigChannel+0x260>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	0c9a      	lsrs	r2, r3, #18
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001564:	e002      	b.n	800156c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	3b01      	subs	r3, #1
 800156a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f9      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40012300 	.word	0x40012300
 800158c:	40012000 	.word	0x40012000
 8001590:	10000012 	.word	0x10000012
 8001594:	20000000 	.word	0x20000000
 8001598:	431bde83 	.word	0x431bde83

0800159c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015a4:	4b79      	ldr	r3, [pc, #484]	@ (800178c <ADC_Init+0x1f0>)
 80015a6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	685a      	ldr	r2, [r3, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	431a      	orrs	r2, r3
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	021a      	lsls	r2, r3, #8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80015f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6859      	ldr	r1, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	430a      	orrs	r2, r1
 8001606:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001616:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6899      	ldr	r1, [r3, #8]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800162e:	4a58      	ldr	r2, [pc, #352]	@ (8001790 <ADC_Init+0x1f4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d022      	beq.n	800167a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001642:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6899      	ldr	r1, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	430a      	orrs	r2, r1
 8001654:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	689a      	ldr	r2, [r3, #8]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001664:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6899      	ldr	r1, [r3, #8]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	e00f      	b.n	800169a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001688:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001698:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0202 	bic.w	r2, r2, #2
 80016a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6899      	ldr	r1, [r3, #8]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	7e1b      	ldrb	r3, [r3, #24]
 80016b4:	005a      	lsls	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	430a      	orrs	r2, r1
 80016bc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d01b      	beq.n	8001700 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016d6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80016e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6859      	ldr	r1, [r3, #4]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f2:	3b01      	subs	r3, #1
 80016f4:	035a      	lsls	r2, r3, #13
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	e007      	b.n	8001710 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800170e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800171e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	3b01      	subs	r3, #1
 800172c:	051a      	lsls	r2, r3, #20
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6899      	ldr	r1, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001752:	025a      	lsls	r2, r3, #9
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689a      	ldr	r2, [r3, #8]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800176a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6899      	ldr	r1, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	695b      	ldr	r3, [r3, #20]
 8001776:	029a      	lsls	r2, r3, #10
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	609a      	str	r2, [r3, #8]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	40012300 	.word	0x40012300
 8001790:	0f000001 	.word	0x0f000001

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	@ (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	@ (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	@ (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ff4c 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001916:	f7ff ff61 	bl	80017dc <__NVIC_GetPriorityGrouping>
 800191a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	6978      	ldr	r0, [r7, #20]
 8001922:	f7ff ffb1 	bl	8001888 <NVIC_EncodePriority>
 8001926:	4602      	mov	r2, r0
 8001928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff80 	bl	8001834 <__NVIC_SetPriority>
}
 8001934:	bf00      	nop
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff54 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	@ 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800196a:	2300      	movs	r3, #0
 800196c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
 8001972:	e165      	b.n	8001c40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001974:	2201      	movs	r2, #1
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	429a      	cmp	r2, r3
 800198e:	f040 8154 	bne.w	8001c3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b01      	cmp	r3, #1
 800199c:	d005      	beq.n	80019aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d130      	bne.n	8001a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	68da      	ldr	r2, [r3, #12]
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	f003 0201 	and.w	r2, r3, #1
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d017      	beq.n	8001a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	2203      	movs	r2, #3
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d123      	bne.n	8001a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	08da      	lsrs	r2, r3, #3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3208      	adds	r2, #8
 8001a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	220f      	movs	r2, #15
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	08da      	lsrs	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3208      	adds	r2, #8
 8001a96:	69b9      	ldr	r1, [r7, #24]
 8001a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	2203      	movs	r2, #3
 8001aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0203 	and.w	r2, r3, #3
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80ae 	beq.w	8001c3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8001c58 <HAL_GPIO_Init+0x300>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae6:	4a5c      	ldr	r2, [pc, #368]	@ (8001c58 <HAL_GPIO_Init+0x300>)
 8001ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aee:	4b5a      	ldr	r3, [pc, #360]	@ (8001c58 <HAL_GPIO_Init+0x300>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001afa:	4a58      	ldr	r2, [pc, #352]	@ (8001c5c <HAL_GPIO_Init+0x304>)
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	089b      	lsrs	r3, r3, #2
 8001b00:	3302      	adds	r3, #2
 8001b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	220f      	movs	r2, #15
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4f      	ldr	r2, [pc, #316]	@ (8001c60 <HAL_GPIO_Init+0x308>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d025      	beq.n	8001b72 <HAL_GPIO_Init+0x21a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4e      	ldr	r2, [pc, #312]	@ (8001c64 <HAL_GPIO_Init+0x30c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d01f      	beq.n	8001b6e <HAL_GPIO_Init+0x216>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4d      	ldr	r2, [pc, #308]	@ (8001c68 <HAL_GPIO_Init+0x310>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d019      	beq.n	8001b6a <HAL_GPIO_Init+0x212>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4c      	ldr	r2, [pc, #304]	@ (8001c6c <HAL_GPIO_Init+0x314>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d013      	beq.n	8001b66 <HAL_GPIO_Init+0x20e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4a4b      	ldr	r2, [pc, #300]	@ (8001c70 <HAL_GPIO_Init+0x318>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d00d      	beq.n	8001b62 <HAL_GPIO_Init+0x20a>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a4a      	ldr	r2, [pc, #296]	@ (8001c74 <HAL_GPIO_Init+0x31c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d007      	beq.n	8001b5e <HAL_GPIO_Init+0x206>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a49      	ldr	r2, [pc, #292]	@ (8001c78 <HAL_GPIO_Init+0x320>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d101      	bne.n	8001b5a <HAL_GPIO_Init+0x202>
 8001b56:	2306      	movs	r3, #6
 8001b58:	e00c      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b5a:	2307      	movs	r3, #7
 8001b5c:	e00a      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b5e:	2305      	movs	r3, #5
 8001b60:	e008      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b62:	2304      	movs	r3, #4
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b66:	2303      	movs	r3, #3
 8001b68:	e004      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	e002      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_GPIO_Init+0x21c>
 8001b72:	2300      	movs	r3, #0
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	f002 0203 	and.w	r2, r2, #3
 8001b7a:	0092      	lsls	r2, r2, #2
 8001b7c:	4093      	lsls	r3, r2
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b84:	4935      	ldr	r1, [pc, #212]	@ (8001c5c <HAL_GPIO_Init+0x304>)
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	089b      	lsrs	r3, r3, #2
 8001b8a:	3302      	adds	r3, #2
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b92:	4b3a      	ldr	r3, [pc, #232]	@ (8001c7c <HAL_GPIO_Init+0x324>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bb6:	4a31      	ldr	r2, [pc, #196]	@ (8001c7c <HAL_GPIO_Init+0x324>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8001c7c <HAL_GPIO_Init+0x324>)
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001be0:	4a26      	ldr	r2, [pc, #152]	@ (8001c7c <HAL_GPIO_Init+0x324>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001be6:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <HAL_GPIO_Init+0x324>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c7c <HAL_GPIO_Init+0x324>)
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <HAL_GPIO_Init+0x324>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c34:	4a11      	ldr	r2, [pc, #68]	@ (8001c7c <HAL_GPIO_Init+0x324>)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	61fb      	str	r3, [r7, #28]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	f67f ae96 	bls.w	8001974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	40013800 	.word	0x40013800
 8001c60:	40020000 	.word	0x40020000
 8001c64:	40020400 	.word	0x40020400
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020c00 	.word	0x40020c00
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40021400 	.word	0x40021400
 8001c78:	40021800 	.word	0x40021800
 8001c7c:	40013c00 	.word	0x40013c00

08001c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	807b      	strh	r3, [r7, #2]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c90:	787b      	ldrb	r3, [r7, #1]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c96:	887a      	ldrh	r2, [r7, #2]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c9c:	e003      	b.n	8001ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c9e:	887b      	ldrh	r3, [r7, #2]
 8001ca0:	041a      	lsls	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	619a      	str	r2, [r3, #24]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	460b      	mov	r3, r1
 8001cbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cc4:	887a      	ldrh	r2, [r7, #2]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4013      	ands	r3, r2
 8001cca:	041a      	lsls	r2, r3, #16
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43d9      	mvns	r1, r3
 8001cd0:	887b      	ldrh	r3, [r7, #2]
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	619a      	str	r2, [r3, #24]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e12b      	b.n	8001f52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff f8a0 	bl	8000e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2224      	movs	r2, #36	@ 0x24
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0201 	bic.w	r2, r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d3a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d4c:	f000 fa02 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8001d50:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	4a81      	ldr	r2, [pc, #516]	@ (8001f5c <HAL_I2C_Init+0x274>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d807      	bhi.n	8001d6c <HAL_I2C_Init+0x84>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4a80      	ldr	r2, [pc, #512]	@ (8001f60 <HAL_I2C_Init+0x278>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	bf94      	ite	ls
 8001d64:	2301      	movls	r3, #1
 8001d66:	2300      	movhi	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	e006      	b.n	8001d7a <HAL_I2C_Init+0x92>
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4a7d      	ldr	r2, [pc, #500]	@ (8001f64 <HAL_I2C_Init+0x27c>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	bf94      	ite	ls
 8001d74:	2301      	movls	r3, #1
 8001d76:	2300      	movhi	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e0e7      	b.n	8001f52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4a78      	ldr	r2, [pc, #480]	@ (8001f68 <HAL_I2C_Init+0x280>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	0c9b      	lsrs	r3, r3, #18
 8001d8c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	68ba      	ldr	r2, [r7, #8]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a6a      	ldr	r2, [pc, #424]	@ (8001f5c <HAL_I2C_Init+0x274>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d802      	bhi.n	8001dbc <HAL_I2C_Init+0xd4>
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	3301      	adds	r3, #1
 8001dba:	e009      	b.n	8001dd0 <HAL_I2C_Init+0xe8>
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	4a69      	ldr	r2, [pc, #420]	@ (8001f6c <HAL_I2C_Init+0x284>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	099b      	lsrs	r3, r3, #6
 8001dce:	3301      	adds	r3, #1
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001de2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	495c      	ldr	r1, [pc, #368]	@ (8001f5c <HAL_I2C_Init+0x274>)
 8001dec:	428b      	cmp	r3, r1
 8001dee:	d819      	bhi.n	8001e24 <HAL_I2C_Init+0x13c>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	1e59      	subs	r1, r3, #1
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dfe:	1c59      	adds	r1, r3, #1
 8001e00:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001e04:	400b      	ands	r3, r1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00a      	beq.n	8001e20 <HAL_I2C_Init+0x138>
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1e59      	subs	r1, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1e:	e051      	b.n	8001ec4 <HAL_I2C_Init+0x1dc>
 8001e20:	2304      	movs	r3, #4
 8001e22:	e04f      	b.n	8001ec4 <HAL_I2C_Init+0x1dc>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d111      	bne.n	8001e50 <HAL_I2C_Init+0x168>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1e58      	subs	r0, r3, #1
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6859      	ldr	r1, [r3, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	440b      	add	r3, r1
 8001e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	e012      	b.n	8001e76 <HAL_I2C_Init+0x18e>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	1e58      	subs	r0, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	0099      	lsls	r1, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e66:	3301      	adds	r3, #1
 8001e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_I2C_Init+0x196>
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e022      	b.n	8001ec4 <HAL_I2C_Init+0x1dc>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10e      	bne.n	8001ea4 <HAL_I2C_Init+0x1bc>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1e58      	subs	r0, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6859      	ldr	r1, [r3, #4]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	440b      	add	r3, r1
 8001e94:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ea2:	e00f      	b.n	8001ec4 <HAL_I2C_Init+0x1dc>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e58      	subs	r0, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	0099      	lsls	r1, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	6809      	ldr	r1, [r1, #0]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69da      	ldr	r2, [r3, #28]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	431a      	orrs	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001ef2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6911      	ldr	r1, [r2, #16]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68d2      	ldr	r2, [r2, #12]
 8001efe:	4311      	orrs	r1, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	695a      	ldr	r2, [r3, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0201 	orr.w	r2, r2, #1
 8001f32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	000186a0 	.word	0x000186a0
 8001f60:	001e847f 	.word	0x001e847f
 8001f64:	003d08ff 	.word	0x003d08ff
 8001f68:	431bde83 	.word	0x431bde83
 8001f6c:	10624dd3 	.word	0x10624dd3

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0cc      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b68      	ldr	r3, [pc, #416]	@ (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 030f 	and.w	r3, r3, #15
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d90c      	bls.n	8001fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b65      	ldr	r3, [pc, #404]	@ (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	@ (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001fce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d044      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d119      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d003      	beq.n	800202e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202a:	2b03      	cmp	r3, #3
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b3f      	ldr	r3, [pc, #252]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3b      	ldr	r3, [pc, #236]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e067      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b37      	ldr	r3, [pc, #220]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4934      	ldr	r1, [pc, #208]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7ff f91a 	bl	8001298 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7ff f916 	bl	8001298 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e04f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2b      	ldr	r3, [pc, #172]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d20c      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b22      	ldr	r3, [pc, #136]	@ (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e2:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f887 	bl	8002208 <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	@ (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	@ (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	@ (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe ff72 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00
 800212c:	40023800 	.word	0x40023800
 8002130:	0800729c 	.word	0x0800729c
 8002134:	20000000 	.word	0x20000000
 8002138:	20000004 	.word	0x20000004

0800213c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002140:	4b03      	ldr	r3, [pc, #12]	@ (8002150 <HAL_RCC_GetHCLKFreq+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000

08002154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002158:	f7ff fff0 	bl	800213c <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b05      	ldr	r3, [pc, #20]	@ (8002174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0a9b      	lsrs	r3, r3, #10
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4903      	ldr	r1, [pc, #12]	@ (8002178 <HAL_RCC_GetPCLK1Freq+0x24>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	080072ac 	.word	0x080072ac

0800217c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002180:	f7ff ffdc 	bl	800213c <HAL_RCC_GetHCLKFreq>
 8002184:	4602      	mov	r2, r0
 8002186:	4b05      	ldr	r3, [pc, #20]	@ (800219c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	0b5b      	lsrs	r3, r3, #13
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4903      	ldr	r1, [pc, #12]	@ (80021a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002192:	5ccb      	ldrb	r3, [r1, r3]
 8002194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002198:	4618      	mov	r0, r3
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800
 80021a0:	080072ac 	.word	0x080072ac

080021a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	220f      	movs	r2, #15
 80021b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021b4:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <HAL_RCC_GetClockConfig+0x5c>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <HAL_RCC_GetClockConfig+0x5c>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <HAL_RCC_GetClockConfig+0x5c>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021d8:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <HAL_RCC_GetClockConfig+0x5c>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021e6:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <HAL_RCC_GetClockConfig+0x60>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 020f 	and.w	r2, r3, #15
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	40023c00 	.word	0x40023c00

08002208 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002208:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800220c:	b0a6      	sub	sp, #152	@ 0x98
 800220e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800222e:	4bc8      	ldr	r3, [pc, #800]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 030c 	and.w	r3, r3, #12
 8002236:	2b0c      	cmp	r3, #12
 8002238:	f200 817e 	bhi.w	8002538 <HAL_RCC_GetSysClockFreq+0x330>
 800223c:	a201      	add	r2, pc, #4	@ (adr r2, 8002244 <HAL_RCC_GetSysClockFreq+0x3c>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	08002279 	.word	0x08002279
 8002248:	08002539 	.word	0x08002539
 800224c:	08002539 	.word	0x08002539
 8002250:	08002539 	.word	0x08002539
 8002254:	08002281 	.word	0x08002281
 8002258:	08002539 	.word	0x08002539
 800225c:	08002539 	.word	0x08002539
 8002260:	08002539 	.word	0x08002539
 8002264:	08002289 	.word	0x08002289
 8002268:	08002539 	.word	0x08002539
 800226c:	08002539 	.word	0x08002539
 8002270:	08002539 	.word	0x08002539
 8002274:	080023f3 	.word	0x080023f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002278:	4bb6      	ldr	r3, [pc, #728]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x34c>)
 800227a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800227e:	e15f      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002280:	4bb5      	ldr	r3, [pc, #724]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x350>)
 8002282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002286:	e15b      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002288:	4bb1      	ldr	r3, [pc, #708]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002290:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002294:	4bae      	ldr	r3, [pc, #696]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d031      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022a0:	4bab      	ldr	r3, [pc, #684]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	099b      	lsrs	r3, r3, #6
 80022a6:	2200      	movs	r2, #0
 80022a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80022ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80022b4:	2300      	movs	r3, #0
 80022b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80022b8:	4ba7      	ldr	r3, [pc, #668]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x350>)
 80022ba:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80022be:	462a      	mov	r2, r5
 80022c0:	fb03 f202 	mul.w	r2, r3, r2
 80022c4:	2300      	movs	r3, #0
 80022c6:	4621      	mov	r1, r4
 80022c8:	fb01 f303 	mul.w	r3, r1, r3
 80022cc:	4413      	add	r3, r2
 80022ce:	4aa2      	ldr	r2, [pc, #648]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x350>)
 80022d0:	4621      	mov	r1, r4
 80022d2:	fba1 1202 	umull	r1, r2, r1, r2
 80022d6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80022d8:	460a      	mov	r2, r1
 80022da:	67ba      	str	r2, [r7, #120]	@ 0x78
 80022dc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80022de:	4413      	add	r3, r2
 80022e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022e6:	2200      	movs	r2, #0
 80022e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80022ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80022ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80022f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80022f4:	f7fe f998 	bl	8000628 <__aeabi_uldivmod>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4613      	mov	r3, r2
 80022fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002302:	e064      	b.n	80023ce <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002304:	4b92      	ldr	r3, [pc, #584]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	099b      	lsrs	r3, r3, #6
 800230a:	2200      	movs	r2, #0
 800230c:	653b      	str	r3, [r7, #80]	@ 0x50
 800230e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002316:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002318:	2300      	movs	r3, #0
 800231a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800231c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002320:	4622      	mov	r2, r4
 8002322:	462b      	mov	r3, r5
 8002324:	f04f 0000 	mov.w	r0, #0
 8002328:	f04f 0100 	mov.w	r1, #0
 800232c:	0159      	lsls	r1, r3, #5
 800232e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002332:	0150      	lsls	r0, r2, #5
 8002334:	4602      	mov	r2, r0
 8002336:	460b      	mov	r3, r1
 8002338:	4621      	mov	r1, r4
 800233a:	1a51      	subs	r1, r2, r1
 800233c:	6139      	str	r1, [r7, #16]
 800233e:	4629      	mov	r1, r5
 8002340:	eb63 0301 	sbc.w	r3, r3, r1
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002352:	4659      	mov	r1, fp
 8002354:	018b      	lsls	r3, r1, #6
 8002356:	4651      	mov	r1, sl
 8002358:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800235c:	4651      	mov	r1, sl
 800235e:	018a      	lsls	r2, r1, #6
 8002360:	4651      	mov	r1, sl
 8002362:	ebb2 0801 	subs.w	r8, r2, r1
 8002366:	4659      	mov	r1, fp
 8002368:	eb63 0901 	sbc.w	r9, r3, r1
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002378:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800237c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002380:	4690      	mov	r8, r2
 8002382:	4699      	mov	r9, r3
 8002384:	4623      	mov	r3, r4
 8002386:	eb18 0303 	adds.w	r3, r8, r3
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	462b      	mov	r3, r5
 800238e:	eb49 0303 	adc.w	r3, r9, r3
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023a0:	4629      	mov	r1, r5
 80023a2:	028b      	lsls	r3, r1, #10
 80023a4:	4621      	mov	r1, r4
 80023a6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023aa:	4621      	mov	r1, r4
 80023ac:	028a      	lsls	r2, r1, #10
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023b6:	2200      	movs	r2, #0
 80023b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80023ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80023bc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80023c0:	f7fe f932 	bl	8000628 <__aeabi_uldivmod>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4613      	mov	r3, r2
 80023ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023ce:	4b60      	ldr	r3, [pc, #384]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	0c1b      	lsrs	r3, r3, #16
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	3301      	adds	r3, #1
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80023e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80023e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80023f0:	e0a6      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f2:	4b57      	ldr	r3, [pc, #348]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023fa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fe:	4b54      	ldr	r3, [pc, #336]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d02a      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240a:	4b51      	ldr	r3, [pc, #324]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	099b      	lsrs	r3, r3, #6
 8002410:	2200      	movs	r2, #0
 8002412:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002414:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002418:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800241c:	2100      	movs	r1, #0
 800241e:	4b4e      	ldr	r3, [pc, #312]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x350>)
 8002420:	fb03 f201 	mul.w	r2, r3, r1
 8002424:	2300      	movs	r3, #0
 8002426:	fb00 f303 	mul.w	r3, r0, r3
 800242a:	4413      	add	r3, r2
 800242c:	4a4a      	ldr	r2, [pc, #296]	@ (8002558 <HAL_RCC_GetSysClockFreq+0x350>)
 800242e:	fba0 1202 	umull	r1, r2, r0, r2
 8002432:	677a      	str	r2, [r7, #116]	@ 0x74
 8002434:	460a      	mov	r2, r1
 8002436:	673a      	str	r2, [r7, #112]	@ 0x70
 8002438:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800243a:	4413      	add	r3, r2
 800243c:	677b      	str	r3, [r7, #116]	@ 0x74
 800243e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002442:	2200      	movs	r2, #0
 8002444:	633b      	str	r3, [r7, #48]	@ 0x30
 8002446:	637a      	str	r2, [r7, #52]	@ 0x34
 8002448:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800244c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002450:	f7fe f8ea 	bl	8000628 <__aeabi_uldivmod>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4613      	mov	r3, r2
 800245a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800245e:	e05b      	b.n	8002518 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002460:	4b3b      	ldr	r3, [pc, #236]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	099b      	lsrs	r3, r3, #6
 8002466:	2200      	movs	r2, #0
 8002468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800246a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800246c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002472:	623b      	str	r3, [r7, #32]
 8002474:	2300      	movs	r3, #0
 8002476:	627b      	str	r3, [r7, #36]	@ 0x24
 8002478:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800247c:	4642      	mov	r2, r8
 800247e:	464b      	mov	r3, r9
 8002480:	f04f 0000 	mov.w	r0, #0
 8002484:	f04f 0100 	mov.w	r1, #0
 8002488:	0159      	lsls	r1, r3, #5
 800248a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800248e:	0150      	lsls	r0, r2, #5
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4641      	mov	r1, r8
 8002496:	ebb2 0a01 	subs.w	sl, r2, r1
 800249a:	4649      	mov	r1, r9
 800249c:	eb63 0b01 	sbc.w	fp, r3, r1
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024b4:	ebb2 040a 	subs.w	r4, r2, sl
 80024b8:	eb63 050b 	sbc.w	r5, r3, fp
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	00eb      	lsls	r3, r5, #3
 80024c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ca:	00e2      	lsls	r2, r4, #3
 80024cc:	4614      	mov	r4, r2
 80024ce:	461d      	mov	r5, r3
 80024d0:	4643      	mov	r3, r8
 80024d2:	18e3      	adds	r3, r4, r3
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	464b      	mov	r3, r9
 80024d8:	eb45 0303 	adc.w	r3, r5, r3
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024ea:	4629      	mov	r1, r5
 80024ec:	028b      	lsls	r3, r1, #10
 80024ee:	4621      	mov	r1, r4
 80024f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024f4:	4621      	mov	r1, r4
 80024f6:	028a      	lsls	r2, r1, #10
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002500:	2200      	movs	r2, #0
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	61fa      	str	r2, [r7, #28]
 8002506:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800250a:	f7fe f88d 	bl	8000628 <__aeabi_uldivmod>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4613      	mov	r3, r2
 8002514:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002518:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <HAL_RCC_GetSysClockFreq+0x348>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	0f1b      	lsrs	r3, r3, #28
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002526:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800252a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800252e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002532:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002536:	e003      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002538:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_RCC_GetSysClockFreq+0x34c>)
 800253a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800253e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002540:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002544:	4618      	mov	r0, r3
 8002546:	3798      	adds	r7, #152	@ 0x98
 8002548:	46bd      	mov	sp, r7
 800254a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	00f42400 	.word	0x00f42400
 8002558:	017d7840 	.word	0x017d7840

0800255c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d101      	bne.n	800256e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e28d      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8083 	beq.w	8002682 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800257c:	4b94      	ldr	r3, [pc, #592]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 030c 	and.w	r3, r3, #12
 8002584:	2b04      	cmp	r3, #4
 8002586:	d019      	beq.n	80025bc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002588:	4b91      	ldr	r3, [pc, #580]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002590:	2b08      	cmp	r3, #8
 8002592:	d106      	bne.n	80025a2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002594:	4b8e      	ldr	r3, [pc, #568]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025a0:	d00c      	beq.n	80025bc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025a2:	4b8b      	ldr	r3, [pc, #556]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025aa:	2b0c      	cmp	r3, #12
 80025ac:	d112      	bne.n	80025d4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ae:	4b88      	ldr	r3, [pc, #544]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ba:	d10b      	bne.n	80025d4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025bc:	4b84      	ldr	r3, [pc, #528]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d05b      	beq.n	8002680 <HAL_RCC_OscConfig+0x124>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d157      	bne.n	8002680 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e25a      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025dc:	d106      	bne.n	80025ec <HAL_RCC_OscConfig+0x90>
 80025de:	4b7c      	ldr	r3, [pc, #496]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a7b      	ldr	r2, [pc, #492]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e01d      	b.n	8002628 <HAL_RCC_OscConfig+0xcc>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025f4:	d10c      	bne.n	8002610 <HAL_RCC_OscConfig+0xb4>
 80025f6:	4b76      	ldr	r3, [pc, #472]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a75      	ldr	r2, [pc, #468]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80025fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	4b73      	ldr	r3, [pc, #460]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a72      	ldr	r2, [pc, #456]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002608:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260c:	6013      	str	r3, [r2, #0]
 800260e:	e00b      	b.n	8002628 <HAL_RCC_OscConfig+0xcc>
 8002610:	4b6f      	ldr	r3, [pc, #444]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6e      	ldr	r2, [pc, #440]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800261a:	6013      	str	r3, [r2, #0]
 800261c:	4b6c      	ldr	r3, [pc, #432]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a6b      	ldr	r2, [pc, #428]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d013      	beq.n	8002658 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fe32 	bl	8001298 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002638:	f7fe fe2e 	bl	8001298 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b64      	cmp	r3, #100	@ 0x64
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e21f      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b61      	ldr	r3, [pc, #388]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0xdc>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7fe fe1e 	bl	8001298 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002660:	f7fe fe1a 	bl	8001298 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b64      	cmp	r3, #100	@ 0x64
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e20b      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002672:	4b57      	ldr	r3, [pc, #348]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x104>
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d06f      	beq.n	800276e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800268e:	4b50      	ldr	r3, [pc, #320]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b00      	cmp	r3, #0
 8002698:	d017      	beq.n	80026ca <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800269a:	4b4d      	ldr	r3, [pc, #308]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 030c 	and.w	r3, r3, #12
        || \
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d105      	bne.n	80026b2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026a6:	4b4a      	ldr	r3, [pc, #296]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026b2:	4b47      	ldr	r3, [pc, #284]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026ba:	2b0c      	cmp	r3, #12
 80026bc:	d11c      	bne.n	80026f8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026be:	4b44      	ldr	r3, [pc, #272]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d116      	bne.n	80026f8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ca:	4b41      	ldr	r3, [pc, #260]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x186>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e1d3      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e2:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4937      	ldr	r1, [pc, #220]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026f6:	e03a      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d020      	beq.n	8002742 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002700:	4b34      	ldr	r3, [pc, #208]	@ (80027d4 <HAL_RCC_OscConfig+0x278>)
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7fe fdc7 	bl	8001298 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270e:	f7fe fdc3 	bl	8001298 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1b4      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002720:	4b2b      	ldr	r3, [pc, #172]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b28      	ldr	r3, [pc, #160]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4925      	ldr	r1, [pc, #148]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
 8002740:	e015      	b.n	800276e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002742:	4b24      	ldr	r3, [pc, #144]	@ (80027d4 <HAL_RCC_OscConfig+0x278>)
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002748:	f7fe fda6 	bl	8001298 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002750:	f7fe fda2 	bl	8001298 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e193      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002762:	4b1b      	ldr	r3, [pc, #108]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0308 	and.w	r3, r3, #8
 8002776:	2b00      	cmp	r3, #0
 8002778:	d036      	beq.n	80027e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d016      	beq.n	80027b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <HAL_RCC_OscConfig+0x27c>)
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe fd86 	bl	8001298 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002790:	f7fe fd82 	bl	8001298 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e173      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <HAL_RCC_OscConfig+0x274>)
 80027a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x234>
 80027ae:	e01b      	b.n	80027e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b0:	4b09      	ldr	r3, [pc, #36]	@ (80027d8 <HAL_RCC_OscConfig+0x27c>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b6:	f7fe fd6f 	bl	8001298 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	e00e      	b.n	80027dc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027be:	f7fe fd6b 	bl	8001298 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d907      	bls.n	80027dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e15c      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
 80027d0:	40023800 	.word	0x40023800
 80027d4:	42470000 	.word	0x42470000
 80027d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	4b8a      	ldr	r3, [pc, #552]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80027de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1ea      	bne.n	80027be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0304 	and.w	r3, r3, #4
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8097 	beq.w	8002924 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f6:	2300      	movs	r3, #0
 80027f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027fa:	4b83      	ldr	r3, [pc, #524]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d10f      	bne.n	8002826 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002814:	6413      	str	r3, [r2, #64]	@ 0x40
 8002816:	4b7c      	ldr	r3, [pc, #496]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002822:	2301      	movs	r3, #1
 8002824:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002826:	4b79      	ldr	r3, [pc, #484]	@ (8002a0c <HAL_RCC_OscConfig+0x4b0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282e:	2b00      	cmp	r3, #0
 8002830:	d118      	bne.n	8002864 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002832:	4b76      	ldr	r3, [pc, #472]	@ (8002a0c <HAL_RCC_OscConfig+0x4b0>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a75      	ldr	r2, [pc, #468]	@ (8002a0c <HAL_RCC_OscConfig+0x4b0>)
 8002838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800283c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800283e:	f7fe fd2b 	bl	8001298 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002846:	f7fe fd27 	bl	8001298 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e118      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002858:	4b6c      	ldr	r3, [pc, #432]	@ (8002a0c <HAL_RCC_OscConfig+0x4b0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f0      	beq.n	8002846 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d106      	bne.n	800287a <HAL_RCC_OscConfig+0x31e>
 800286c:	4b66      	ldr	r3, [pc, #408]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002870:	4a65      	ldr	r2, [pc, #404]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002872:	f043 0301 	orr.w	r3, r3, #1
 8002876:	6713      	str	r3, [r2, #112]	@ 0x70
 8002878:	e01c      	b.n	80028b4 <HAL_RCC_OscConfig+0x358>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	2b05      	cmp	r3, #5
 8002880:	d10c      	bne.n	800289c <HAL_RCC_OscConfig+0x340>
 8002882:	4b61      	ldr	r3, [pc, #388]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002886:	4a60      	ldr	r2, [pc, #384]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	6713      	str	r3, [r2, #112]	@ 0x70
 800288e:	4b5e      	ldr	r3, [pc, #376]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002892:	4a5d      	ldr	r2, [pc, #372]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002894:	f043 0301 	orr.w	r3, r3, #1
 8002898:	6713      	str	r3, [r2, #112]	@ 0x70
 800289a:	e00b      	b.n	80028b4 <HAL_RCC_OscConfig+0x358>
 800289c:	4b5a      	ldr	r3, [pc, #360]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800289e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a0:	4a59      	ldr	r2, [pc, #356]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80028a2:	f023 0301 	bic.w	r3, r3, #1
 80028a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028a8:	4b57      	ldr	r3, [pc, #348]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028ac:	4a56      	ldr	r2, [pc, #344]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80028ae:	f023 0304 	bic.w	r3, r3, #4
 80028b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d015      	beq.n	80028e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe fcec 	bl	8001298 <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	e00a      	b.n	80028da <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c4:	f7fe fce8 	bl	8001298 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0d7      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028da:	4b4b      	ldr	r3, [pc, #300]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80028dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0ee      	beq.n	80028c4 <HAL_RCC_OscConfig+0x368>
 80028e6:	e014      	b.n	8002912 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e8:	f7fe fcd6 	bl	8001298 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7fe fcd2 	bl	8001298 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0c1      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002906:	4b40      	ldr	r3, [pc, #256]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ee      	bne.n	80028f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002912:	7dfb      	ldrb	r3, [r7, #23]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d105      	bne.n	8002924 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002918:	4b3b      	ldr	r3, [pc, #236]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	4a3a      	ldr	r2, [pc, #232]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800291e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002922:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 80ad 	beq.w	8002a88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800292e:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 030c 	and.w	r3, r3, #12
 8002936:	2b08      	cmp	r3, #8
 8002938:	d060      	beq.n	80029fc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d145      	bne.n	80029ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b33      	ldr	r3, [pc, #204]	@ (8002a10 <HAL_RCC_OscConfig+0x4b4>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe fca6 	bl	8001298 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7fe fca2 	bl	8001298 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e093      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002962:	4b29      	ldr	r3, [pc, #164]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800297c:	019b      	lsls	r3, r3, #6
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002984:	085b      	lsrs	r3, r3, #1
 8002986:	3b01      	subs	r3, #1
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002990:	061b      	lsls	r3, r3, #24
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002998:	071b      	lsls	r3, r3, #28
 800299a:	491b      	ldr	r1, [pc, #108]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x4b4>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a6:	f7fe fc77 	bl	8001298 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe fc73 	bl	8001298 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e064      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x452>
 80029cc:	e05c      	b.n	8002a88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b10      	ldr	r3, [pc, #64]	@ (8002a10 <HAL_RCC_OscConfig+0x4b4>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fc60 	bl	8001298 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe fc5c 	bl	8001298 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e04d      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <HAL_RCC_OscConfig+0x4ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x480>
 80029fa:	e045      	b.n	8002a88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e040      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a14:	4b1f      	ldr	r3, [pc, #124]	@ (8002a94 <HAL_RCC_OscConfig+0x538>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d030      	beq.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d129      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d122      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d119      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d10f      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d001      	beq.n	8002a88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e000      	b.n	8002a8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800

08002a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e041      	b.n	8002b2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7fe fa10 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f000 fa5a 	bl	8002f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d001      	beq.n	8002b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e04e      	b.n	8002bee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2202      	movs	r2, #2
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f042 0201 	orr.w	r2, r2, #1
 8002b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a23      	ldr	r2, [pc, #140]	@ (8002bfc <HAL_TIM_Base_Start_IT+0xc4>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d022      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7a:	d01d      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1f      	ldr	r2, [pc, #124]	@ (8002c00 <HAL_TIM_Base_Start_IT+0xc8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d018      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1e      	ldr	r2, [pc, #120]	@ (8002c04 <HAL_TIM_Base_Start_IT+0xcc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d013      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1c      	ldr	r2, [pc, #112]	@ (8002c08 <HAL_TIM_Base_Start_IT+0xd0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d00e      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c0c <HAL_TIM_Base_Start_IT+0xd4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	@ (8002c10 <HAL_TIM_Base_Start_IT+0xd8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d004      	beq.n	8002bb8 <HAL_TIM_Base_Start_IT+0x80>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a18      	ldr	r2, [pc, #96]	@ (8002c14 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d111      	bne.n	8002bdc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d010      	beq.n	8002bec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0201 	orr.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bda:	e007      	b.n	8002bec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0201 	orr.w	r2, r2, #1
 8002bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3714      	adds	r7, #20
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40010000 	.word	0x40010000
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800
 8002c08:	40000c00 	.word	0x40000c00
 8002c0c:	40010400 	.word	0x40010400
 8002c10:	40014000 	.word	0x40014000
 8002c14:	40001800 	.word	0x40001800

08002c18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e041      	b.n	8002cae <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d106      	bne.n	8002c44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f839 	bl	8002cb6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3304      	adds	r3, #4
 8002c54:	4619      	mov	r1, r3
 8002c56:	4610      	mov	r0, r2
 8002c58:	f000 f99a 	bl	8002f90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b086      	sub	sp, #24
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_TIM_IC_ConfigChannel+0x1e>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e088      	b.n	8002dfa <HAL_TIM_IC_ConfigChannel+0x130>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11b      	bne.n	8002d2e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002d06:	f000 f9e9 	bl	80030dc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699a      	ldr	r2, [r3, #24]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 020c 	bic.w	r2, r2, #12
 8002d18:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6999      	ldr	r1, [r3, #24]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	619a      	str	r2, [r3, #24]
 8002d2c:	e060      	b.n	8002df0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d11c      	bne.n	8002d6e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002d44:	f000 fa6d 	bl	8003222 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002d56:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6999      	ldr	r1, [r3, #24]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	021a      	lsls	r2, r3, #8
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	619a      	str	r2, [r3, #24]
 8002d6c:	e040      	b.n	8002df0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d11b      	bne.n	8002dac <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002d84:	f000 faba 	bl	80032fc <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	69da      	ldr	r2, [r3, #28]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 020c 	bic.w	r2, r2, #12
 8002d96:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69d9      	ldr	r1, [r3, #28]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	61da      	str	r2, [r3, #28]
 8002daa:	e021      	b.n	8002df0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b0c      	cmp	r3, #12
 8002db0:	d11c      	bne.n	8002dec <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002dc2:	f000 fad7 	bl	8003374 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002dd4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	69d9      	ldr	r1, [r3, #28]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	021a      	lsls	r2, r3, #8
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	61da      	str	r2, [r3, #28]
 8002dea:	e001      	b.n	8002df0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_TIM_ConfigClockSource+0x1c>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e0b4      	b.n	8002f88 <HAL_TIM_ConfigClockSource+0x186>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e44:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e56:	d03e      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0xd4>
 8002e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5c:	f200 8087 	bhi.w	8002f6e <HAL_TIM_ConfigClockSource+0x16c>
 8002e60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e64:	f000 8086 	beq.w	8002f74 <HAL_TIM_ConfigClockSource+0x172>
 8002e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e6c:	d87f      	bhi.n	8002f6e <HAL_TIM_ConfigClockSource+0x16c>
 8002e6e:	2b70      	cmp	r3, #112	@ 0x70
 8002e70:	d01a      	beq.n	8002ea8 <HAL_TIM_ConfigClockSource+0xa6>
 8002e72:	2b70      	cmp	r3, #112	@ 0x70
 8002e74:	d87b      	bhi.n	8002f6e <HAL_TIM_ConfigClockSource+0x16c>
 8002e76:	2b60      	cmp	r3, #96	@ 0x60
 8002e78:	d050      	beq.n	8002f1c <HAL_TIM_ConfigClockSource+0x11a>
 8002e7a:	2b60      	cmp	r3, #96	@ 0x60
 8002e7c:	d877      	bhi.n	8002f6e <HAL_TIM_ConfigClockSource+0x16c>
 8002e7e:	2b50      	cmp	r3, #80	@ 0x50
 8002e80:	d03c      	beq.n	8002efc <HAL_TIM_ConfigClockSource+0xfa>
 8002e82:	2b50      	cmp	r3, #80	@ 0x50
 8002e84:	d873      	bhi.n	8002f6e <HAL_TIM_ConfigClockSource+0x16c>
 8002e86:	2b40      	cmp	r3, #64	@ 0x40
 8002e88:	d058      	beq.n	8002f3c <HAL_TIM_ConfigClockSource+0x13a>
 8002e8a:	2b40      	cmp	r3, #64	@ 0x40
 8002e8c:	d86f      	bhi.n	8002f6e <HAL_TIM_ConfigClockSource+0x16c>
 8002e8e:	2b30      	cmp	r3, #48	@ 0x30
 8002e90:	d064      	beq.n	8002f5c <HAL_TIM_ConfigClockSource+0x15a>
 8002e92:	2b30      	cmp	r3, #48	@ 0x30
 8002e94:	d86b      	bhi.n	8002f6e <HAL_TIM_ConfigClockSource+0x16c>
 8002e96:	2b20      	cmp	r3, #32
 8002e98:	d060      	beq.n	8002f5c <HAL_TIM_ConfigClockSource+0x15a>
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d867      	bhi.n	8002f6e <HAL_TIM_ConfigClockSource+0x16c>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d05c      	beq.n	8002f5c <HAL_TIM_ConfigClockSource+0x15a>
 8002ea2:	2b10      	cmp	r3, #16
 8002ea4:	d05a      	beq.n	8002f5c <HAL_TIM_ConfigClockSource+0x15a>
 8002ea6:	e062      	b.n	8002f6e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002eb8:	f000 fab4 	bl	8003424 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002eca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	609a      	str	r2, [r3, #8]
      break;
 8002ed4:	e04f      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ee6:	f000 fa9d 	bl	8003424 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ef8:	609a      	str	r2, [r3, #8]
      break;
 8002efa:	e03c      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f08:	461a      	mov	r2, r3
 8002f0a:	f000 f95b 	bl	80031c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2150      	movs	r1, #80	@ 0x50
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 fa6a 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8002f1a:	e02c      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f000 f9b7 	bl	800329c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2160      	movs	r1, #96	@ 0x60
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 fa5a 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8002f3a:	e01c      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f000 f93b 	bl	80031c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2140      	movs	r1, #64	@ 0x40
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fa4a 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8002f5a:	e00c      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4619      	mov	r1, r3
 8002f66:	4610      	mov	r0, r2
 8002f68:	f000 fa41 	bl	80033ee <TIM_ITRx_SetConfig>
      break;
 8002f6c:	e003      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      break;
 8002f72:	e000      	b.n	8002f76 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002f74:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a43      	ldr	r2, [pc, #268]	@ (80030b0 <TIM_Base_SetConfig+0x120>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d013      	beq.n	8002fd0 <TIM_Base_SetConfig+0x40>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fae:	d00f      	beq.n	8002fd0 <TIM_Base_SetConfig+0x40>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a40      	ldr	r2, [pc, #256]	@ (80030b4 <TIM_Base_SetConfig+0x124>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d00b      	beq.n	8002fd0 <TIM_Base_SetConfig+0x40>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a3f      	ldr	r2, [pc, #252]	@ (80030b8 <TIM_Base_SetConfig+0x128>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d007      	beq.n	8002fd0 <TIM_Base_SetConfig+0x40>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a3e      	ldr	r2, [pc, #248]	@ (80030bc <TIM_Base_SetConfig+0x12c>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d003      	beq.n	8002fd0 <TIM_Base_SetConfig+0x40>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a3d      	ldr	r2, [pc, #244]	@ (80030c0 <TIM_Base_SetConfig+0x130>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d108      	bne.n	8002fe2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a32      	ldr	r2, [pc, #200]	@ (80030b0 <TIM_Base_SetConfig+0x120>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d02b      	beq.n	8003042 <TIM_Base_SetConfig+0xb2>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ff0:	d027      	beq.n	8003042 <TIM_Base_SetConfig+0xb2>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a2f      	ldr	r2, [pc, #188]	@ (80030b4 <TIM_Base_SetConfig+0x124>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d023      	beq.n	8003042 <TIM_Base_SetConfig+0xb2>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a2e      	ldr	r2, [pc, #184]	@ (80030b8 <TIM_Base_SetConfig+0x128>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d01f      	beq.n	8003042 <TIM_Base_SetConfig+0xb2>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a2d      	ldr	r2, [pc, #180]	@ (80030bc <TIM_Base_SetConfig+0x12c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01b      	beq.n	8003042 <TIM_Base_SetConfig+0xb2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a2c      	ldr	r2, [pc, #176]	@ (80030c0 <TIM_Base_SetConfig+0x130>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d017      	beq.n	8003042 <TIM_Base_SetConfig+0xb2>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a2b      	ldr	r2, [pc, #172]	@ (80030c4 <TIM_Base_SetConfig+0x134>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <TIM_Base_SetConfig+0xb2>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a2a      	ldr	r2, [pc, #168]	@ (80030c8 <TIM_Base_SetConfig+0x138>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00f      	beq.n	8003042 <TIM_Base_SetConfig+0xb2>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a29      	ldr	r2, [pc, #164]	@ (80030cc <TIM_Base_SetConfig+0x13c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00b      	beq.n	8003042 <TIM_Base_SetConfig+0xb2>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a28      	ldr	r2, [pc, #160]	@ (80030d0 <TIM_Base_SetConfig+0x140>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d007      	beq.n	8003042 <TIM_Base_SetConfig+0xb2>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a27      	ldr	r2, [pc, #156]	@ (80030d4 <TIM_Base_SetConfig+0x144>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d003      	beq.n	8003042 <TIM_Base_SetConfig+0xb2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a26      	ldr	r2, [pc, #152]	@ (80030d8 <TIM_Base_SetConfig+0x148>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d108      	bne.n	8003054 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a0e      	ldr	r2, [pc, #56]	@ (80030b0 <TIM_Base_SetConfig+0x120>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d003      	beq.n	8003082 <TIM_Base_SetConfig+0xf2>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a10      	ldr	r2, [pc, #64]	@ (80030c0 <TIM_Base_SetConfig+0x130>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d103      	bne.n	800308a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f043 0204 	orr.w	r2, r3, #4
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	601a      	str	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40010000 	.word	0x40010000
 80030b4:	40000400 	.word	0x40000400
 80030b8:	40000800 	.word	0x40000800
 80030bc:	40000c00 	.word	0x40000c00
 80030c0:	40010400 	.word	0x40010400
 80030c4:	40014000 	.word	0x40014000
 80030c8:	40014400 	.word	0x40014400
 80030cc:	40014800 	.word	0x40014800
 80030d0:	40001800 	.word	0x40001800
 80030d4:	40001c00 	.word	0x40001c00
 80030d8:	40002000 	.word	0x40002000

080030dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	f023 0201 	bic.w	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4a28      	ldr	r2, [pc, #160]	@ (80031a8 <TIM_TI1_SetConfig+0xcc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d01b      	beq.n	8003142 <TIM_TI1_SetConfig+0x66>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003110:	d017      	beq.n	8003142 <TIM_TI1_SetConfig+0x66>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4a25      	ldr	r2, [pc, #148]	@ (80031ac <TIM_TI1_SetConfig+0xd0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <TIM_TI1_SetConfig+0x66>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4a24      	ldr	r2, [pc, #144]	@ (80031b0 <TIM_TI1_SetConfig+0xd4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00f      	beq.n	8003142 <TIM_TI1_SetConfig+0x66>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4a23      	ldr	r2, [pc, #140]	@ (80031b4 <TIM_TI1_SetConfig+0xd8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00b      	beq.n	8003142 <TIM_TI1_SetConfig+0x66>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4a22      	ldr	r2, [pc, #136]	@ (80031b8 <TIM_TI1_SetConfig+0xdc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <TIM_TI1_SetConfig+0x66>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4a21      	ldr	r2, [pc, #132]	@ (80031bc <TIM_TI1_SetConfig+0xe0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d003      	beq.n	8003142 <TIM_TI1_SetConfig+0x66>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a20      	ldr	r2, [pc, #128]	@ (80031c0 <TIM_TI1_SetConfig+0xe4>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <TIM_TI1_SetConfig+0x6a>
 8003142:	2301      	movs	r3, #1
 8003144:	e000      	b.n	8003148 <TIM_TI1_SetConfig+0x6c>
 8003146:	2300      	movs	r3, #0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f023 0303 	bic.w	r3, r3, #3
 8003152:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4313      	orrs	r3, r2
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e003      	b.n	8003166 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800316c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	b2db      	uxtb	r3, r3
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f023 030a 	bic.w	r3, r3, #10
 8003180:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f003 030a 	and.w	r3, r3, #10
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	621a      	str	r2, [r3, #32]
}
 800319a:	bf00      	nop
 800319c:	371c      	adds	r7, #28
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40000800 	.word	0x40000800
 80031b4:	40000c00 	.word	0x40000c00
 80031b8:	40010400 	.word	0x40010400
 80031bc:	40014000 	.word	0x40014000
 80031c0:	40001800 	.word	0x40001800

080031c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
 80031da:	f023 0201 	bic.w	r2, r3, #1
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f023 030a 	bic.w	r3, r3, #10
 8003200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
 8003208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	621a      	str	r2, [r3, #32]
}
 8003216:	bf00      	nop
 8003218:	371c      	adds	r7, #28
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003222:	b480      	push	{r7}
 8003224:	b087      	sub	sp, #28
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0210 	bic.w	r2, r3, #16
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800324e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003260:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	031b      	lsls	r3, r3, #12
 8003266:	b29b      	uxth	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4313      	orrs	r3, r2
 800326c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003274:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	621a      	str	r2, [r3, #32]
}
 8003290:	bf00      	nop
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	f023 0210 	bic.w	r2, r3, #16
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80032c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	031b      	lsls	r3, r3, #12
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80032d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	621a      	str	r2, [r3, #32]
}
 80032f0:	bf00      	nop
 80032f2:	371c      	adds	r7, #28
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f023 0303 	bic.w	r3, r3, #3
 8003328:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4313      	orrs	r3, r2
 8003330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003338:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	b2db      	uxtb	r3, r3
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800334c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003356:	697a      	ldr	r2, [r7, #20]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	621a      	str	r2, [r3, #32]
}
 8003368:	bf00      	nop
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a1b      	ldr	r3, [r3, #32]
 8003386:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80033b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	031b      	lsls	r3, r3, #12
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	4313      	orrs	r3, r2
 80033be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80033c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	031b      	lsls	r3, r3, #12
 80033cc:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b085      	sub	sp, #20
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
 80033f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003404:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	f043 0307 	orr.w	r3, r3, #7
 8003410:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	609a      	str	r2, [r3, #8]
}
 8003418:	bf00      	nop
 800341a:	3714      	adds	r7, #20
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003424:	b480      	push	{r7}
 8003426:	b087      	sub	sp, #28
 8003428:	af00      	add	r7, sp, #0
 800342a:	60f8      	str	r0, [r7, #12]
 800342c:	60b9      	str	r1, [r7, #8]
 800342e:	607a      	str	r2, [r7, #4]
 8003430:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800343e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	021a      	lsls	r2, r3, #8
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	431a      	orrs	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4313      	orrs	r3, r2
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	609a      	str	r2, [r3, #8]
}
 8003458:	bf00      	nop
 800345a:	371c      	adds	r7, #28
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003478:	2302      	movs	r3, #2
 800347a:	e05a      	b.n	8003532 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a21      	ldr	r2, [pc, #132]	@ (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d022      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c8:	d01d      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d018      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003548 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a1a      	ldr	r2, [pc, #104]	@ (800354c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00e      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a18      	ldr	r2, [pc, #96]	@ (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a17      	ldr	r2, [pc, #92]	@ (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a15      	ldr	r2, [pc, #84]	@ (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d10c      	bne.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800350c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	4313      	orrs	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40010000 	.word	0x40010000
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40010400 	.word	0x40010400
 8003554:	40014000 	.word	0x40014000
 8003558:	40001800 	.word	0x40001800

0800355c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d101      	bne.n	800356e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e042      	b.n	80035f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fd fcf4 	bl	8000f70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2224      	movs	r2, #36	@ 0x24
 800358c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800359e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f973 	bl	800388c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68da      	ldr	r2, [r3, #12]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08a      	sub	sp, #40	@ 0x28
 8003600:	af02      	add	r7, sp, #8
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	4613      	mov	r3, r2
 800360a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b20      	cmp	r3, #32
 800361a:	d175      	bne.n	8003708 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <HAL_UART_Transmit+0x2c>
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e06e      	b.n	800370a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2221      	movs	r2, #33	@ 0x21
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800363a:	f7fd fe2d 	bl	8001298 <HAL_GetTick>
 800363e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	88fa      	ldrh	r2, [r7, #6]
 8003644:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	88fa      	ldrh	r2, [r7, #6]
 800364a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003654:	d108      	bne.n	8003668 <HAL_UART_Transmit+0x6c>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d104      	bne.n	8003668 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e003      	b.n	8003670 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800366c:	2300      	movs	r3, #0
 800366e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003670:	e02e      	b.n	80036d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2200      	movs	r2, #0
 800367a:	2180      	movs	r1, #128	@ 0x80
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f848 	bl	8003712 <UART_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2220      	movs	r2, #32
 800368c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e03a      	b.n	800370a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10b      	bne.n	80036b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	3302      	adds	r3, #2
 80036ae:	61bb      	str	r3, [r7, #24]
 80036b0:	e007      	b.n	80036c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	781a      	ldrb	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	3301      	adds	r3, #1
 80036c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1cb      	bne.n	8003672 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	2200      	movs	r2, #0
 80036e2:	2140      	movs	r1, #64	@ 0x40
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f814 	bl	8003712 <UART_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e006      	b.n	800370a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	e000      	b.n	800370a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003708:	2302      	movs	r3, #2
  }
}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	4613      	mov	r3, r2
 8003720:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003722:	e03b      	b.n	800379c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372a:	d037      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372c:	f7fd fdb4 	bl	8001298 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	6a3a      	ldr	r2, [r7, #32]
 8003738:	429a      	cmp	r2, r3
 800373a:	d302      	bcc.n	8003742 <UART_WaitOnFlagUntilTimeout+0x30>
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e03a      	b.n	80037bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d023      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	2b80      	cmp	r3, #128	@ 0x80
 8003758:	d020      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0x8a>
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b40      	cmp	r3, #64	@ 0x40
 800375e:	d01d      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b08      	cmp	r3, #8
 800376c:	d116      	bne.n	800379c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f81d 	bl	80037c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2208      	movs	r2, #8
 800378e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e00f      	b.n	80037bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4013      	ands	r3, r2
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	461a      	mov	r2, r3
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d0b4      	beq.n	8003724 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b095      	sub	sp, #84	@ 0x54
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80037ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037f4:	e841 2300 	strex	r3, r2, [r1]
 80037f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1e5      	bne.n	80037cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3314      	adds	r3, #20
 8003806:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f023 0301 	bic.w	r3, r3, #1
 8003816:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3314      	adds	r3, #20
 800381e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003820:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003822:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003826:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800382e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e5      	bne.n	8003800 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003838:	2b01      	cmp	r3, #1
 800383a:	d119      	bne.n	8003870 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	330c      	adds	r3, #12
 8003842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	e853 3f00 	ldrex	r3, [r3]
 800384a:	60bb      	str	r3, [r7, #8]
   return(result);
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	f023 0310 	bic.w	r3, r3, #16
 8003852:	647b      	str	r3, [r7, #68]	@ 0x44
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	330c      	adds	r3, #12
 800385a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800385c:	61ba      	str	r2, [r7, #24]
 800385e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003860:	6979      	ldr	r1, [r7, #20]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	e841 2300 	strex	r3, r2, [r1]
 8003868:	613b      	str	r3, [r7, #16]
   return(result);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1e5      	bne.n	800383c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2220      	movs	r2, #32
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800387e:	bf00      	nop
 8003880:	3754      	adds	r7, #84	@ 0x54
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800388c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003890:	b0c0      	sub	sp, #256	@ 0x100
 8003892:	af00      	add	r7, sp, #0
 8003894:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80038a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038a8:	68d9      	ldr	r1, [r3, #12]
 80038aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	ea40 0301 	orr.w	r3, r0, r1
 80038b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	431a      	orrs	r2, r3
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	431a      	orrs	r2, r3
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80038e4:	f021 010c 	bic.w	r1, r1, #12
 80038e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80038f2:	430b      	orrs	r3, r1
 80038f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003906:	6999      	ldr	r1, [r3, #24]
 8003908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	ea40 0301 	orr.w	r3, r0, r1
 8003912:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4b8f      	ldr	r3, [pc, #572]	@ (8003b58 <UART_SetConfig+0x2cc>)
 800391c:	429a      	cmp	r2, r3
 800391e:	d005      	beq.n	800392c <UART_SetConfig+0xa0>
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	4b8d      	ldr	r3, [pc, #564]	@ (8003b5c <UART_SetConfig+0x2d0>)
 8003928:	429a      	cmp	r2, r3
 800392a:	d104      	bne.n	8003936 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800392c:	f7fe fc26 	bl	800217c <HAL_RCC_GetPCLK2Freq>
 8003930:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003934:	e003      	b.n	800393e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003936:	f7fe fc0d 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 800393a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800393e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003948:	f040 810c 	bne.w	8003b64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800394c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003950:	2200      	movs	r2, #0
 8003952:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003956:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800395a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800395e:	4622      	mov	r2, r4
 8003960:	462b      	mov	r3, r5
 8003962:	1891      	adds	r1, r2, r2
 8003964:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003966:	415b      	adcs	r3, r3
 8003968:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800396a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800396e:	4621      	mov	r1, r4
 8003970:	eb12 0801 	adds.w	r8, r2, r1
 8003974:	4629      	mov	r1, r5
 8003976:	eb43 0901 	adc.w	r9, r3, r1
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800398a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800398e:	4690      	mov	r8, r2
 8003990:	4699      	mov	r9, r3
 8003992:	4623      	mov	r3, r4
 8003994:	eb18 0303 	adds.w	r3, r8, r3
 8003998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800399c:	462b      	mov	r3, r5
 800399e:	eb49 0303 	adc.w	r3, r9, r3
 80039a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80039b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039ba:	460b      	mov	r3, r1
 80039bc:	18db      	adds	r3, r3, r3
 80039be:	653b      	str	r3, [r7, #80]	@ 0x50
 80039c0:	4613      	mov	r3, r2
 80039c2:	eb42 0303 	adc.w	r3, r2, r3
 80039c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80039c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80039cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80039d0:	f7fc fe2a 	bl	8000628 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4b61      	ldr	r3, [pc, #388]	@ (8003b60 <UART_SetConfig+0x2d4>)
 80039da:	fba3 2302 	umull	r2, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	011c      	lsls	r4, r3, #4
 80039e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80039f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80039f4:	4642      	mov	r2, r8
 80039f6:	464b      	mov	r3, r9
 80039f8:	1891      	adds	r1, r2, r2
 80039fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80039fc:	415b      	adcs	r3, r3
 80039fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a04:	4641      	mov	r1, r8
 8003a06:	eb12 0a01 	adds.w	sl, r2, r1
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	eb43 0b01 	adc.w	fp, r3, r1
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a24:	4692      	mov	sl, r2
 8003a26:	469b      	mov	fp, r3
 8003a28:	4643      	mov	r3, r8
 8003a2a:	eb1a 0303 	adds.w	r3, sl, r3
 8003a2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a32:	464b      	mov	r3, r9
 8003a34:	eb4b 0303 	adc.w	r3, fp, r3
 8003a38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003a4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a50:	460b      	mov	r3, r1
 8003a52:	18db      	adds	r3, r3, r3
 8003a54:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a56:	4613      	mov	r3, r2
 8003a58:	eb42 0303 	adc.w	r3, r2, r3
 8003a5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003a62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003a66:	f7fc fddf 	bl	8000628 <__aeabi_uldivmod>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4611      	mov	r1, r2
 8003a70:	4b3b      	ldr	r3, [pc, #236]	@ (8003b60 <UART_SetConfig+0x2d4>)
 8003a72:	fba3 2301 	umull	r2, r3, r3, r1
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	2264      	movs	r2, #100	@ 0x64
 8003a7a:	fb02 f303 	mul.w	r3, r2, r3
 8003a7e:	1acb      	subs	r3, r1, r3
 8003a80:	00db      	lsls	r3, r3, #3
 8003a82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003a86:	4b36      	ldr	r3, [pc, #216]	@ (8003b60 <UART_SetConfig+0x2d4>)
 8003a88:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003a94:	441c      	add	r4, r3
 8003a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003aa0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003aa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003aa8:	4642      	mov	r2, r8
 8003aaa:	464b      	mov	r3, r9
 8003aac:	1891      	adds	r1, r2, r2
 8003aae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ab0:	415b      	adcs	r3, r3
 8003ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ab4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003ab8:	4641      	mov	r1, r8
 8003aba:	1851      	adds	r1, r2, r1
 8003abc:	6339      	str	r1, [r7, #48]	@ 0x30
 8003abe:	4649      	mov	r1, r9
 8003ac0:	414b      	adcs	r3, r1
 8003ac2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003ad0:	4659      	mov	r1, fp
 8003ad2:	00cb      	lsls	r3, r1, #3
 8003ad4:	4651      	mov	r1, sl
 8003ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ada:	4651      	mov	r1, sl
 8003adc:	00ca      	lsls	r2, r1, #3
 8003ade:	4610      	mov	r0, r2
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4642      	mov	r2, r8
 8003ae6:	189b      	adds	r3, r3, r2
 8003ae8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003aec:	464b      	mov	r3, r9
 8003aee:	460a      	mov	r2, r1
 8003af0:	eb42 0303 	adc.w	r3, r2, r3
 8003af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	18db      	adds	r3, r3, r3
 8003b10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b12:	4613      	mov	r3, r2
 8003b14:	eb42 0303 	adc.w	r3, r2, r3
 8003b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b22:	f7fc fd81 	bl	8000628 <__aeabi_uldivmod>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <UART_SetConfig+0x2d4>)
 8003b2c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b30:	095b      	lsrs	r3, r3, #5
 8003b32:	2164      	movs	r1, #100	@ 0x64
 8003b34:	fb01 f303 	mul.w	r3, r1, r3
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	3332      	adds	r3, #50	@ 0x32
 8003b3e:	4a08      	ldr	r2, [pc, #32]	@ (8003b60 <UART_SetConfig+0x2d4>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	f003 0207 	and.w	r2, r3, #7
 8003b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4422      	add	r2, r4
 8003b52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b54:	e106      	b.n	8003d64 <UART_SetConfig+0x4d8>
 8003b56:	bf00      	nop
 8003b58:	40011000 	.word	0x40011000
 8003b5c:	40011400 	.word	0x40011400
 8003b60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003b6e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003b72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003b76:	4642      	mov	r2, r8
 8003b78:	464b      	mov	r3, r9
 8003b7a:	1891      	adds	r1, r2, r2
 8003b7c:	6239      	str	r1, [r7, #32]
 8003b7e:	415b      	adcs	r3, r3
 8003b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b86:	4641      	mov	r1, r8
 8003b88:	1854      	adds	r4, r2, r1
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	eb43 0501 	adc.w	r5, r3, r1
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	00eb      	lsls	r3, r5, #3
 8003b9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b9e:	00e2      	lsls	r2, r4, #3
 8003ba0:	4614      	mov	r4, r2
 8003ba2:	461d      	mov	r5, r3
 8003ba4:	4643      	mov	r3, r8
 8003ba6:	18e3      	adds	r3, r4, r3
 8003ba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003bac:	464b      	mov	r3, r9
 8003bae:	eb45 0303 	adc.w	r3, r5, r3
 8003bb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003bc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	008b      	lsls	r3, r1, #2
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bdc:	4621      	mov	r1, r4
 8003bde:	008a      	lsls	r2, r1, #2
 8003be0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003be4:	f7fc fd20 	bl	8000628 <__aeabi_uldivmod>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4b60      	ldr	r3, [pc, #384]	@ (8003d70 <UART_SetConfig+0x4e4>)
 8003bee:	fba3 2302 	umull	r2, r3, r3, r2
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	011c      	lsls	r4, r3, #4
 8003bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c00:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c08:	4642      	mov	r2, r8
 8003c0a:	464b      	mov	r3, r9
 8003c0c:	1891      	adds	r1, r2, r2
 8003c0e:	61b9      	str	r1, [r7, #24]
 8003c10:	415b      	adcs	r3, r3
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c18:	4641      	mov	r1, r8
 8003c1a:	1851      	adds	r1, r2, r1
 8003c1c:	6139      	str	r1, [r7, #16]
 8003c1e:	4649      	mov	r1, r9
 8003c20:	414b      	adcs	r3, r1
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c30:	4659      	mov	r1, fp
 8003c32:	00cb      	lsls	r3, r1, #3
 8003c34:	4651      	mov	r1, sl
 8003c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	00ca      	lsls	r2, r1, #3
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4619      	mov	r1, r3
 8003c42:	4603      	mov	r3, r0
 8003c44:	4642      	mov	r2, r8
 8003c46:	189b      	adds	r3, r3, r2
 8003c48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	460a      	mov	r2, r1
 8003c50:	eb42 0303 	adc.w	r3, r2, r3
 8003c54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c62:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003c70:	4649      	mov	r1, r9
 8003c72:	008b      	lsls	r3, r1, #2
 8003c74:	4641      	mov	r1, r8
 8003c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c7a:	4641      	mov	r1, r8
 8003c7c:	008a      	lsls	r2, r1, #2
 8003c7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003c82:	f7fc fcd1 	bl	8000628 <__aeabi_uldivmod>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4b38      	ldr	r3, [pc, #224]	@ (8003d70 <UART_SetConfig+0x4e4>)
 8003c8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	2264      	movs	r2, #100	@ 0x64
 8003c96:	fb02 f303 	mul.w	r3, r2, r3
 8003c9a:	1acb      	subs	r3, r1, r3
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	3332      	adds	r3, #50	@ 0x32
 8003ca0:	4a33      	ldr	r2, [pc, #204]	@ (8003d70 <UART_SetConfig+0x4e4>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cac:	441c      	add	r4, r3
 8003cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cb6:	677a      	str	r2, [r7, #116]	@ 0x74
 8003cb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003cbc:	4642      	mov	r2, r8
 8003cbe:	464b      	mov	r3, r9
 8003cc0:	1891      	adds	r1, r2, r2
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	415b      	adcs	r3, r3
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ccc:	4641      	mov	r1, r8
 8003cce:	1851      	adds	r1, r2, r1
 8003cd0:	6039      	str	r1, [r7, #0]
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	414b      	adcs	r3, r1
 8003cd6:	607b      	str	r3, [r7, #4]
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ce4:	4659      	mov	r1, fp
 8003ce6:	00cb      	lsls	r3, r1, #3
 8003ce8:	4651      	mov	r1, sl
 8003cea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cee:	4651      	mov	r1, sl
 8003cf0:	00ca      	lsls	r2, r1, #3
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	4642      	mov	r2, r8
 8003cfa:	189b      	adds	r3, r3, r2
 8003cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cfe:	464b      	mov	r3, r9
 8003d00:	460a      	mov	r2, r1
 8003d02:	eb42 0303 	adc.w	r3, r2, r3
 8003d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d12:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d20:	4649      	mov	r1, r9
 8003d22:	008b      	lsls	r3, r1, #2
 8003d24:	4641      	mov	r1, r8
 8003d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d2a:	4641      	mov	r1, r8
 8003d2c:	008a      	lsls	r2, r1, #2
 8003d2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003d32:	f7fc fc79 	bl	8000628 <__aeabi_uldivmod>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <UART_SetConfig+0x4e4>)
 8003d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	2164      	movs	r1, #100	@ 0x64
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	3332      	adds	r3, #50	@ 0x32
 8003d4e:	4a08      	ldr	r2, [pc, #32]	@ (8003d70 <UART_SetConfig+0x4e4>)
 8003d50:	fba2 2303 	umull	r2, r3, r2, r3
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	f003 020f 	and.w	r2, r3, #15
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4422      	add	r2, r4
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d70:	51eb851f 	.word	0x51eb851f

08003d74 <__NVIC_SetPriority>:
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	6039      	str	r1, [r7, #0]
 8003d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	db0a      	blt.n	8003d9e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	490c      	ldr	r1, [pc, #48]	@ (8003dc0 <__NVIC_SetPriority+0x4c>)
 8003d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d92:	0112      	lsls	r2, r2, #4
 8003d94:	b2d2      	uxtb	r2, r2
 8003d96:	440b      	add	r3, r1
 8003d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003d9c:	e00a      	b.n	8003db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	4908      	ldr	r1, [pc, #32]	@ (8003dc4 <__NVIC_SetPriority+0x50>)
 8003da4:	79fb      	ldrb	r3, [r7, #7]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	3b04      	subs	r3, #4
 8003dac:	0112      	lsls	r2, r2, #4
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	440b      	add	r3, r1
 8003db2:	761a      	strb	r2, [r3, #24]
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	e000e100 	.word	0xe000e100
 8003dc4:	e000ed00 	.word	0xe000ed00

08003dc8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003dcc:	2100      	movs	r1, #0
 8003dce:	f06f 0004 	mvn.w	r0, #4
 8003dd2:	f7ff ffcf 	bl	8003d74 <__NVIC_SetPriority>
#endif
}
 8003dd6:	bf00      	nop
 8003dd8:	bd80      	pop	{r7, pc}
	...

08003ddc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003de2:	f3ef 8305 	mrs	r3, IPSR
 8003de6:	603b      	str	r3, [r7, #0]
  return(result);
 8003de8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003dee:	f06f 0305 	mvn.w	r3, #5
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	e00c      	b.n	8003e10 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003df6:	4b0a      	ldr	r3, [pc, #40]	@ (8003e20 <osKernelInitialize+0x44>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d105      	bne.n	8003e0a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003dfe:	4b08      	ldr	r3, [pc, #32]	@ (8003e20 <osKernelInitialize+0x44>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e04:	2300      	movs	r3, #0
 8003e06:	607b      	str	r3, [r7, #4]
 8003e08:	e002      	b.n	8003e10 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e10:	687b      	ldr	r3, [r7, #4]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000234 	.word	0x20000234

08003e24 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e2a:	f3ef 8305 	mrs	r3, IPSR
 8003e2e:	603b      	str	r3, [r7, #0]
  return(result);
 8003e30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003e36:	f06f 0305 	mvn.w	r3, #5
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	e010      	b.n	8003e60 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <osKernelStart+0x48>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d109      	bne.n	8003e5a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003e46:	f7ff ffbf 	bl	8003dc8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003e4a:	4b08      	ldr	r3, [pc, #32]	@ (8003e6c <osKernelStart+0x48>)
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003e50:	f001 f87a 	bl	8004f48 <vTaskStartScheduler>
      stat = osOK;
 8003e54:	2300      	movs	r3, #0
 8003e56:	607b      	str	r3, [r7, #4]
 8003e58:	e002      	b.n	8003e60 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e5e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e60:	687b      	ldr	r3, [r7, #4]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	20000234 	.word	0x20000234

08003e70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08e      	sub	sp, #56	@ 0x38
 8003e74:	af04      	add	r7, sp, #16
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e80:	f3ef 8305 	mrs	r3, IPSR
 8003e84:	617b      	str	r3, [r7, #20]
  return(result);
 8003e86:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d17e      	bne.n	8003f8a <osThreadNew+0x11a>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d07b      	beq.n	8003f8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003e92:	2380      	movs	r3, #128	@ 0x80
 8003e94:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003e96:	2318      	movs	r3, #24
 8003e98:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d045      	beq.n	8003f36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <osThreadNew+0x48>
        name = attr->name;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d008      	beq.n	8003ede <osThreadNew+0x6e>
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b38      	cmp	r3, #56	@ 0x38
 8003ed0:	d805      	bhi.n	8003ede <osThreadNew+0x6e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f003 0301 	and.w	r3, r3, #1
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <osThreadNew+0x72>
        return (NULL);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	e054      	b.n	8003f8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	089b      	lsrs	r3, r3, #2
 8003ef0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00e      	beq.n	8003f18 <osThreadNew+0xa8>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	2b5b      	cmp	r3, #91	@ 0x5b
 8003f00:	d90a      	bls.n	8003f18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d006      	beq.n	8003f18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <osThreadNew+0xa8>
        mem = 1;
 8003f12:	2301      	movs	r3, #1
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	e010      	b.n	8003f3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10c      	bne.n	8003f3a <osThreadNew+0xca>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d108      	bne.n	8003f3a <osThreadNew+0xca>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d104      	bne.n	8003f3a <osThreadNew+0xca>
          mem = 0;
 8003f30:	2300      	movs	r3, #0
 8003f32:	61bb      	str	r3, [r7, #24]
 8003f34:	e001      	b.n	8003f3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d110      	bne.n	8003f62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003f48:	9202      	str	r2, [sp, #8]
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fe1a 	bl	8004b90 <xTaskCreateStatic>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	613b      	str	r3, [r7, #16]
 8003f60:	e013      	b.n	8003f8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d110      	bne.n	8003f8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	f107 0310 	add.w	r3, r7, #16
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fe68 	bl	8004c50 <xTaskCreate>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d001      	beq.n	8003f8a <osThreadNew+0x11a>
            hTask = NULL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003f8a:	693b      	ldr	r3, [r7, #16]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3728      	adds	r7, #40	@ 0x28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f9c:	f3ef 8305 	mrs	r3, IPSR
 8003fa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fa2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <osDelay+0x1c>
    stat = osErrorISR;
 8003fa8:	f06f 0305 	mvn.w	r3, #5
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	e007      	b.n	8003fc0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 ff8e 	bl	8004edc <vTaskDelay>
    }
  }

  return (stat);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	4a07      	ldr	r2, [pc, #28]	@ (8003ff8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003fdc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4a06      	ldr	r2, [pc, #24]	@ (8003ffc <vApplicationGetIdleTaskMemory+0x30>)
 8003fe2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2280      	movs	r2, #128	@ 0x80
 8003fe8:	601a      	str	r2, [r3, #0]
}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	20000238 	.word	0x20000238
 8003ffc:	20000294 	.word	0x20000294

08004000 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	4a07      	ldr	r2, [pc, #28]	@ (800402c <vApplicationGetTimerTaskMemory+0x2c>)
 8004010:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4a06      	ldr	r2, [pc, #24]	@ (8004030 <vApplicationGetTimerTaskMemory+0x30>)
 8004016:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800401e:	601a      	str	r2, [r3, #0]
}
 8004020:	bf00      	nop
 8004022:	3714      	adds	r7, #20
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	20000494 	.word	0x20000494
 8004030:	200004f0 	.word	0x200004f0

08004034 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f103 0208 	add.w	r2, r3, #8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f103 0208 	add.w	r2, r3, #8
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f103 0208 	add.w	r2, r3, #8
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800408e:	b480      	push	{r7}
 8004090:	b085      	sub	sp, #20
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
 8004096:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80040d6:	b480      	push	{r7}
 80040d8:	b085      	sub	sp, #20
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	d103      	bne.n	80040f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	60fb      	str	r3, [r7, #12]
 80040f4:	e00c      	b.n	8004110 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3308      	adds	r3, #8
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	e002      	b.n	8004104 <vListInsert+0x2e>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68ba      	ldr	r2, [r7, #8]
 800410c:	429a      	cmp	r2, r3
 800410e:	d2f6      	bcs.n	80040fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	601a      	str	r2, [r3, #0]
}
 800413c:	bf00      	nop
 800413e:	3714      	adds	r7, #20
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6892      	ldr	r2, [r2, #8]
 800415e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6852      	ldr	r2, [r2, #4]
 8004168:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d103      	bne.n	800417c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689a      	ldr	r2, [r3, #8]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	1e5a      	subs	r2, r3, #1
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10b      	bne.n	80041c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	e7fd      	b.n	80041c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80041c8:	f002 f876 	bl	80062b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d4:	68f9      	ldr	r1, [r7, #12]
 80041d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80041d8:	fb01 f303 	mul.w	r3, r1, r3
 80041dc:	441a      	add	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2200      	movs	r2, #0
 80041e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f8:	3b01      	subs	r3, #1
 80041fa:	68f9      	ldr	r1, [r7, #12]
 80041fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	441a      	add	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	22ff      	movs	r2, #255	@ 0xff
 800420c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	22ff      	movs	r2, #255	@ 0xff
 8004214:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d114      	bne.n	8004248 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d01a      	beq.n	800425c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3310      	adds	r3, #16
 800422a:	4618      	mov	r0, r3
 800422c:	f001 f91a 	bl	8005464 <xTaskRemoveFromEventList>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d012      	beq.n	800425c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004236:	4b0d      	ldr	r3, [pc, #52]	@ (800426c <xQueueGenericReset+0xd0>)
 8004238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	e009      	b.n	800425c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3310      	adds	r3, #16
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fef1 	bl	8004034 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3324      	adds	r3, #36	@ 0x24
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff feec 	bl	8004034 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800425c:	f002 f85e 	bl	800631c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004260:	2301      	movs	r3, #1
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	e000ed04 	.word	0xe000ed04

08004270 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08e      	sub	sp, #56	@ 0x38
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10b      	bne.n	800429c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004296:	bf00      	nop
 8004298:	bf00      	nop
 800429a:	e7fd      	b.n	8004298 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10b      	bne.n	80042ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	e7fd      	b.n	80042b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <xQueueGenericCreateStatic+0x56>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <xQueueGenericCreateStatic+0x5a>
 80042c6:	2301      	movs	r3, #1
 80042c8:	e000      	b.n	80042cc <xQueueGenericCreateStatic+0x5c>
 80042ca:	2300      	movs	r3, #0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	623b      	str	r3, [r7, #32]
}
 80042e2:	bf00      	nop
 80042e4:	bf00      	nop
 80042e6:	e7fd      	b.n	80042e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d102      	bne.n	80042f4 <xQueueGenericCreateStatic+0x84>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <xQueueGenericCreateStatic+0x88>
 80042f4:	2301      	movs	r3, #1
 80042f6:	e000      	b.n	80042fa <xQueueGenericCreateStatic+0x8a>
 80042f8:	2300      	movs	r3, #0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10b      	bne.n	8004316 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80042fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004302:	f383 8811 	msr	BASEPRI, r3
 8004306:	f3bf 8f6f 	isb	sy
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	61fb      	str	r3, [r7, #28]
}
 8004310:	bf00      	nop
 8004312:	bf00      	nop
 8004314:	e7fd      	b.n	8004312 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004316:	2350      	movs	r3, #80	@ 0x50
 8004318:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b50      	cmp	r3, #80	@ 0x50
 800431e:	d00b      	beq.n	8004338 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	61bb      	str	r3, [r7, #24]
}
 8004332:	bf00      	nop
 8004334:	bf00      	nop
 8004336:	e7fd      	b.n	8004334 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004338:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800433e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00d      	beq.n	8004360 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800434c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	4613      	mov	r3, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	68b9      	ldr	r1, [r7, #8]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 f805 	bl	800436a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004362:	4618      	mov	r0, r3
 8004364:	3730      	adds	r7, #48	@ 0x30
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	607a      	str	r2, [r7, #4]
 8004376:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d103      	bne.n	8004386 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	e002      	b.n	800438c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	68ba      	ldr	r2, [r7, #8]
 8004396:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004398:	2101      	movs	r1, #1
 800439a:	69b8      	ldr	r0, [r7, #24]
 800439c:	f7ff fefe 	bl	800419c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	78fa      	ldrb	r2, [r7, #3]
 80043a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043a8:	bf00      	nop
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08e      	sub	sp, #56	@ 0x38
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043be:	2300      	movs	r3, #0
 80043c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80043c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10b      	bne.n	80043e4 <xQueueGenericSend+0x34>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	e7fd      	b.n	80043e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <xQueueGenericSend+0x42>
 80043ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <xQueueGenericSend+0x46>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <xQueueGenericSend+0x48>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <xQueueGenericSend+0x64>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	e7fd      	b.n	8004410 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d103      	bne.n	8004422 <xQueueGenericSend+0x72>
 800441a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <xQueueGenericSend+0x76>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <xQueueGenericSend+0x78>
 8004426:	2300      	movs	r3, #0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10b      	bne.n	8004444 <xQueueGenericSend+0x94>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	623b      	str	r3, [r7, #32]
}
 800443e:	bf00      	nop
 8004440:	bf00      	nop
 8004442:	e7fd      	b.n	8004440 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004444:	f001 f9ce 	bl	80057e4 <xTaskGetSchedulerState>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <xQueueGenericSend+0xa4>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <xQueueGenericSend+0xa8>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <xQueueGenericSend+0xaa>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <xQueueGenericSend+0xc6>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	61fb      	str	r3, [r7, #28]
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	e7fd      	b.n	8004472 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004476:	f001 ff1f 	bl	80062b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800447a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800447e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004482:	429a      	cmp	r2, r3
 8004484:	d302      	bcc.n	800448c <xQueueGenericSend+0xdc>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d129      	bne.n	80044e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004492:	f000 fa0f 	bl	80048b4 <prvCopyDataToQueue>
 8004496:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449c:	2b00      	cmp	r3, #0
 800449e:	d010      	beq.n	80044c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a2:	3324      	adds	r3, #36	@ 0x24
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 ffdd 	bl	8005464 <xTaskRemoveFromEventList>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d013      	beq.n	80044d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044b0:	4b3f      	ldr	r3, [pc, #252]	@ (80045b0 <xQueueGenericSend+0x200>)
 80044b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	f3bf 8f4f 	dsb	sy
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	e00a      	b.n	80044d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044c8:	4b39      	ldr	r3, [pc, #228]	@ (80045b0 <xQueueGenericSend+0x200>)
 80044ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044d8:	f001 ff20 	bl	800631c <vPortExitCritical>
				return pdPASS;
 80044dc:	2301      	movs	r3, #1
 80044de:	e063      	b.n	80045a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d103      	bne.n	80044ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044e6:	f001 ff19 	bl	800631c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	e05c      	b.n	80045a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d106      	bne.n	8004502 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044f4:	f107 0314 	add.w	r3, r7, #20
 80044f8:	4618      	mov	r0, r3
 80044fa:	f001 f817 	bl	800552c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044fe:	2301      	movs	r3, #1
 8004500:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004502:	f001 ff0b 	bl	800631c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004506:	f000 fd87 	bl	8005018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800450a:	f001 fed5 	bl	80062b8 <vPortEnterCritical>
 800450e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004510:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004514:	b25b      	sxtb	r3, r3
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451a:	d103      	bne.n	8004524 <xQueueGenericSend+0x174>
 800451c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800452a:	b25b      	sxtb	r3, r3
 800452c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004530:	d103      	bne.n	800453a <xQueueGenericSend+0x18a>
 8004532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800453a:	f001 feef 	bl	800631c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800453e:	1d3a      	adds	r2, r7, #4
 8004540:	f107 0314 	add.w	r3, r7, #20
 8004544:	4611      	mov	r1, r2
 8004546:	4618      	mov	r0, r3
 8004548:	f001 f806 	bl	8005558 <xTaskCheckForTimeOut>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d124      	bne.n	800459c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004552:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004554:	f000 faa6 	bl	8004aa4 <prvIsQueueFull>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d018      	beq.n	8004590 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800455e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004560:	3310      	adds	r3, #16
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	4611      	mov	r1, r2
 8004566:	4618      	mov	r0, r3
 8004568:	f000 ff2a 	bl	80053c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800456c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800456e:	f000 fa31 	bl	80049d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004572:	f000 fd5f 	bl	8005034 <xTaskResumeAll>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	f47f af7c 	bne.w	8004476 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800457e:	4b0c      	ldr	r3, [pc, #48]	@ (80045b0 <xQueueGenericSend+0x200>)
 8004580:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	f3bf 8f6f 	isb	sy
 800458e:	e772      	b.n	8004476 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004590:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004592:	f000 fa1f 	bl	80049d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004596:	f000 fd4d 	bl	8005034 <xTaskResumeAll>
 800459a:	e76c      	b.n	8004476 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800459c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800459e:	f000 fa19 	bl	80049d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045a2:	f000 fd47 	bl	8005034 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3738      	adds	r7, #56	@ 0x38
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	e000ed04 	.word	0xe000ed04

080045b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b090      	sub	sp, #64	@ 0x40
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80045c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10b      	bne.n	80045e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80045de:	bf00      	nop
 80045e0:	bf00      	nop
 80045e2:	e7fd      	b.n	80045e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d103      	bne.n	80045f2 <xQueueGenericSendFromISR+0x3e>
 80045ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d101      	bne.n	80045f6 <xQueueGenericSendFromISR+0x42>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e000      	b.n	80045f8 <xQueueGenericSendFromISR+0x44>
 80045f6:	2300      	movs	r3, #0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10b      	bne.n	8004614 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	e7fd      	b.n	8004610 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d103      	bne.n	8004622 <xQueueGenericSendFromISR+0x6e>
 800461a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800461e:	2b01      	cmp	r3, #1
 8004620:	d101      	bne.n	8004626 <xQueueGenericSendFromISR+0x72>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <xQueueGenericSendFromISR+0x74>
 8004626:	2300      	movs	r3, #0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800462c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	623b      	str	r3, [r7, #32]
}
 800463e:	bf00      	nop
 8004640:	bf00      	nop
 8004642:	e7fd      	b.n	8004640 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004644:	f001 ff18 	bl	8006478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004648:	f3ef 8211 	mrs	r2, BASEPRI
 800464c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	61fa      	str	r2, [r7, #28]
 800465e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004660:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004662:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004666:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800466a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466c:	429a      	cmp	r2, r3
 800466e:	d302      	bcc.n	8004676 <xQueueGenericSendFromISR+0xc2>
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d12f      	bne.n	80046d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004678:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800467c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004684:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	68b9      	ldr	r1, [r7, #8]
 800468a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800468c:	f000 f912 	bl	80048b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004690:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004698:	d112      	bne.n	80046c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800469a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d016      	beq.n	80046d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a4:	3324      	adds	r3, #36	@ 0x24
 80046a6:	4618      	mov	r0, r3
 80046a8:	f000 fedc 	bl	8005464 <xTaskRemoveFromEventList>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00e      	beq.n	80046d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00b      	beq.n	80046d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
 80046be:	e007      	b.n	80046d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80046c4:	3301      	adds	r3, #1
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	b25a      	sxtb	r2, r3
 80046ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80046d0:	2301      	movs	r3, #1
 80046d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80046d4:	e001      	b.n	80046da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046d6:	2300      	movs	r3, #0
 80046d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3740      	adds	r7, #64	@ 0x40
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08c      	sub	sp, #48	@ 0x30
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10b      	bne.n	8004722 <xQueueReceive+0x32>
	__asm volatile
 800470a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470e:	f383 8811 	msr	BASEPRI, r3
 8004712:	f3bf 8f6f 	isb	sy
 8004716:	f3bf 8f4f 	dsb	sy
 800471a:	623b      	str	r3, [r7, #32]
}
 800471c:	bf00      	nop
 800471e:	bf00      	nop
 8004720:	e7fd      	b.n	800471e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d103      	bne.n	8004730 <xQueueReceive+0x40>
 8004728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <xQueueReceive+0x44>
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <xQueueReceive+0x46>
 8004734:	2300      	movs	r3, #0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <xQueueReceive+0x62>
	__asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	61fb      	str	r3, [r7, #28]
}
 800474c:	bf00      	nop
 800474e:	bf00      	nop
 8004750:	e7fd      	b.n	800474e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004752:	f001 f847 	bl	80057e4 <xTaskGetSchedulerState>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d102      	bne.n	8004762 <xQueueReceive+0x72>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <xQueueReceive+0x76>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <xQueueReceive+0x78>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10b      	bne.n	8004784 <xQueueReceive+0x94>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	61bb      	str	r3, [r7, #24]
}
 800477e:	bf00      	nop
 8004780:	bf00      	nop
 8004782:	e7fd      	b.n	8004780 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004784:	f001 fd98 	bl	80062b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01f      	beq.n	80047d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004798:	f000 f8f6 	bl	8004988 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	1e5a      	subs	r2, r3, #1
 80047a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00f      	beq.n	80047cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ae:	3310      	adds	r3, #16
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fe57 	bl	8005464 <xTaskRemoveFromEventList>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d007      	beq.n	80047cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047bc:	4b3c      	ldr	r3, [pc, #240]	@ (80048b0 <xQueueReceive+0x1c0>)
 80047be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047cc:	f001 fda6 	bl	800631c <vPortExitCritical>
				return pdPASS;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e069      	b.n	80048a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d103      	bne.n	80047e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047da:	f001 fd9f 	bl	800631c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047de:	2300      	movs	r3, #0
 80047e0:	e062      	b.n	80048a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047e8:	f107 0310 	add.w	r3, r7, #16
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fe9d 	bl	800552c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047f2:	2301      	movs	r3, #1
 80047f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047f6:	f001 fd91 	bl	800631c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047fa:	f000 fc0d 	bl	8005018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047fe:	f001 fd5b 	bl	80062b8 <vPortEnterCritical>
 8004802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004804:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004808:	b25b      	sxtb	r3, r3
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d103      	bne.n	8004818 <xQueueReceive+0x128>
 8004810:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800481e:	b25b      	sxtb	r3, r3
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d103      	bne.n	800482e <xQueueReceive+0x13e>
 8004826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800482e:	f001 fd75 	bl	800631c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004832:	1d3a      	adds	r2, r7, #4
 8004834:	f107 0310 	add.w	r3, r7, #16
 8004838:	4611      	mov	r1, r2
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fe8c 	bl	8005558 <xTaskCheckForTimeOut>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d123      	bne.n	800488e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004846:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004848:	f000 f916 	bl	8004a78 <prvIsQueueEmpty>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d017      	beq.n	8004882 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004854:	3324      	adds	r3, #36	@ 0x24
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	4611      	mov	r1, r2
 800485a:	4618      	mov	r0, r3
 800485c:	f000 fdb0 	bl	80053c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004860:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004862:	f000 f8b7 	bl	80049d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004866:	f000 fbe5 	bl	8005034 <xTaskResumeAll>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d189      	bne.n	8004784 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004870:	4b0f      	ldr	r3, [pc, #60]	@ (80048b0 <xQueueReceive+0x1c0>)
 8004872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	e780      	b.n	8004784 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004882:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004884:	f000 f8a6 	bl	80049d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004888:	f000 fbd4 	bl	8005034 <xTaskResumeAll>
 800488c:	e77a      	b.n	8004784 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800488e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004890:	f000 f8a0 	bl	80049d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004894:	f000 fbce 	bl	8005034 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004898:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800489a:	f000 f8ed 	bl	8004a78 <prvIsQueueEmpty>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f43f af6f 	beq.w	8004784 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3730      	adds	r7, #48	@ 0x30
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048c0:	2300      	movs	r3, #0
 80048c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d10d      	bne.n	80048ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d14d      	bne.n	8004976 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 ff9e 	bl	8005820 <xTaskPriorityDisinherit>
 80048e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	609a      	str	r2, [r3, #8]
 80048ec:	e043      	b.n	8004976 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d119      	bne.n	8004928 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6858      	ldr	r0, [r3, #4]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fc:	461a      	mov	r2, r3
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	f002 f840 	bl	8006984 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	441a      	add	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	429a      	cmp	r2, r3
 800491c:	d32b      	bcc.n	8004976 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	605a      	str	r2, [r3, #4]
 8004926:	e026      	b.n	8004976 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	68d8      	ldr	r0, [r3, #12]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	461a      	mov	r2, r3
 8004932:	68b9      	ldr	r1, [r7, #8]
 8004934:	f002 f826 	bl	8006984 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68da      	ldr	r2, [r3, #12]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	425b      	negs	r3, r3
 8004942:	441a      	add	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d207      	bcs.n	8004964 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	425b      	negs	r3, r3
 800495e:	441a      	add	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d105      	bne.n	8004976 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	3b01      	subs	r3, #1
 8004974:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800497e:	697b      	ldr	r3, [r7, #20]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d018      	beq.n	80049cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	441a      	add	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d303      	bcc.n	80049bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68d9      	ldr	r1, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c4:	461a      	mov	r2, r3
 80049c6:	6838      	ldr	r0, [r7, #0]
 80049c8:	f001 ffdc 	bl	8006984 <memcpy>
	}
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049dc:	f001 fc6c 	bl	80062b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049e8:	e011      	b.n	8004a0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d012      	beq.n	8004a18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	3324      	adds	r3, #36	@ 0x24
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fd34 	bl	8005464 <xTaskRemoveFromEventList>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a02:	f000 fe0d 	bl	8005620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	3b01      	subs	r3, #1
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	dce9      	bgt.n	80049ea <prvUnlockQueue+0x16>
 8004a16:	e000      	b.n	8004a1a <prvUnlockQueue+0x46>
					break;
 8004a18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	22ff      	movs	r2, #255	@ 0xff
 8004a1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004a22:	f001 fc7b 	bl	800631c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a26:	f001 fc47 	bl	80062b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a32:	e011      	b.n	8004a58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d012      	beq.n	8004a62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3310      	adds	r3, #16
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fd0f 	bl	8005464 <xTaskRemoveFromEventList>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a4c:	f000 fde8 	bl	8005620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a50:	7bbb      	ldrb	r3, [r7, #14]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	dce9      	bgt.n	8004a34 <prvUnlockQueue+0x60>
 8004a60:	e000      	b.n	8004a64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	22ff      	movs	r2, #255	@ 0xff
 8004a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004a6c:	f001 fc56 	bl	800631c <vPortExitCritical>
}
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a80:	f001 fc1a 	bl	80062b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d102      	bne.n	8004a92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	e001      	b.n	8004a96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a96:	f001 fc41 	bl	800631c <vPortExitCritical>

	return xReturn;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004aac:	f001 fc04 	bl	80062b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d102      	bne.n	8004ac2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004abc:	2301      	movs	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e001      	b.n	8004ac6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ac6:	f001 fc29 	bl	800631c <vPortExitCritical>

	return xReturn;
 8004aca:	68fb      	ldr	r3, [r7, #12]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	e014      	b.n	8004b0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8004b24 <vQueueAddToRegistry+0x50>)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10b      	bne.n	8004b08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004af0:	490c      	ldr	r1, [pc, #48]	@ (8004b24 <vQueueAddToRegistry+0x50>)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004afa:	4a0a      	ldr	r2, [pc, #40]	@ (8004b24 <vQueueAddToRegistry+0x50>)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b06:	e006      	b.n	8004b16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b07      	cmp	r3, #7
 8004b12:	d9e7      	bls.n	8004ae4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	3714      	adds	r7, #20
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	200008f0 	.word	0x200008f0

08004b28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b38:	f001 fbbe 	bl	80062b8 <vPortEnterCritical>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b42:	b25b      	sxtb	r3, r3
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d103      	bne.n	8004b52 <vQueueWaitForMessageRestricted+0x2a>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b58:	b25b      	sxtb	r3, r3
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d103      	bne.n	8004b68 <vQueueWaitForMessageRestricted+0x40>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b68:	f001 fbd8 	bl	800631c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d106      	bne.n	8004b82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	3324      	adds	r3, #36	@ 0x24
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fc45 	bl	800540c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f7ff ff26 	bl	80049d4 <prvUnlockQueue>
	}
 8004b88:	bf00      	nop
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08e      	sub	sp, #56	@ 0x38
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <xTaskCreateStatic+0x2c>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	623b      	str	r3, [r7, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10b      	bne.n	8004bda <xTaskCreateStatic+0x4a>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	61fb      	str	r3, [r7, #28]
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop
 8004bd8:	e7fd      	b.n	8004bd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bda:	235c      	movs	r3, #92	@ 0x5c
 8004bdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2b5c      	cmp	r3, #92	@ 0x5c
 8004be2:	d00b      	beq.n	8004bfc <xTaskCreateStatic+0x6c>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	61bb      	str	r3, [r7, #24]
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	e7fd      	b.n	8004bf8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004bfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d01e      	beq.n	8004c42 <xTaskCreateStatic+0xb2>
 8004c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d01b      	beq.n	8004c42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	9303      	str	r3, [sp, #12]
 8004c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c22:	9302      	str	r3, [sp, #8]
 8004c24:	f107 0314 	add.w	r3, r7, #20
 8004c28:	9301      	str	r3, [sp, #4]
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f850 	bl	8004cda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c3c:	f000 f8de 	bl	8004dfc <prvAddNewTaskToReadyList>
 8004c40:	e001      	b.n	8004c46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c46:	697b      	ldr	r3, [r7, #20]
	}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3728      	adds	r7, #40	@ 0x28
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08c      	sub	sp, #48	@ 0x30
 8004c54:	af04      	add	r7, sp, #16
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	603b      	str	r3, [r7, #0]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c60:	88fb      	ldrh	r3, [r7, #6]
 8004c62:	009b      	lsls	r3, r3, #2
 8004c64:	4618      	mov	r0, r3
 8004c66:	f001 fc49 	bl	80064fc <pvPortMalloc>
 8004c6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00e      	beq.n	8004c90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c72:	205c      	movs	r0, #92	@ 0x5c
 8004c74:	f001 fc42 	bl	80064fc <pvPortMalloc>
 8004c78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c86:	e005      	b.n	8004c94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c88:	6978      	ldr	r0, [r7, #20]
 8004c8a:	f001 fd05 	bl	8006698 <vPortFree>
 8004c8e:	e001      	b.n	8004c94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d017      	beq.n	8004cca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	9303      	str	r3, [sp, #12]
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	9302      	str	r3, [sp, #8]
 8004cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cae:	9301      	str	r3, [sp, #4]
 8004cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68b9      	ldr	r1, [r7, #8]
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 f80e 	bl	8004cda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cbe:	69f8      	ldr	r0, [r7, #28]
 8004cc0:	f000 f89c 	bl	8004dfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	e002      	b.n	8004cd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cca:	f04f 33ff 	mov.w	r3, #4294967295
 8004cce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cd0:	69bb      	ldr	r3, [r7, #24]
	}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3720      	adds	r7, #32
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b088      	sub	sp, #32
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
 8004ce6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	21a5      	movs	r1, #165	@ 0xa5
 8004cf4:	f001 fe12 	bl	800691c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d02:	3b01      	subs	r3, #1
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4413      	add	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	f023 0307 	bic.w	r3, r3, #7
 8004d10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00b      	beq.n	8004d34 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d20:	f383 8811 	msr	BASEPRI, r3
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	617b      	str	r3, [r7, #20]
}
 8004d2e:	bf00      	nop
 8004d30:	bf00      	nop
 8004d32:	e7fd      	b.n	8004d30 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01f      	beq.n	8004d7a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	e012      	b.n	8004d66 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	7819      	ldrb	r1, [r3, #0]
 8004d48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3334      	adds	r3, #52	@ 0x34
 8004d50:	460a      	mov	r2, r1
 8004d52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d006      	beq.n	8004d6e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	3301      	adds	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	2b0f      	cmp	r3, #15
 8004d6a:	d9e9      	bls.n	8004d40 <prvInitialiseNewTask+0x66>
 8004d6c:	e000      	b.n	8004d70 <prvInitialiseNewTask+0x96>
			{
				break;
 8004d6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d78:	e003      	b.n	8004d82 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d84:	2b37      	cmp	r3, #55	@ 0x37
 8004d86:	d901      	bls.n	8004d8c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d88:	2337      	movs	r3, #55	@ 0x37
 8004d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d90:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d96:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da0:	3304      	adds	r3, #4
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff f966 	bl	8004074 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004daa:	3318      	adds	r3, #24
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff f961 	bl	8004074 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dc6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dca:	2200      	movs	r2, #0
 8004dcc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	68f9      	ldr	r1, [r7, #12]
 8004dda:	69b8      	ldr	r0, [r7, #24]
 8004ddc:	f001 f93e 	bl	800605c <pxPortInitialiseStack>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df2:	bf00      	nop
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e04:	f001 fa58 	bl	80062b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e08:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec0 <prvAddNewTaskToReadyList+0xc4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8004ec0 <prvAddNewTaskToReadyList+0xc4>)
 8004e10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e12:	4b2c      	ldr	r3, [pc, #176]	@ (8004ec4 <prvAddNewTaskToReadyList+0xc8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec4 <prvAddNewTaskToReadyList+0xc8>)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e20:	4b27      	ldr	r3, [pc, #156]	@ (8004ec0 <prvAddNewTaskToReadyList+0xc4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d110      	bne.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e28:	f000 fc1e 	bl	8005668 <prvInitialiseTaskLists>
 8004e2c:	e00d      	b.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e2e:	4b26      	ldr	r3, [pc, #152]	@ (8004ec8 <prvAddNewTaskToReadyList+0xcc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e36:	4b23      	ldr	r3, [pc, #140]	@ (8004ec4 <prvAddNewTaskToReadyList+0xc8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d802      	bhi.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e44:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec4 <prvAddNewTaskToReadyList+0xc8>)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e4a:	4b20      	ldr	r3, [pc, #128]	@ (8004ecc <prvAddNewTaskToReadyList+0xd0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	4a1e      	ldr	r2, [pc, #120]	@ (8004ecc <prvAddNewTaskToReadyList+0xd0>)
 8004e52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e54:	4b1d      	ldr	r3, [pc, #116]	@ (8004ecc <prvAddNewTaskToReadyList+0xd0>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e60:	4b1b      	ldr	r3, [pc, #108]	@ (8004ed0 <prvAddNewTaskToReadyList+0xd4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d903      	bls.n	8004e70 <prvAddNewTaskToReadyList+0x74>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	4a18      	ldr	r2, [pc, #96]	@ (8004ed0 <prvAddNewTaskToReadyList+0xd4>)
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4a15      	ldr	r2, [pc, #84]	@ (8004ed4 <prvAddNewTaskToReadyList+0xd8>)
 8004e7e:	441a      	add	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	4610      	mov	r0, r2
 8004e88:	f7ff f901 	bl	800408e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e8c:	f001 fa46 	bl	800631c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e90:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <prvAddNewTaskToReadyList+0xcc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00e      	beq.n	8004eb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e98:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec4 <prvAddNewTaskToReadyList+0xc8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d207      	bcs.n	8004eb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed8 <prvAddNewTaskToReadyList+0xdc>)
 8004ea8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20000e04 	.word	0x20000e04
 8004ec4:	20000930 	.word	0x20000930
 8004ec8:	20000e10 	.word	0x20000e10
 8004ecc:	20000e20 	.word	0x20000e20
 8004ed0:	20000e0c 	.word	0x20000e0c
 8004ed4:	20000934 	.word	0x20000934
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d018      	beq.n	8004f20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eee:	4b14      	ldr	r3, [pc, #80]	@ (8004f40 <vTaskDelay+0x64>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00b      	beq.n	8004f0e <vTaskDelay+0x32>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	60bb      	str	r3, [r7, #8]
}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	e7fd      	b.n	8004f0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f0e:	f000 f883 	bl	8005018 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f12:	2100      	movs	r1, #0
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fcf3 	bl	8005900 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f1a:	f000 f88b 	bl	8005034 <xTaskResumeAll>
 8004f1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d107      	bne.n	8004f36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004f26:	4b07      	ldr	r3, [pc, #28]	@ (8004f44 <vTaskDelay+0x68>)
 8004f28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f36:	bf00      	nop
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000e2c 	.word	0x20000e2c
 8004f44:	e000ed04 	.word	0xe000ed04

08004f48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	@ 0x28
 8004f4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f56:	463a      	mov	r2, r7
 8004f58:	1d39      	adds	r1, r7, #4
 8004f5a:	f107 0308 	add.w	r3, r7, #8
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff f834 	bl	8003fcc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	9202      	str	r2, [sp, #8]
 8004f6c:	9301      	str	r3, [sp, #4]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	9300      	str	r3, [sp, #0]
 8004f72:	2300      	movs	r3, #0
 8004f74:	460a      	mov	r2, r1
 8004f76:	4922      	ldr	r1, [pc, #136]	@ (8005000 <vTaskStartScheduler+0xb8>)
 8004f78:	4822      	ldr	r0, [pc, #136]	@ (8005004 <vTaskStartScheduler+0xbc>)
 8004f7a:	f7ff fe09 	bl	8004b90 <xTaskCreateStatic>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	4a21      	ldr	r2, [pc, #132]	@ (8005008 <vTaskStartScheduler+0xc0>)
 8004f82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f84:	4b20      	ldr	r3, [pc, #128]	@ (8005008 <vTaskStartScheduler+0xc0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	e001      	b.n	8004f96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d102      	bne.n	8004fa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f9c:	f000 fd04 	bl	80059a8 <xTimerCreateTimerTask>
 8004fa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d116      	bne.n	8004fd6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	613b      	str	r3, [r7, #16]
}
 8004fba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fbc:	4b13      	ldr	r3, [pc, #76]	@ (800500c <vTaskStartScheduler+0xc4>)
 8004fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004fc2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fc4:	4b12      	ldr	r3, [pc, #72]	@ (8005010 <vTaskStartScheduler+0xc8>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fca:	4b12      	ldr	r3, [pc, #72]	@ (8005014 <vTaskStartScheduler+0xcc>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fd0:	f001 f8ce 	bl	8006170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fd4:	e00f      	b.n	8004ff6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d10b      	bne.n	8004ff6 <vTaskStartScheduler+0xae>
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	60fb      	str	r3, [r7, #12]
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	e7fd      	b.n	8004ff2 <vTaskStartScheduler+0xaa>
}
 8004ff6:	bf00      	nop
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	08007260 	.word	0x08007260
 8005004:	08005639 	.word	0x08005639
 8005008:	20000e28 	.word	0x20000e28
 800500c:	20000e24 	.word	0x20000e24
 8005010:	20000e10 	.word	0x20000e10
 8005014:	20000e08 	.word	0x20000e08

08005018 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800501c:	4b04      	ldr	r3, [pc, #16]	@ (8005030 <vTaskSuspendAll+0x18>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3301      	adds	r3, #1
 8005022:	4a03      	ldr	r2, [pc, #12]	@ (8005030 <vTaskSuspendAll+0x18>)
 8005024:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005026:	bf00      	nop
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	20000e2c 	.word	0x20000e2c

08005034 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800503e:	2300      	movs	r3, #0
 8005040:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005042:	4b42      	ldr	r3, [pc, #264]	@ (800514c <xTaskResumeAll+0x118>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10b      	bne.n	8005062 <xTaskResumeAll+0x2e>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	603b      	str	r3, [r7, #0]
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	e7fd      	b.n	800505e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005062:	f001 f929 	bl	80062b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005066:	4b39      	ldr	r3, [pc, #228]	@ (800514c <xTaskResumeAll+0x118>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3b01      	subs	r3, #1
 800506c:	4a37      	ldr	r2, [pc, #220]	@ (800514c <xTaskResumeAll+0x118>)
 800506e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005070:	4b36      	ldr	r3, [pc, #216]	@ (800514c <xTaskResumeAll+0x118>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d162      	bne.n	800513e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005078:	4b35      	ldr	r3, [pc, #212]	@ (8005150 <xTaskResumeAll+0x11c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d05e      	beq.n	800513e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005080:	e02f      	b.n	80050e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005082:	4b34      	ldr	r3, [pc, #208]	@ (8005154 <xTaskResumeAll+0x120>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3318      	adds	r3, #24
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff f85a 	bl	8004148 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3304      	adds	r3, #4
 8005098:	4618      	mov	r0, r3
 800509a:	f7ff f855 	bl	8004148 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a2:	4b2d      	ldr	r3, [pc, #180]	@ (8005158 <xTaskResumeAll+0x124>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d903      	bls.n	80050b2 <xTaskResumeAll+0x7e>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ae:	4a2a      	ldr	r2, [pc, #168]	@ (8005158 <xTaskResumeAll+0x124>)
 80050b0:	6013      	str	r3, [r2, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4a27      	ldr	r2, [pc, #156]	@ (800515c <xTaskResumeAll+0x128>)
 80050c0:	441a      	add	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3304      	adds	r3, #4
 80050c6:	4619      	mov	r1, r3
 80050c8:	4610      	mov	r0, r2
 80050ca:	f7fe ffe0 	bl	800408e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050d2:	4b23      	ldr	r3, [pc, #140]	@ (8005160 <xTaskResumeAll+0x12c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d8:	429a      	cmp	r2, r3
 80050da:	d302      	bcc.n	80050e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80050dc:	4b21      	ldr	r3, [pc, #132]	@ (8005164 <xTaskResumeAll+0x130>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050e2:	4b1c      	ldr	r3, [pc, #112]	@ (8005154 <xTaskResumeAll+0x120>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1cb      	bne.n	8005082 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050f0:	f000 fb58 	bl	80057a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005168 <xTaskResumeAll+0x134>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d010      	beq.n	8005122 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005100:	f000 f846 	bl	8005190 <xTaskIncrementTick>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800510a:	4b16      	ldr	r3, [pc, #88]	@ (8005164 <xTaskResumeAll+0x130>)
 800510c:	2201      	movs	r2, #1
 800510e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	3b01      	subs	r3, #1
 8005114:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f1      	bne.n	8005100 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800511c:	4b12      	ldr	r3, [pc, #72]	@ (8005168 <xTaskResumeAll+0x134>)
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005122:	4b10      	ldr	r3, [pc, #64]	@ (8005164 <xTaskResumeAll+0x130>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d009      	beq.n	800513e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800512a:	2301      	movs	r3, #1
 800512c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800512e:	4b0f      	ldr	r3, [pc, #60]	@ (800516c <xTaskResumeAll+0x138>)
 8005130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800513e:	f001 f8ed 	bl	800631c <vPortExitCritical>

	return xAlreadyYielded;
 8005142:	68bb      	ldr	r3, [r7, #8]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000e2c 	.word	0x20000e2c
 8005150:	20000e04 	.word	0x20000e04
 8005154:	20000dc4 	.word	0x20000dc4
 8005158:	20000e0c 	.word	0x20000e0c
 800515c:	20000934 	.word	0x20000934
 8005160:	20000930 	.word	0x20000930
 8005164:	20000e18 	.word	0x20000e18
 8005168:	20000e14 	.word	0x20000e14
 800516c:	e000ed04 	.word	0xe000ed04

08005170 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005176:	4b05      	ldr	r3, [pc, #20]	@ (800518c <xTaskGetTickCount+0x1c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800517c:	687b      	ldr	r3, [r7, #4]
}
 800517e:	4618      	mov	r0, r3
 8005180:	370c      	adds	r7, #12
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	20000e08 	.word	0x20000e08

08005190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519a:	4b4f      	ldr	r3, [pc, #316]	@ (80052d8 <xTaskIncrementTick+0x148>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f040 8090 	bne.w	80052c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051a4:	4b4d      	ldr	r3, [pc, #308]	@ (80052dc <xTaskIncrementTick+0x14c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051ac:	4a4b      	ldr	r2, [pc, #300]	@ (80052dc <xTaskIncrementTick+0x14c>)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d121      	bne.n	80051fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80051b8:	4b49      	ldr	r3, [pc, #292]	@ (80052e0 <xTaskIncrementTick+0x150>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00b      	beq.n	80051da <xTaskIncrementTick+0x4a>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	603b      	str	r3, [r7, #0]
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	e7fd      	b.n	80051d6 <xTaskIncrementTick+0x46>
 80051da:	4b41      	ldr	r3, [pc, #260]	@ (80052e0 <xTaskIncrementTick+0x150>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	4b40      	ldr	r3, [pc, #256]	@ (80052e4 <xTaskIncrementTick+0x154>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a3e      	ldr	r2, [pc, #248]	@ (80052e0 <xTaskIncrementTick+0x150>)
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	4a3e      	ldr	r2, [pc, #248]	@ (80052e4 <xTaskIncrementTick+0x154>)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	4b3e      	ldr	r3, [pc, #248]	@ (80052e8 <xTaskIncrementTick+0x158>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	3301      	adds	r3, #1
 80051f4:	4a3c      	ldr	r2, [pc, #240]	@ (80052e8 <xTaskIncrementTick+0x158>)
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	f000 fad4 	bl	80057a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051fc:	4b3b      	ldr	r3, [pc, #236]	@ (80052ec <xTaskIncrementTick+0x15c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	429a      	cmp	r2, r3
 8005204:	d349      	bcc.n	800529a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005206:	4b36      	ldr	r3, [pc, #216]	@ (80052e0 <xTaskIncrementTick+0x150>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d104      	bne.n	800521a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005210:	4b36      	ldr	r3, [pc, #216]	@ (80052ec <xTaskIncrementTick+0x15c>)
 8005212:	f04f 32ff 	mov.w	r2, #4294967295
 8005216:	601a      	str	r2, [r3, #0]
					break;
 8005218:	e03f      	b.n	800529a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800521a:	4b31      	ldr	r3, [pc, #196]	@ (80052e0 <xTaskIncrementTick+0x150>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	429a      	cmp	r2, r3
 8005230:	d203      	bcs.n	800523a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005232:	4a2e      	ldr	r2, [pc, #184]	@ (80052ec <xTaskIncrementTick+0x15c>)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005238:	e02f      	b.n	800529a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	3304      	adds	r3, #4
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe ff82 	bl	8004148 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	3318      	adds	r3, #24
 8005250:	4618      	mov	r0, r3
 8005252:	f7fe ff79 	bl	8004148 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800525a:	4b25      	ldr	r3, [pc, #148]	@ (80052f0 <xTaskIncrementTick+0x160>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	429a      	cmp	r2, r3
 8005260:	d903      	bls.n	800526a <xTaskIncrementTick+0xda>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005266:	4a22      	ldr	r2, [pc, #136]	@ (80052f0 <xTaskIncrementTick+0x160>)
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4a1f      	ldr	r2, [pc, #124]	@ (80052f4 <xTaskIncrementTick+0x164>)
 8005278:	441a      	add	r2, r3
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	3304      	adds	r3, #4
 800527e:	4619      	mov	r1, r3
 8005280:	4610      	mov	r0, r2
 8005282:	f7fe ff04 	bl	800408e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800528a:	4b1b      	ldr	r3, [pc, #108]	@ (80052f8 <xTaskIncrementTick+0x168>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	429a      	cmp	r2, r3
 8005292:	d3b8      	bcc.n	8005206 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005294:	2301      	movs	r3, #1
 8005296:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005298:	e7b5      	b.n	8005206 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800529a:	4b17      	ldr	r3, [pc, #92]	@ (80052f8 <xTaskIncrementTick+0x168>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052a0:	4914      	ldr	r1, [pc, #80]	@ (80052f4 <xTaskIncrementTick+0x164>)
 80052a2:	4613      	mov	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	4413      	add	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	440b      	add	r3, r1
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d901      	bls.n	80052b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80052b2:	2301      	movs	r3, #1
 80052b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052b6:	4b11      	ldr	r3, [pc, #68]	@ (80052fc <xTaskIncrementTick+0x16c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80052be:	2301      	movs	r3, #1
 80052c0:	617b      	str	r3, [r7, #20]
 80052c2:	e004      	b.n	80052ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052c4:	4b0e      	ldr	r3, [pc, #56]	@ (8005300 <xTaskIncrementTick+0x170>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3301      	adds	r3, #1
 80052ca:	4a0d      	ldr	r2, [pc, #52]	@ (8005300 <xTaskIncrementTick+0x170>)
 80052cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052ce:	697b      	ldr	r3, [r7, #20]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3718      	adds	r7, #24
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000e2c 	.word	0x20000e2c
 80052dc:	20000e08 	.word	0x20000e08
 80052e0:	20000dbc 	.word	0x20000dbc
 80052e4:	20000dc0 	.word	0x20000dc0
 80052e8:	20000e1c 	.word	0x20000e1c
 80052ec:	20000e24 	.word	0x20000e24
 80052f0:	20000e0c 	.word	0x20000e0c
 80052f4:	20000934 	.word	0x20000934
 80052f8:	20000930 	.word	0x20000930
 80052fc:	20000e18 	.word	0x20000e18
 8005300:	20000e14 	.word	0x20000e14

08005304 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800530a:	4b28      	ldr	r3, [pc, #160]	@ (80053ac <vTaskSwitchContext+0xa8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005312:	4b27      	ldr	r3, [pc, #156]	@ (80053b0 <vTaskSwitchContext+0xac>)
 8005314:	2201      	movs	r2, #1
 8005316:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005318:	e042      	b.n	80053a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800531a:	4b25      	ldr	r3, [pc, #148]	@ (80053b0 <vTaskSwitchContext+0xac>)
 800531c:	2200      	movs	r2, #0
 800531e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005320:	4b24      	ldr	r3, [pc, #144]	@ (80053b4 <vTaskSwitchContext+0xb0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	e011      	b.n	800534c <vTaskSwitchContext+0x48>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <vTaskSwitchContext+0x42>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	607b      	str	r3, [r7, #4]
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	e7fd      	b.n	8005342 <vTaskSwitchContext+0x3e>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3b01      	subs	r3, #1
 800534a:	60fb      	str	r3, [r7, #12]
 800534c:	491a      	ldr	r1, [pc, #104]	@ (80053b8 <vTaskSwitchContext+0xb4>)
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d0e3      	beq.n	8005328 <vTaskSwitchContext+0x24>
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4a13      	ldr	r2, [pc, #76]	@ (80053b8 <vTaskSwitchContext+0xb4>)
 800536c:	4413      	add	r3, r2
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	3308      	adds	r3, #8
 8005382:	429a      	cmp	r2, r3
 8005384:	d104      	bne.n	8005390 <vTaskSwitchContext+0x8c>
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	605a      	str	r2, [r3, #4]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	4a09      	ldr	r2, [pc, #36]	@ (80053bc <vTaskSwitchContext+0xb8>)
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	4a06      	ldr	r2, [pc, #24]	@ (80053b4 <vTaskSwitchContext+0xb0>)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6013      	str	r3, [r2, #0]
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	20000e2c 	.word	0x20000e2c
 80053b0:	20000e18 	.word	0x20000e18
 80053b4:	20000e0c 	.word	0x20000e0c
 80053b8:	20000934 	.word	0x20000934
 80053bc:	20000930 	.word	0x20000930

080053c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d10b      	bne.n	80053e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	60fb      	str	r3, [r7, #12]
}
 80053e2:	bf00      	nop
 80053e4:	bf00      	nop
 80053e6:	e7fd      	b.n	80053e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053e8:	4b07      	ldr	r3, [pc, #28]	@ (8005408 <vTaskPlaceOnEventList+0x48>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3318      	adds	r3, #24
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fe fe70 	bl	80040d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053f6:	2101      	movs	r1, #1
 80053f8:	6838      	ldr	r0, [r7, #0]
 80053fa:	f000 fa81 	bl	8005900 <prvAddCurrentTaskToDelayedList>
}
 80053fe:	bf00      	nop
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000930 	.word	0x20000930

0800540c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	617b      	str	r3, [r7, #20]
}
 8005430:	bf00      	nop
 8005432:	bf00      	nop
 8005434:	e7fd      	b.n	8005432 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005436:	4b0a      	ldr	r3, [pc, #40]	@ (8005460 <vTaskPlaceOnEventListRestricted+0x54>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3318      	adds	r3, #24
 800543c:	4619      	mov	r1, r3
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f7fe fe25 	bl	800408e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800544a:	f04f 33ff 	mov.w	r3, #4294967295
 800544e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005450:	6879      	ldr	r1, [r7, #4]
 8005452:	68b8      	ldr	r0, [r7, #8]
 8005454:	f000 fa54 	bl	8005900 <prvAddCurrentTaskToDelayedList>
	}
 8005458:	bf00      	nop
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}
 8005460:	20000930 	.word	0x20000930

08005464 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	60fb      	str	r3, [r7, #12]
}
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	e7fd      	b.n	800548e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	3318      	adds	r3, #24
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe fe56 	bl	8004148 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800549c:	4b1d      	ldr	r3, [pc, #116]	@ (8005514 <xTaskRemoveFromEventList+0xb0>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d11d      	bne.n	80054e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4618      	mov	r0, r3
 80054aa:	f7fe fe4d 	bl	8004148 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054b2:	4b19      	ldr	r3, [pc, #100]	@ (8005518 <xTaskRemoveFromEventList+0xb4>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d903      	bls.n	80054c2 <xTaskRemoveFromEventList+0x5e>
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054be:	4a16      	ldr	r2, [pc, #88]	@ (8005518 <xTaskRemoveFromEventList+0xb4>)
 80054c0:	6013      	str	r3, [r2, #0]
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4a13      	ldr	r2, [pc, #76]	@ (800551c <xTaskRemoveFromEventList+0xb8>)
 80054d0:	441a      	add	r2, r3
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	3304      	adds	r3, #4
 80054d6:	4619      	mov	r1, r3
 80054d8:	4610      	mov	r0, r2
 80054da:	f7fe fdd8 	bl	800408e <vListInsertEnd>
 80054de:	e005      	b.n	80054ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	3318      	adds	r3, #24
 80054e4:	4619      	mov	r1, r3
 80054e6:	480e      	ldr	r0, [pc, #56]	@ (8005520 <xTaskRemoveFromEventList+0xbc>)
 80054e8:	f7fe fdd1 	bl	800408e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054f0:	4b0c      	ldr	r3, [pc, #48]	@ (8005524 <xTaskRemoveFromEventList+0xc0>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d905      	bls.n	8005506 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054fa:	2301      	movs	r3, #1
 80054fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005528 <xTaskRemoveFromEventList+0xc4>)
 8005500:	2201      	movs	r2, #1
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e001      	b.n	800550a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005506:	2300      	movs	r3, #0
 8005508:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800550a:	697b      	ldr	r3, [r7, #20]
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20000e2c 	.word	0x20000e2c
 8005518:	20000e0c 	.word	0x20000e0c
 800551c:	20000934 	.word	0x20000934
 8005520:	20000dc4 	.word	0x20000dc4
 8005524:	20000930 	.word	0x20000930
 8005528:	20000e18 	.word	0x20000e18

0800552c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005534:	4b06      	ldr	r3, [pc, #24]	@ (8005550 <vTaskInternalSetTimeOutState+0x24>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800553c:	4b05      	ldr	r3, [pc, #20]	@ (8005554 <vTaskInternalSetTimeOutState+0x28>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	605a      	str	r2, [r3, #4]
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr
 8005550:	20000e1c 	.word	0x20000e1c
 8005554:	20000e08 	.word	0x20000e08

08005558 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10b      	bne.n	8005580 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556c:	f383 8811 	msr	BASEPRI, r3
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	f3bf 8f4f 	dsb	sy
 8005578:	613b      	str	r3, [r7, #16]
}
 800557a:	bf00      	nop
 800557c:	bf00      	nop
 800557e:	e7fd      	b.n	800557c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10b      	bne.n	800559e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	60fb      	str	r3, [r7, #12]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800559e:	f000 fe8b 	bl	80062b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80055a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005618 <xTaskCheckForTimeOut+0xc0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ba:	d102      	bne.n	80055c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055bc:	2300      	movs	r3, #0
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	e023      	b.n	800560a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4b15      	ldr	r3, [pc, #84]	@ (800561c <xTaskCheckForTimeOut+0xc4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d007      	beq.n	80055de <xTaskCheckForTimeOut+0x86>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d302      	bcc.n	80055de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055d8:	2301      	movs	r3, #1
 80055da:	61fb      	str	r3, [r7, #28]
 80055dc:	e015      	b.n	800560a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d20b      	bcs.n	8005600 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff ff99 	bl	800552c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	e004      	b.n	800560a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005606:	2301      	movs	r3, #1
 8005608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800560a:	f000 fe87 	bl	800631c <vPortExitCritical>

	return xReturn;
 800560e:	69fb      	ldr	r3, [r7, #28]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3720      	adds	r7, #32
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	20000e08 	.word	0x20000e08
 800561c:	20000e1c 	.word	0x20000e1c

08005620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005624:	4b03      	ldr	r3, [pc, #12]	@ (8005634 <vTaskMissedYield+0x14>)
 8005626:	2201      	movs	r2, #1
 8005628:	601a      	str	r2, [r3, #0]
}
 800562a:	bf00      	nop
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr
 8005634:	20000e18 	.word	0x20000e18

08005638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005640:	f000 f852 	bl	80056e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005644:	4b06      	ldr	r3, [pc, #24]	@ (8005660 <prvIdleTask+0x28>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d9f9      	bls.n	8005640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800564c:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <prvIdleTask+0x2c>)
 800564e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005652:	601a      	str	r2, [r3, #0]
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800565c:	e7f0      	b.n	8005640 <prvIdleTask+0x8>
 800565e:	bf00      	nop
 8005660:	20000934 	.word	0x20000934
 8005664:	e000ed04 	.word	0xe000ed04

08005668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800566e:	2300      	movs	r3, #0
 8005670:	607b      	str	r3, [r7, #4]
 8005672:	e00c      	b.n	800568e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	4613      	mov	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	4a12      	ldr	r2, [pc, #72]	@ (80056c8 <prvInitialiseTaskLists+0x60>)
 8005680:	4413      	add	r3, r2
 8005682:	4618      	mov	r0, r3
 8005684:	f7fe fcd6 	bl	8004034 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3301      	adds	r3, #1
 800568c:	607b      	str	r3, [r7, #4]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b37      	cmp	r3, #55	@ 0x37
 8005692:	d9ef      	bls.n	8005674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005694:	480d      	ldr	r0, [pc, #52]	@ (80056cc <prvInitialiseTaskLists+0x64>)
 8005696:	f7fe fccd 	bl	8004034 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800569a:	480d      	ldr	r0, [pc, #52]	@ (80056d0 <prvInitialiseTaskLists+0x68>)
 800569c:	f7fe fcca 	bl	8004034 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80056a0:	480c      	ldr	r0, [pc, #48]	@ (80056d4 <prvInitialiseTaskLists+0x6c>)
 80056a2:	f7fe fcc7 	bl	8004034 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80056a6:	480c      	ldr	r0, [pc, #48]	@ (80056d8 <prvInitialiseTaskLists+0x70>)
 80056a8:	f7fe fcc4 	bl	8004034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80056ac:	480b      	ldr	r0, [pc, #44]	@ (80056dc <prvInitialiseTaskLists+0x74>)
 80056ae:	f7fe fcc1 	bl	8004034 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056b2:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <prvInitialiseTaskLists+0x78>)
 80056b4:	4a05      	ldr	r2, [pc, #20]	@ (80056cc <prvInitialiseTaskLists+0x64>)
 80056b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056b8:	4b0a      	ldr	r3, [pc, #40]	@ (80056e4 <prvInitialiseTaskLists+0x7c>)
 80056ba:	4a05      	ldr	r2, [pc, #20]	@ (80056d0 <prvInitialiseTaskLists+0x68>)
 80056bc:	601a      	str	r2, [r3, #0]
}
 80056be:	bf00      	nop
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000934 	.word	0x20000934
 80056cc:	20000d94 	.word	0x20000d94
 80056d0:	20000da8 	.word	0x20000da8
 80056d4:	20000dc4 	.word	0x20000dc4
 80056d8:	20000dd8 	.word	0x20000dd8
 80056dc:	20000df0 	.word	0x20000df0
 80056e0:	20000dbc 	.word	0x20000dbc
 80056e4:	20000dc0 	.word	0x20000dc0

080056e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056ee:	e019      	b.n	8005724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056f0:	f000 fde2 	bl	80062b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f4:	4b10      	ldr	r3, [pc, #64]	@ (8005738 <prvCheckTasksWaitingTermination+0x50>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe fd21 	bl	8004148 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005706:	4b0d      	ldr	r3, [pc, #52]	@ (800573c <prvCheckTasksWaitingTermination+0x54>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3b01      	subs	r3, #1
 800570c:	4a0b      	ldr	r2, [pc, #44]	@ (800573c <prvCheckTasksWaitingTermination+0x54>)
 800570e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005710:	4b0b      	ldr	r3, [pc, #44]	@ (8005740 <prvCheckTasksWaitingTermination+0x58>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3b01      	subs	r3, #1
 8005716:	4a0a      	ldr	r2, [pc, #40]	@ (8005740 <prvCheckTasksWaitingTermination+0x58>)
 8005718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800571a:	f000 fdff 	bl	800631c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f810 	bl	8005744 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005724:	4b06      	ldr	r3, [pc, #24]	@ (8005740 <prvCheckTasksWaitingTermination+0x58>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e1      	bne.n	80056f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000dd8 	.word	0x20000dd8
 800573c:	20000e04 	.word	0x20000e04
 8005740:	20000dec 	.word	0x20000dec

08005744 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005752:	2b00      	cmp	r3, #0
 8005754:	d108      	bne.n	8005768 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800575a:	4618      	mov	r0, r3
 800575c:	f000 ff9c 	bl	8006698 <vPortFree>
				vPortFree( pxTCB );
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 ff99 	bl	8006698 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005766:	e019      	b.n	800579c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800576e:	2b01      	cmp	r3, #1
 8005770:	d103      	bne.n	800577a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 ff90 	bl	8006698 <vPortFree>
	}
 8005778:	e010      	b.n	800579c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005780:	2b02      	cmp	r3, #2
 8005782:	d00b      	beq.n	800579c <prvDeleteTCB+0x58>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	60fb      	str	r3, [r7, #12]
}
 8005796:	bf00      	nop
 8005798:	bf00      	nop
 800579a:	e7fd      	b.n	8005798 <prvDeleteTCB+0x54>
	}
 800579c:	bf00      	nop
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057aa:	4b0c      	ldr	r3, [pc, #48]	@ (80057dc <prvResetNextTaskUnblockTime+0x38>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d104      	bne.n	80057be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057b4:	4b0a      	ldr	r3, [pc, #40]	@ (80057e0 <prvResetNextTaskUnblockTime+0x3c>)
 80057b6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057bc:	e008      	b.n	80057d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057be:	4b07      	ldr	r3, [pc, #28]	@ (80057dc <prvResetNextTaskUnblockTime+0x38>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	4a04      	ldr	r2, [pc, #16]	@ (80057e0 <prvResetNextTaskUnblockTime+0x3c>)
 80057ce:	6013      	str	r3, [r2, #0]
}
 80057d0:	bf00      	nop
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20000dbc 	.word	0x20000dbc
 80057e0:	20000e24 	.word	0x20000e24

080057e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005818 <xTaskGetSchedulerState+0x34>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d102      	bne.n	80057f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057f2:	2301      	movs	r3, #1
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	e008      	b.n	800580a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f8:	4b08      	ldr	r3, [pc, #32]	@ (800581c <xTaskGetSchedulerState+0x38>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005800:	2302      	movs	r3, #2
 8005802:	607b      	str	r3, [r7, #4]
 8005804:	e001      	b.n	800580a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800580a:	687b      	ldr	r3, [r7, #4]
	}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	20000e10 	.word	0x20000e10
 800581c:	20000e2c 	.word	0x20000e2c

08005820 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005820:	b580      	push	{r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800582c:	2300      	movs	r3, #0
 800582e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d058      	beq.n	80058e8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005836:	4b2f      	ldr	r3, [pc, #188]	@ (80058f4 <xTaskPriorityDisinherit+0xd4>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	429a      	cmp	r2, r3
 800583e:	d00b      	beq.n	8005858 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005844:	f383 8811 	msr	BASEPRI, r3
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	f3bf 8f4f 	dsb	sy
 8005850:	60fb      	str	r3, [r7, #12]
}
 8005852:	bf00      	nop
 8005854:	bf00      	nop
 8005856:	e7fd      	b.n	8005854 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10b      	bne.n	8005878 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60bb      	str	r3, [r7, #8]
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800587c:	1e5a      	subs	r2, r3, #1
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588a:	429a      	cmp	r2, r3
 800588c:	d02c      	beq.n	80058e8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005892:	2b00      	cmp	r3, #0
 8005894:	d128      	bne.n	80058e8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	3304      	adds	r3, #4
 800589a:	4618      	mov	r0, r3
 800589c:	f7fe fc54 	bl	8004148 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b8:	4b0f      	ldr	r3, [pc, #60]	@ (80058f8 <xTaskPriorityDisinherit+0xd8>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d903      	bls.n	80058c8 <xTaskPriorityDisinherit+0xa8>
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058c4:	4a0c      	ldr	r2, [pc, #48]	@ (80058f8 <xTaskPriorityDisinherit+0xd8>)
 80058c6:	6013      	str	r3, [r2, #0]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4a09      	ldr	r2, [pc, #36]	@ (80058fc <xTaskPriorityDisinherit+0xdc>)
 80058d6:	441a      	add	r2, r3
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	3304      	adds	r3, #4
 80058dc:	4619      	mov	r1, r3
 80058de:	4610      	mov	r0, r2
 80058e0:	f7fe fbd5 	bl	800408e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058e4:	2301      	movs	r3, #1
 80058e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058e8:	697b      	ldr	r3, [r7, #20]
	}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	20000930 	.word	0x20000930
 80058f8:	20000e0c 	.word	0x20000e0c
 80058fc:	20000934 	.word	0x20000934

08005900 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800590a:	4b21      	ldr	r3, [pc, #132]	@ (8005990 <prvAddCurrentTaskToDelayedList+0x90>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005910:	4b20      	ldr	r3, [pc, #128]	@ (8005994 <prvAddCurrentTaskToDelayedList+0x94>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	3304      	adds	r3, #4
 8005916:	4618      	mov	r0, r3
 8005918:	f7fe fc16 	bl	8004148 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005922:	d10a      	bne.n	800593a <prvAddCurrentTaskToDelayedList+0x3a>
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d007      	beq.n	800593a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800592a:	4b1a      	ldr	r3, [pc, #104]	@ (8005994 <prvAddCurrentTaskToDelayedList+0x94>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3304      	adds	r3, #4
 8005930:	4619      	mov	r1, r3
 8005932:	4819      	ldr	r0, [pc, #100]	@ (8005998 <prvAddCurrentTaskToDelayedList+0x98>)
 8005934:	f7fe fbab 	bl	800408e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005938:	e026      	b.n	8005988 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4413      	add	r3, r2
 8005940:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005942:	4b14      	ldr	r3, [pc, #80]	@ (8005994 <prvAddCurrentTaskToDelayedList+0x94>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68ba      	ldr	r2, [r7, #8]
 8005948:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	429a      	cmp	r2, r3
 8005950:	d209      	bcs.n	8005966 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005952:	4b12      	ldr	r3, [pc, #72]	@ (800599c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	4b0f      	ldr	r3, [pc, #60]	@ (8005994 <prvAddCurrentTaskToDelayedList+0x94>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	3304      	adds	r3, #4
 800595c:	4619      	mov	r1, r3
 800595e:	4610      	mov	r0, r2
 8005960:	f7fe fbb9 	bl	80040d6 <vListInsert>
}
 8005964:	e010      	b.n	8005988 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005966:	4b0e      	ldr	r3, [pc, #56]	@ (80059a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4b0a      	ldr	r3, [pc, #40]	@ (8005994 <prvAddCurrentTaskToDelayedList+0x94>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	3304      	adds	r3, #4
 8005970:	4619      	mov	r1, r3
 8005972:	4610      	mov	r0, r2
 8005974:	f7fe fbaf 	bl	80040d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005978:	4b0a      	ldr	r3, [pc, #40]	@ (80059a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	429a      	cmp	r2, r3
 8005980:	d202      	bcs.n	8005988 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005982:	4a08      	ldr	r2, [pc, #32]	@ (80059a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	6013      	str	r3, [r2, #0]
}
 8005988:	bf00      	nop
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	20000e08 	.word	0x20000e08
 8005994:	20000930 	.word	0x20000930
 8005998:	20000df0 	.word	0x20000df0
 800599c:	20000dc0 	.word	0x20000dc0
 80059a0:	20000dbc 	.word	0x20000dbc
 80059a4:	20000e24 	.word	0x20000e24

080059a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08a      	sub	sp, #40	@ 0x28
 80059ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80059b2:	f000 fb13 	bl	8005fdc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80059b6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a2c <xTimerCreateTimerTask+0x84>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d021      	beq.n	8005a02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80059be:	2300      	movs	r3, #0
 80059c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80059c6:	1d3a      	adds	r2, r7, #4
 80059c8:	f107 0108 	add.w	r1, r7, #8
 80059cc:	f107 030c 	add.w	r3, r7, #12
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fb15 	bl	8004000 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	9202      	str	r2, [sp, #8]
 80059de:	9301      	str	r3, [sp, #4]
 80059e0:	2302      	movs	r3, #2
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	2300      	movs	r3, #0
 80059e6:	460a      	mov	r2, r1
 80059e8:	4911      	ldr	r1, [pc, #68]	@ (8005a30 <xTimerCreateTimerTask+0x88>)
 80059ea:	4812      	ldr	r0, [pc, #72]	@ (8005a34 <xTimerCreateTimerTask+0x8c>)
 80059ec:	f7ff f8d0 	bl	8004b90 <xTaskCreateStatic>
 80059f0:	4603      	mov	r3, r0
 80059f2:	4a11      	ldr	r2, [pc, #68]	@ (8005a38 <xTimerCreateTimerTask+0x90>)
 80059f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80059f6:	4b10      	ldr	r3, [pc, #64]	@ (8005a38 <xTimerCreateTimerTask+0x90>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80059fe:	2301      	movs	r3, #1
 8005a00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	613b      	str	r3, [r7, #16]
}
 8005a1a:	bf00      	nop
 8005a1c:	bf00      	nop
 8005a1e:	e7fd      	b.n	8005a1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005a20:	697b      	ldr	r3, [r7, #20]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000e60 	.word	0x20000e60
 8005a30:	08007268 	.word	0x08007268
 8005a34:	08005b75 	.word	0x08005b75
 8005a38:	20000e64 	.word	0x20000e64

08005a3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	@ 0x28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
 8005a48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10b      	bne.n	8005a6c <xTimerGenericCommand+0x30>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	623b      	str	r3, [r7, #32]
}
 8005a66:	bf00      	nop
 8005a68:	bf00      	nop
 8005a6a:	e7fd      	b.n	8005a68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005a6c:	4b19      	ldr	r3, [pc, #100]	@ (8005ad4 <xTimerGenericCommand+0x98>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d02a      	beq.n	8005aca <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b05      	cmp	r3, #5
 8005a84:	dc18      	bgt.n	8005ab8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005a86:	f7ff fead 	bl	80057e4 <xTaskGetSchedulerState>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d109      	bne.n	8005aa4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005a90:	4b10      	ldr	r3, [pc, #64]	@ (8005ad4 <xTimerGenericCommand+0x98>)
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	f107 0110 	add.w	r1, r7, #16
 8005a98:	2300      	movs	r3, #0
 8005a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a9c:	f7fe fc88 	bl	80043b0 <xQueueGenericSend>
 8005aa0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005aa2:	e012      	b.n	8005aca <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8005ad4 <xTimerGenericCommand+0x98>)
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	f107 0110 	add.w	r1, r7, #16
 8005aac:	2300      	movs	r3, #0
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f7fe fc7e 	bl	80043b0 <xQueueGenericSend>
 8005ab4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005ab6:	e008      	b.n	8005aca <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005ab8:	4b06      	ldr	r3, [pc, #24]	@ (8005ad4 <xTimerGenericCommand+0x98>)
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	f107 0110 	add.w	r1, r7, #16
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	f7fe fd76 	bl	80045b4 <xQueueGenericSendFromISR>
 8005ac8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3728      	adds	r7, #40	@ 0x28
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000e60 	.word	0x20000e60

08005ad8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b088      	sub	sp, #32
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae2:	4b23      	ldr	r3, [pc, #140]	@ (8005b70 <prvProcessExpiredTimer+0x98>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	68db      	ldr	r3, [r3, #12]
 8005aea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe fb29 	bl	8004148 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d023      	beq.n	8005b4c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	18d1      	adds	r1, r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	6978      	ldr	r0, [r7, #20]
 8005b12:	f000 f8d5 	bl	8005cc0 <prvInsertTimerInActiveList>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d020      	beq.n	8005b5e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	2300      	movs	r3, #0
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	2100      	movs	r1, #0
 8005b26:	6978      	ldr	r0, [r7, #20]
 8005b28:	f7ff ff88 	bl	8005a3c <xTimerGenericCommand>
 8005b2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d114      	bne.n	8005b5e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b38:	f383 8811 	msr	BASEPRI, r3
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	f3bf 8f4f 	dsb	sy
 8005b44:	60fb      	str	r3, [r7, #12]
}
 8005b46:	bf00      	nop
 8005b48:	bf00      	nop
 8005b4a:	e7fd      	b.n	8005b48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b52:	f023 0301 	bic.w	r3, r3, #1
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	6978      	ldr	r0, [r7, #20]
 8005b64:	4798      	blx	r3
}
 8005b66:	bf00      	nop
 8005b68:	3718      	adds	r7, #24
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000e58 	.word	0x20000e58

08005b74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b7c:	f107 0308 	add.w	r3, r7, #8
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 f859 	bl	8005c38 <prvGetNextExpireTime>
 8005b86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 f805 	bl	8005b9c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005b92:	f000 f8d7 	bl	8005d44 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005b96:	bf00      	nop
 8005b98:	e7f0      	b.n	8005b7c <prvTimerTask+0x8>
	...

08005b9c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b084      	sub	sp, #16
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005ba6:	f7ff fa37 	bl	8005018 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005baa:	f107 0308 	add.w	r3, r7, #8
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 f866 	bl	8005c80 <prvSampleTimeNow>
 8005bb4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d130      	bne.n	8005c1e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10a      	bne.n	8005bd8 <prvProcessTimerOrBlockTask+0x3c>
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d806      	bhi.n	8005bd8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005bca:	f7ff fa33 	bl	8005034 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005bce:	68f9      	ldr	r1, [r7, #12]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7ff ff81 	bl	8005ad8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005bd6:	e024      	b.n	8005c22 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d008      	beq.n	8005bf0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005bde:	4b13      	ldr	r3, [pc, #76]	@ (8005c2c <prvProcessTimerOrBlockTask+0x90>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <prvProcessTimerOrBlockTask+0x50>
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <prvProcessTimerOrBlockTask+0x52>
 8005bec:	2300      	movs	r3, #0
 8005bee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8005c30 <prvProcessTimerOrBlockTask+0x94>)
 8005bf2:	6818      	ldr	r0, [r3, #0]
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	683a      	ldr	r2, [r7, #0]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	f7fe ff93 	bl	8004b28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005c02:	f7ff fa17 	bl	8005034 <xTaskResumeAll>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005c0c:	4b09      	ldr	r3, [pc, #36]	@ (8005c34 <prvProcessTimerOrBlockTask+0x98>)
 8005c0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	f3bf 8f6f 	isb	sy
}
 8005c1c:	e001      	b.n	8005c22 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005c1e:	f7ff fa09 	bl	8005034 <xTaskResumeAll>
}
 8005c22:	bf00      	nop
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000e5c 	.word	0x20000e5c
 8005c30:	20000e60 	.word	0x20000e60
 8005c34:	e000ed04 	.word	0xe000ed04

08005c38 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005c40:	4b0e      	ldr	r3, [pc, #56]	@ (8005c7c <prvGetNextExpireTime+0x44>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <prvGetNextExpireTime+0x16>
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	e000      	b.n	8005c50 <prvGetNextExpireTime+0x18>
 8005c4e:	2200      	movs	r2, #0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d105      	bne.n	8005c68 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c5c:	4b07      	ldr	r3, [pc, #28]	@ (8005c7c <prvGetNextExpireTime+0x44>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	e001      	b.n	8005c6c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	20000e58 	.word	0x20000e58

08005c80 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005c88:	f7ff fa72 	bl	8005170 <xTaskGetTickCount>
 8005c8c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005cbc <prvSampleTimeNow+0x3c>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d205      	bcs.n	8005ca4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005c98:	f000 f93a 	bl	8005f10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	e002      	b.n	8005caa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005caa:	4a04      	ldr	r2, [pc, #16]	@ (8005cbc <prvSampleTimeNow+0x3c>)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	20000e68 	.word	0x20000e68

08005cc0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d812      	bhi.n	8005d0c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	1ad2      	subs	r2, r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d302      	bcc.n	8005cfa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	e01b      	b.n	8005d32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005cfa:	4b10      	ldr	r3, [pc, #64]	@ (8005d3c <prvInsertTimerInActiveList+0x7c>)
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3304      	adds	r3, #4
 8005d02:	4619      	mov	r1, r3
 8005d04:	4610      	mov	r0, r2
 8005d06:	f7fe f9e6 	bl	80040d6 <vListInsert>
 8005d0a:	e012      	b.n	8005d32 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	d206      	bcs.n	8005d22 <prvInsertTimerInActiveList+0x62>
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d302      	bcc.n	8005d22 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	617b      	str	r3, [r7, #20]
 8005d20:	e007      	b.n	8005d32 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005d22:	4b07      	ldr	r3, [pc, #28]	@ (8005d40 <prvInsertTimerInActiveList+0x80>)
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	3304      	adds	r3, #4
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4610      	mov	r0, r2
 8005d2e:	f7fe f9d2 	bl	80040d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005d32:	697b      	ldr	r3, [r7, #20]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3718      	adds	r7, #24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	20000e5c 	.word	0x20000e5c
 8005d40:	20000e58 	.word	0x20000e58

08005d44 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08e      	sub	sp, #56	@ 0x38
 8005d48:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005d4a:	e0ce      	b.n	8005eea <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	da19      	bge.n	8005d86 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005d52:	1d3b      	adds	r3, r7, #4
 8005d54:	3304      	adds	r3, #4
 8005d56:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10b      	bne.n	8005d76 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d62:	f383 8811 	msr	BASEPRI, r3
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	61fb      	str	r3, [r7, #28]
}
 8005d70:	bf00      	nop
 8005d72:	bf00      	nop
 8005d74:	e7fd      	b.n	8005d72 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d7c:	6850      	ldr	r0, [r2, #4]
 8005d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d80:	6892      	ldr	r2, [r2, #8]
 8005d82:	4611      	mov	r1, r2
 8005d84:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f2c0 80ae 	blt.w	8005eea <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d004      	beq.n	8005da4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe f9d2 	bl	8004148 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005da4:	463b      	mov	r3, r7
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7ff ff6a 	bl	8005c80 <prvSampleTimeNow>
 8005dac:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2b09      	cmp	r3, #9
 8005db2:	f200 8097 	bhi.w	8005ee4 <prvProcessReceivedCommands+0x1a0>
 8005db6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dbc <prvProcessReceivedCommands+0x78>)
 8005db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005de5 	.word	0x08005de5
 8005dc4:	08005de5 	.word	0x08005de5
 8005dc8:	08005e5b 	.word	0x08005e5b
 8005dcc:	08005e6f 	.word	0x08005e6f
 8005dd0:	08005ebb 	.word	0x08005ebb
 8005dd4:	08005de5 	.word	0x08005de5
 8005dd8:	08005de5 	.word	0x08005de5
 8005ddc:	08005e5b 	.word	0x08005e5b
 8005de0:	08005e6f 	.word	0x08005e6f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dea:	f043 0301 	orr.w	r3, r3, #1
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005df6:	68ba      	ldr	r2, [r7, #8]
 8005df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	18d1      	adds	r1, r2, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e04:	f7ff ff5c 	bl	8005cc0 <prvInsertTimerInActiveList>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d06c      	beq.n	8005ee8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e14:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e1c:	f003 0304 	and.w	r3, r3, #4
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d061      	beq.n	8005ee8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	441a      	add	r2, r3
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9300      	str	r3, [sp, #0]
 8005e30:	2300      	movs	r3, #0
 8005e32:	2100      	movs	r1, #0
 8005e34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e36:	f7ff fe01 	bl	8005a3c <xTimerGenericCommand>
 8005e3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005e3c:	6a3b      	ldr	r3, [r7, #32]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d152      	bne.n	8005ee8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	61bb      	str	r3, [r7, #24]
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop
 8005e58:	e7fd      	b.n	8005e56 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005e6c:	e03d      	b.n	8005eea <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e74:	f043 0301 	orr.w	r3, r3, #1
 8005e78:	b2da      	uxtb	r2, r3
 8005e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e84:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10b      	bne.n	8005ea6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	617b      	str	r3, [r7, #20]
}
 8005ea0:	bf00      	nop
 8005ea2:	bf00      	nop
 8005ea4:	e7fd      	b.n	8005ea2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea8:	699a      	ldr	r2, [r3, #24]
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eac:	18d1      	adds	r1, r2, r3
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eb4:	f7ff ff04 	bl	8005cc0 <prvInsertTimerInActiveList>
					break;
 8005eb8:	e017      	b.n	8005eea <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005ec8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eca:	f000 fbe5 	bl	8006698 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ece:	e00c      	b.n	8005eea <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ede:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005ee2:	e002      	b.n	8005eea <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005ee4:	bf00      	nop
 8005ee6:	e000      	b.n	8005eea <prvProcessReceivedCommands+0x1a6>
					break;
 8005ee8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005eea:	4b08      	ldr	r3, [pc, #32]	@ (8005f0c <prvProcessReceivedCommands+0x1c8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	1d39      	adds	r1, r7, #4
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe fbfc 	bl	80046f0 <xQueueReceive>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f47f af26 	bne.w	8005d4c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005f00:	bf00      	nop
 8005f02:	bf00      	nop
 8005f04:	3730      	adds	r7, #48	@ 0x30
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	20000e60 	.word	0x20000e60

08005f10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f16:	e049      	b.n	8005fac <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f18:	4b2e      	ldr	r3, [pc, #184]	@ (8005fd4 <prvSwitchTimerLists+0xc4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f22:	4b2c      	ldr	r3, [pc, #176]	@ (8005fd4 <prvSwitchTimerLists+0xc4>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3304      	adds	r3, #4
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fe f909 	bl	8004148 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d02f      	beq.n	8005fac <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	699b      	ldr	r3, [r3, #24]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	4413      	add	r3, r2
 8005f54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d90e      	bls.n	8005f7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fd4 <prvSwitchTimerLists+0xc4>)
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	3304      	adds	r3, #4
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f7fe f8ae 	bl	80040d6 <vListInsert>
 8005f7a:	e017      	b.n	8005fac <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	2300      	movs	r3, #0
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	2100      	movs	r1, #0
 8005f86:	68f8      	ldr	r0, [r7, #12]
 8005f88:	f7ff fd58 	bl	8005a3c <xTimerGenericCommand>
 8005f8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10b      	bne.n	8005fac <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	603b      	str	r3, [r7, #0]
}
 8005fa6:	bf00      	nop
 8005fa8:	bf00      	nop
 8005faa:	e7fd      	b.n	8005fa8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fac:	4b09      	ldr	r3, [pc, #36]	@ (8005fd4 <prvSwitchTimerLists+0xc4>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1b0      	bne.n	8005f18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005fb6:	4b07      	ldr	r3, [pc, #28]	@ (8005fd4 <prvSwitchTimerLists+0xc4>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005fbc:	4b06      	ldr	r3, [pc, #24]	@ (8005fd8 <prvSwitchTimerLists+0xc8>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a04      	ldr	r2, [pc, #16]	@ (8005fd4 <prvSwitchTimerLists+0xc4>)
 8005fc2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005fc4:	4a04      	ldr	r2, [pc, #16]	@ (8005fd8 <prvSwitchTimerLists+0xc8>)
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	6013      	str	r3, [r2, #0]
}
 8005fca:	bf00      	nop
 8005fcc:	3718      	adds	r7, #24
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20000e58 	.word	0x20000e58
 8005fd8:	20000e5c 	.word	0x20000e5c

08005fdc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005fe2:	f000 f969 	bl	80062b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005fe6:	4b15      	ldr	r3, [pc, #84]	@ (800603c <prvCheckForValidListAndQueue+0x60>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d120      	bne.n	8006030 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005fee:	4814      	ldr	r0, [pc, #80]	@ (8006040 <prvCheckForValidListAndQueue+0x64>)
 8005ff0:	f7fe f820 	bl	8004034 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005ff4:	4813      	ldr	r0, [pc, #76]	@ (8006044 <prvCheckForValidListAndQueue+0x68>)
 8005ff6:	f7fe f81d 	bl	8004034 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005ffa:	4b13      	ldr	r3, [pc, #76]	@ (8006048 <prvCheckForValidListAndQueue+0x6c>)
 8005ffc:	4a10      	ldr	r2, [pc, #64]	@ (8006040 <prvCheckForValidListAndQueue+0x64>)
 8005ffe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006000:	4b12      	ldr	r3, [pc, #72]	@ (800604c <prvCheckForValidListAndQueue+0x70>)
 8006002:	4a10      	ldr	r2, [pc, #64]	@ (8006044 <prvCheckForValidListAndQueue+0x68>)
 8006004:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006006:	2300      	movs	r3, #0
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	4b11      	ldr	r3, [pc, #68]	@ (8006050 <prvCheckForValidListAndQueue+0x74>)
 800600c:	4a11      	ldr	r2, [pc, #68]	@ (8006054 <prvCheckForValidListAndQueue+0x78>)
 800600e:	2110      	movs	r1, #16
 8006010:	200a      	movs	r0, #10
 8006012:	f7fe f92d 	bl	8004270 <xQueueGenericCreateStatic>
 8006016:	4603      	mov	r3, r0
 8006018:	4a08      	ldr	r2, [pc, #32]	@ (800603c <prvCheckForValidListAndQueue+0x60>)
 800601a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800601c:	4b07      	ldr	r3, [pc, #28]	@ (800603c <prvCheckForValidListAndQueue+0x60>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006024:	4b05      	ldr	r3, [pc, #20]	@ (800603c <prvCheckForValidListAndQueue+0x60>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	490b      	ldr	r1, [pc, #44]	@ (8006058 <prvCheckForValidListAndQueue+0x7c>)
 800602a:	4618      	mov	r0, r3
 800602c:	f7fe fd52 	bl	8004ad4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006030:	f000 f974 	bl	800631c <vPortExitCritical>
}
 8006034:	bf00      	nop
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20000e60 	.word	0x20000e60
 8006040:	20000e30 	.word	0x20000e30
 8006044:	20000e44 	.word	0x20000e44
 8006048:	20000e58 	.word	0x20000e58
 800604c:	20000e5c 	.word	0x20000e5c
 8006050:	20000f0c 	.word	0x20000f0c
 8006054:	20000e6c 	.word	0x20000e6c
 8006058:	08007270 	.word	0x08007270

0800605c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3b04      	subs	r3, #4
 800606c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006074:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3b04      	subs	r3, #4
 800607a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	f023 0201 	bic.w	r2, r3, #1
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	3b04      	subs	r3, #4
 800608a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800608c:	4a0c      	ldr	r2, [pc, #48]	@ (80060c0 <pxPortInitialiseStack+0x64>)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3b14      	subs	r3, #20
 8006096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3b04      	subs	r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f06f 0202 	mvn.w	r2, #2
 80060aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3b20      	subs	r3, #32
 80060b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060b2:	68fb      	ldr	r3, [r7, #12]
}
 80060b4:	4618      	mov	r0, r3
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	080060c5 	.word	0x080060c5

080060c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80060ca:	2300      	movs	r3, #0
 80060cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060ce:	4b13      	ldr	r3, [pc, #76]	@ (800611c <prvTaskExitError+0x58>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d6:	d00b      	beq.n	80060f0 <prvTaskExitError+0x2c>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	60fb      	str	r3, [r7, #12]
}
 80060ea:	bf00      	nop
 80060ec:	bf00      	nop
 80060ee:	e7fd      	b.n	80060ec <prvTaskExitError+0x28>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	60bb      	str	r3, [r7, #8]
}
 8006102:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006104:	bf00      	nop
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d0fc      	beq.n	8006106 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800610c:	bf00      	nop
 800610e:	bf00      	nop
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	2000000c 	.word	0x2000000c

08006120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006120:	4b07      	ldr	r3, [pc, #28]	@ (8006140 <pxCurrentTCBConst2>)
 8006122:	6819      	ldr	r1, [r3, #0]
 8006124:	6808      	ldr	r0, [r1, #0]
 8006126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800612a:	f380 8809 	msr	PSP, r0
 800612e:	f3bf 8f6f 	isb	sy
 8006132:	f04f 0000 	mov.w	r0, #0
 8006136:	f380 8811 	msr	BASEPRI, r0
 800613a:	4770      	bx	lr
 800613c:	f3af 8000 	nop.w

08006140 <pxCurrentTCBConst2>:
 8006140:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop

08006148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006148:	4808      	ldr	r0, [pc, #32]	@ (800616c <prvPortStartFirstTask+0x24>)
 800614a:	6800      	ldr	r0, [r0, #0]
 800614c:	6800      	ldr	r0, [r0, #0]
 800614e:	f380 8808 	msr	MSP, r0
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f380 8814 	msr	CONTROL, r0
 800615a:	b662      	cpsie	i
 800615c:	b661      	cpsie	f
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	df00      	svc	0
 8006168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800616a:	bf00      	nop
 800616c:	e000ed08 	.word	0xe000ed08

08006170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006176:	4b47      	ldr	r3, [pc, #284]	@ (8006294 <xPortStartScheduler+0x124>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a47      	ldr	r2, [pc, #284]	@ (8006298 <xPortStartScheduler+0x128>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d10b      	bne.n	8006198 <xPortStartScheduler+0x28>
	__asm volatile
 8006180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006184:	f383 8811 	msr	BASEPRI, r3
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	f3bf 8f4f 	dsb	sy
 8006190:	60fb      	str	r3, [r7, #12]
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006198:	4b3e      	ldr	r3, [pc, #248]	@ (8006294 <xPortStartScheduler+0x124>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a3f      	ldr	r2, [pc, #252]	@ (800629c <xPortStartScheduler+0x12c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d10b      	bne.n	80061ba <xPortStartScheduler+0x4a>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	613b      	str	r3, [r7, #16]
}
 80061b4:	bf00      	nop
 80061b6:	bf00      	nop
 80061b8:	e7fd      	b.n	80061b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061ba:	4b39      	ldr	r3, [pc, #228]	@ (80062a0 <xPortStartScheduler+0x130>)
 80061bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	22ff      	movs	r2, #255	@ 0xff
 80061ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061d4:	78fb      	ldrb	r3, [r7, #3]
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	4b31      	ldr	r3, [pc, #196]	@ (80062a4 <xPortStartScheduler+0x134>)
 80061e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061e2:	4b31      	ldr	r3, [pc, #196]	@ (80062a8 <xPortStartScheduler+0x138>)
 80061e4:	2207      	movs	r2, #7
 80061e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061e8:	e009      	b.n	80061fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80061ea:	4b2f      	ldr	r3, [pc, #188]	@ (80062a8 <xPortStartScheduler+0x138>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	4a2d      	ldr	r2, [pc, #180]	@ (80062a8 <xPortStartScheduler+0x138>)
 80061f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	b2db      	uxtb	r3, r3
 80061fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006206:	2b80      	cmp	r3, #128	@ 0x80
 8006208:	d0ef      	beq.n	80061ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800620a:	4b27      	ldr	r3, [pc, #156]	@ (80062a8 <xPortStartScheduler+0x138>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1c3 0307 	rsb	r3, r3, #7
 8006212:	2b04      	cmp	r3, #4
 8006214:	d00b      	beq.n	800622e <xPortStartScheduler+0xbe>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	60bb      	str	r3, [r7, #8]
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	e7fd      	b.n	800622a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800622e:	4b1e      	ldr	r3, [pc, #120]	@ (80062a8 <xPortStartScheduler+0x138>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	4a1c      	ldr	r2, [pc, #112]	@ (80062a8 <xPortStartScheduler+0x138>)
 8006236:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006238:	4b1b      	ldr	r3, [pc, #108]	@ (80062a8 <xPortStartScheduler+0x138>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006240:	4a19      	ldr	r2, [pc, #100]	@ (80062a8 <xPortStartScheduler+0x138>)
 8006242:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	b2da      	uxtb	r2, r3
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800624c:	4b17      	ldr	r3, [pc, #92]	@ (80062ac <xPortStartScheduler+0x13c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a16      	ldr	r2, [pc, #88]	@ (80062ac <xPortStartScheduler+0x13c>)
 8006252:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006256:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006258:	4b14      	ldr	r3, [pc, #80]	@ (80062ac <xPortStartScheduler+0x13c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a13      	ldr	r2, [pc, #76]	@ (80062ac <xPortStartScheduler+0x13c>)
 800625e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006262:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006264:	f000 f8da 	bl	800641c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006268:	4b11      	ldr	r3, [pc, #68]	@ (80062b0 <xPortStartScheduler+0x140>)
 800626a:	2200      	movs	r2, #0
 800626c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800626e:	f000 f8f9 	bl	8006464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006272:	4b10      	ldr	r3, [pc, #64]	@ (80062b4 <xPortStartScheduler+0x144>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a0f      	ldr	r2, [pc, #60]	@ (80062b4 <xPortStartScheduler+0x144>)
 8006278:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800627c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800627e:	f7ff ff63 	bl	8006148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006282:	f7ff f83f 	bl	8005304 <vTaskSwitchContext>
	prvTaskExitError();
 8006286:	f7ff ff1d 	bl	80060c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	e000ed00 	.word	0xe000ed00
 8006298:	410fc271 	.word	0x410fc271
 800629c:	410fc270 	.word	0x410fc270
 80062a0:	e000e400 	.word	0xe000e400
 80062a4:	20000f5c 	.word	0x20000f5c
 80062a8:	20000f60 	.word	0x20000f60
 80062ac:	e000ed20 	.word	0xe000ed20
 80062b0:	2000000c 	.word	0x2000000c
 80062b4:	e000ef34 	.word	0xe000ef34

080062b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	607b      	str	r3, [r7, #4]
}
 80062d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062d2:	4b10      	ldr	r3, [pc, #64]	@ (8006314 <vPortEnterCritical+0x5c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	3301      	adds	r3, #1
 80062d8:	4a0e      	ldr	r2, [pc, #56]	@ (8006314 <vPortEnterCritical+0x5c>)
 80062da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006314 <vPortEnterCritical+0x5c>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d110      	bne.n	8006306 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062e4:	4b0c      	ldr	r3, [pc, #48]	@ (8006318 <vPortEnterCritical+0x60>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <vPortEnterCritical+0x4e>
	__asm volatile
 80062ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f2:	f383 8811 	msr	BASEPRI, r3
 80062f6:	f3bf 8f6f 	isb	sy
 80062fa:	f3bf 8f4f 	dsb	sy
 80062fe:	603b      	str	r3, [r7, #0]
}
 8006300:	bf00      	nop
 8006302:	bf00      	nop
 8006304:	e7fd      	b.n	8006302 <vPortEnterCritical+0x4a>
	}
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr
 8006312:	bf00      	nop
 8006314:	2000000c 	.word	0x2000000c
 8006318:	e000ed04 	.word	0xe000ed04

0800631c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006322:	4b12      	ldr	r3, [pc, #72]	@ (800636c <vPortExitCritical+0x50>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <vPortExitCritical+0x26>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	607b      	str	r3, [r7, #4]
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	e7fd      	b.n	800633e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006342:	4b0a      	ldr	r3, [pc, #40]	@ (800636c <vPortExitCritical+0x50>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3b01      	subs	r3, #1
 8006348:	4a08      	ldr	r2, [pc, #32]	@ (800636c <vPortExitCritical+0x50>)
 800634a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800634c:	4b07      	ldr	r3, [pc, #28]	@ (800636c <vPortExitCritical+0x50>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d105      	bne.n	8006360 <vPortExitCritical+0x44>
 8006354:	2300      	movs	r3, #0
 8006356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	f383 8811 	msr	BASEPRI, r3
}
 800635e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	2000000c 	.word	0x2000000c

08006370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006370:	f3ef 8009 	mrs	r0, PSP
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	4b15      	ldr	r3, [pc, #84]	@ (80063d0 <pxCurrentTCBConst>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	f01e 0f10 	tst.w	lr, #16
 8006380:	bf08      	it	eq
 8006382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800638a:	6010      	str	r0, [r2, #0]
 800638c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006390:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006394:	f380 8811 	msr	BASEPRI, r0
 8006398:	f3bf 8f4f 	dsb	sy
 800639c:	f3bf 8f6f 	isb	sy
 80063a0:	f7fe ffb0 	bl	8005304 <vTaskSwitchContext>
 80063a4:	f04f 0000 	mov.w	r0, #0
 80063a8:	f380 8811 	msr	BASEPRI, r0
 80063ac:	bc09      	pop	{r0, r3}
 80063ae:	6819      	ldr	r1, [r3, #0]
 80063b0:	6808      	ldr	r0, [r1, #0]
 80063b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b6:	f01e 0f10 	tst.w	lr, #16
 80063ba:	bf08      	it	eq
 80063bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80063c0:	f380 8809 	msr	PSP, r0
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	4770      	bx	lr
 80063ca:	bf00      	nop
 80063cc:	f3af 8000 	nop.w

080063d0 <pxCurrentTCBConst>:
 80063d0:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop

080063d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063f2:	f7fe fecd 	bl	8005190 <xTaskIncrementTick>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063fc:	4b06      	ldr	r3, [pc, #24]	@ (8006418 <xPortSysTickHandler+0x40>)
 80063fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	2300      	movs	r3, #0
 8006406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f383 8811 	msr	BASEPRI, r3
}
 800640e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006410:	bf00      	nop
 8006412:	3708      	adds	r7, #8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	e000ed04 	.word	0xe000ed04

0800641c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006420:	4b0b      	ldr	r3, [pc, #44]	@ (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006426:	4b0b      	ldr	r3, [pc, #44]	@ (8006454 <vPortSetupTimerInterrupt+0x38>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800642c:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <vPortSetupTimerInterrupt+0x3c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a0a      	ldr	r2, [pc, #40]	@ (800645c <vPortSetupTimerInterrupt+0x40>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	099b      	lsrs	r3, r3, #6
 8006438:	4a09      	ldr	r2, [pc, #36]	@ (8006460 <vPortSetupTimerInterrupt+0x44>)
 800643a:	3b01      	subs	r3, #1
 800643c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800643e:	4b04      	ldr	r3, [pc, #16]	@ (8006450 <vPortSetupTimerInterrupt+0x34>)
 8006440:	2207      	movs	r2, #7
 8006442:	601a      	str	r2, [r3, #0]
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	e000e010 	.word	0xe000e010
 8006454:	e000e018 	.word	0xe000e018
 8006458:	20000000 	.word	0x20000000
 800645c:	10624dd3 	.word	0x10624dd3
 8006460:	e000e014 	.word	0xe000e014

08006464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006464:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006474 <vPortEnableVFP+0x10>
 8006468:	6801      	ldr	r1, [r0, #0]
 800646a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800646e:	6001      	str	r1, [r0, #0]
 8006470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006472:	bf00      	nop
 8006474:	e000ed88 	.word	0xe000ed88

08006478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800647e:	f3ef 8305 	mrs	r3, IPSR
 8006482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2b0f      	cmp	r3, #15
 8006488:	d915      	bls.n	80064b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800648a:	4a18      	ldr	r2, [pc, #96]	@ (80064ec <vPortValidateInterruptPriority+0x74>)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006494:	4b16      	ldr	r3, [pc, #88]	@ (80064f0 <vPortValidateInterruptPriority+0x78>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	7afa      	ldrb	r2, [r7, #11]
 800649a:	429a      	cmp	r2, r3
 800649c:	d20b      	bcs.n	80064b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	607b      	str	r3, [r7, #4]
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	e7fd      	b.n	80064b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064b6:	4b0f      	ldr	r3, [pc, #60]	@ (80064f4 <vPortValidateInterruptPriority+0x7c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80064be:	4b0e      	ldr	r3, [pc, #56]	@ (80064f8 <vPortValidateInterruptPriority+0x80>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d90b      	bls.n	80064de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	603b      	str	r3, [r7, #0]
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	e7fd      	b.n	80064da <vPortValidateInterruptPriority+0x62>
	}
 80064de:	bf00      	nop
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop
 80064ec:	e000e3f0 	.word	0xe000e3f0
 80064f0:	20000f5c 	.word	0x20000f5c
 80064f4:	e000ed0c 	.word	0xe000ed0c
 80064f8:	20000f60 	.word	0x20000f60

080064fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b08a      	sub	sp, #40	@ 0x28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006504:	2300      	movs	r3, #0
 8006506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006508:	f7fe fd86 	bl	8005018 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800650c:	4b5c      	ldr	r3, [pc, #368]	@ (8006680 <pvPortMalloc+0x184>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006514:	f000 f924 	bl	8006760 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006518:	4b5a      	ldr	r3, [pc, #360]	@ (8006684 <pvPortMalloc+0x188>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4013      	ands	r3, r2
 8006520:	2b00      	cmp	r3, #0
 8006522:	f040 8095 	bne.w	8006650 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d01e      	beq.n	800656a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800652c:	2208      	movs	r2, #8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4413      	add	r3, r2
 8006532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f003 0307 	and.w	r3, r3, #7
 800653a:	2b00      	cmp	r3, #0
 800653c:	d015      	beq.n	800656a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f023 0307 	bic.w	r3, r3, #7
 8006544:	3308      	adds	r3, #8
 8006546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00b      	beq.n	800656a <pvPortMalloc+0x6e>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	617b      	str	r3, [r7, #20]
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop
 8006568:	e7fd      	b.n	8006566 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d06f      	beq.n	8006650 <pvPortMalloc+0x154>
 8006570:	4b45      	ldr	r3, [pc, #276]	@ (8006688 <pvPortMalloc+0x18c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d86a      	bhi.n	8006650 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800657a:	4b44      	ldr	r3, [pc, #272]	@ (800668c <pvPortMalloc+0x190>)
 800657c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800657e:	4b43      	ldr	r3, [pc, #268]	@ (800668c <pvPortMalloc+0x190>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006584:	e004      	b.n	8006590 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006588:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	429a      	cmp	r2, r3
 8006598:	d903      	bls.n	80065a2 <pvPortMalloc+0xa6>
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1f1      	bne.n	8006586 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065a2:	4b37      	ldr	r3, [pc, #220]	@ (8006680 <pvPortMalloc+0x184>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d051      	beq.n	8006650 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2208      	movs	r2, #8
 80065b2:	4413      	add	r3, r2
 80065b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	1ad2      	subs	r2, r2, r3
 80065c6:	2308      	movs	r3, #8
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d920      	bls.n	8006610 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4413      	add	r3, r2
 80065d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065d6:	69bb      	ldr	r3, [r7, #24]
 80065d8:	f003 0307 	and.w	r3, r3, #7
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00b      	beq.n	80065f8 <pvPortMalloc+0xfc>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	613b      	str	r3, [r7, #16]
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	e7fd      	b.n	80065f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	1ad2      	subs	r2, r2, r3
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800660a:	69b8      	ldr	r0, [r7, #24]
 800660c:	f000 f90a 	bl	8006824 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006610:	4b1d      	ldr	r3, [pc, #116]	@ (8006688 <pvPortMalloc+0x18c>)
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	4a1b      	ldr	r2, [pc, #108]	@ (8006688 <pvPortMalloc+0x18c>)
 800661c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800661e:	4b1a      	ldr	r3, [pc, #104]	@ (8006688 <pvPortMalloc+0x18c>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	4b1b      	ldr	r3, [pc, #108]	@ (8006690 <pvPortMalloc+0x194>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	429a      	cmp	r2, r3
 8006628:	d203      	bcs.n	8006632 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800662a:	4b17      	ldr	r3, [pc, #92]	@ (8006688 <pvPortMalloc+0x18c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a18      	ldr	r2, [pc, #96]	@ (8006690 <pvPortMalloc+0x194>)
 8006630:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4b13      	ldr	r3, [pc, #76]	@ (8006684 <pvPortMalloc+0x188>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	431a      	orrs	r2, r3
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006646:	4b13      	ldr	r3, [pc, #76]	@ (8006694 <pvPortMalloc+0x198>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3301      	adds	r3, #1
 800664c:	4a11      	ldr	r2, [pc, #68]	@ (8006694 <pvPortMalloc+0x198>)
 800664e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006650:	f7fe fcf0 	bl	8005034 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	f003 0307 	and.w	r3, r3, #7
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <pvPortMalloc+0x17a>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	60fb      	str	r3, [r7, #12]
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <pvPortMalloc+0x176>
	return pvReturn;
 8006676:	69fb      	ldr	r3, [r7, #28]
}
 8006678:	4618      	mov	r0, r3
 800667a:	3728      	adds	r7, #40	@ 0x28
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20004b6c 	.word	0x20004b6c
 8006684:	20004b80 	.word	0x20004b80
 8006688:	20004b70 	.word	0x20004b70
 800668c:	20004b64 	.word	0x20004b64
 8006690:	20004b74 	.word	0x20004b74
 8006694:	20004b78 	.word	0x20004b78

08006698 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d04f      	beq.n	800674a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066aa:	2308      	movs	r3, #8
 80066ac:	425b      	negs	r3, r3
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	4413      	add	r3, r2
 80066b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	4b25      	ldr	r3, [pc, #148]	@ (8006754 <vPortFree+0xbc>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4013      	ands	r3, r2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10b      	bne.n	80066de <vPortFree+0x46>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	60fb      	str	r3, [r7, #12]
}
 80066d8:	bf00      	nop
 80066da:	bf00      	nop
 80066dc:	e7fd      	b.n	80066da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00b      	beq.n	80066fe <vPortFree+0x66>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	60bb      	str	r3, [r7, #8]
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	e7fd      	b.n	80066fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	4b14      	ldr	r3, [pc, #80]	@ (8006754 <vPortFree+0xbc>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4013      	ands	r3, r2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d01e      	beq.n	800674a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d11a      	bne.n	800674a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	4b0e      	ldr	r3, [pc, #56]	@ (8006754 <vPortFree+0xbc>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	43db      	mvns	r3, r3
 800671e:	401a      	ands	r2, r3
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006724:	f7fe fc78 	bl	8005018 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	4b0a      	ldr	r3, [pc, #40]	@ (8006758 <vPortFree+0xc0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4413      	add	r3, r2
 8006732:	4a09      	ldr	r2, [pc, #36]	@ (8006758 <vPortFree+0xc0>)
 8006734:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006736:	6938      	ldr	r0, [r7, #16]
 8006738:	f000 f874 	bl	8006824 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800673c:	4b07      	ldr	r3, [pc, #28]	@ (800675c <vPortFree+0xc4>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	4a06      	ldr	r2, [pc, #24]	@ (800675c <vPortFree+0xc4>)
 8006744:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006746:	f7fe fc75 	bl	8005034 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800674a:	bf00      	nop
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20004b80 	.word	0x20004b80
 8006758:	20004b70 	.word	0x20004b70
 800675c:	20004b7c 	.word	0x20004b7c

08006760 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006766:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800676a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800676c:	4b27      	ldr	r3, [pc, #156]	@ (800680c <prvHeapInit+0xac>)
 800676e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f003 0307 	and.w	r3, r3, #7
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00c      	beq.n	8006794 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	3307      	adds	r3, #7
 800677e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0307 	bic.w	r3, r3, #7
 8006786:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006788:	68ba      	ldr	r2, [r7, #8]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	4a1f      	ldr	r2, [pc, #124]	@ (800680c <prvHeapInit+0xac>)
 8006790:	4413      	add	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006798:	4a1d      	ldr	r2, [pc, #116]	@ (8006810 <prvHeapInit+0xb0>)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800679e:	4b1c      	ldr	r3, [pc, #112]	@ (8006810 <prvHeapInit+0xb0>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	4413      	add	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067ac:	2208      	movs	r2, #8
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	1a9b      	subs	r3, r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0307 	bic.w	r3, r3, #7
 80067ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4a15      	ldr	r2, [pc, #84]	@ (8006814 <prvHeapInit+0xb4>)
 80067c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067c2:	4b14      	ldr	r3, [pc, #80]	@ (8006814 <prvHeapInit+0xb4>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2200      	movs	r2, #0
 80067c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067ca:	4b12      	ldr	r3, [pc, #72]	@ (8006814 <prvHeapInit+0xb4>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2200      	movs	r2, #0
 80067d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	1ad2      	subs	r2, r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067e0:	4b0c      	ldr	r3, [pc, #48]	@ (8006814 <prvHeapInit+0xb4>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	4a0a      	ldr	r2, [pc, #40]	@ (8006818 <prvHeapInit+0xb8>)
 80067ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	4a09      	ldr	r2, [pc, #36]	@ (800681c <prvHeapInit+0xbc>)
 80067f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067f8:	4b09      	ldr	r3, [pc, #36]	@ (8006820 <prvHeapInit+0xc0>)
 80067fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067fe:	601a      	str	r2, [r3, #0]
}
 8006800:	bf00      	nop
 8006802:	3714      	adds	r7, #20
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	20000f64 	.word	0x20000f64
 8006810:	20004b64 	.word	0x20004b64
 8006814:	20004b6c 	.word	0x20004b6c
 8006818:	20004b74 	.word	0x20004b74
 800681c:	20004b70 	.word	0x20004b70
 8006820:	20004b80 	.word	0x20004b80

08006824 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800682c:	4b28      	ldr	r3, [pc, #160]	@ (80068d0 <prvInsertBlockIntoFreeList+0xac>)
 800682e:	60fb      	str	r3, [r7, #12]
 8006830:	e002      	b.n	8006838 <prvInsertBlockIntoFreeList+0x14>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60fb      	str	r3, [r7, #12]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	429a      	cmp	r2, r3
 8006840:	d8f7      	bhi.n	8006832 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	4413      	add	r3, r2
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d108      	bne.n	8006866 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	685a      	ldr	r2, [r3, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	441a      	add	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	441a      	add	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	429a      	cmp	r2, r3
 8006878:	d118      	bne.n	80068ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	4b15      	ldr	r3, [pc, #84]	@ (80068d4 <prvInsertBlockIntoFreeList+0xb0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	429a      	cmp	r2, r3
 8006884:	d00d      	beq.n	80068a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	441a      	add	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	601a      	str	r2, [r3, #0]
 80068a0:	e008      	b.n	80068b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068a2:	4b0c      	ldr	r3, [pc, #48]	@ (80068d4 <prvInsertBlockIntoFreeList+0xb0>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	e003      	b.n	80068b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d002      	beq.n	80068c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068c2:	bf00      	nop
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	20004b64 	.word	0x20004b64
 80068d4:	20004b6c 	.word	0x20004b6c

080068d8 <siprintf>:
 80068d8:	b40e      	push	{r1, r2, r3}
 80068da:	b510      	push	{r4, lr}
 80068dc:	b09d      	sub	sp, #116	@ 0x74
 80068de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80068e0:	9002      	str	r0, [sp, #8]
 80068e2:	9006      	str	r0, [sp, #24]
 80068e4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80068e8:	480a      	ldr	r0, [pc, #40]	@ (8006914 <siprintf+0x3c>)
 80068ea:	9107      	str	r1, [sp, #28]
 80068ec:	9104      	str	r1, [sp, #16]
 80068ee:	490a      	ldr	r1, [pc, #40]	@ (8006918 <siprintf+0x40>)
 80068f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f4:	9105      	str	r1, [sp, #20]
 80068f6:	2400      	movs	r4, #0
 80068f8:	a902      	add	r1, sp, #8
 80068fa:	6800      	ldr	r0, [r0, #0]
 80068fc:	9301      	str	r3, [sp, #4]
 80068fe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006900:	f000 f9a2 	bl	8006c48 <_svfiprintf_r>
 8006904:	9b02      	ldr	r3, [sp, #8]
 8006906:	701c      	strb	r4, [r3, #0]
 8006908:	b01d      	add	sp, #116	@ 0x74
 800690a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800690e:	b003      	add	sp, #12
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	20000010 	.word	0x20000010
 8006918:	ffff0208 	.word	0xffff0208

0800691c <memset>:
 800691c:	4402      	add	r2, r0
 800691e:	4603      	mov	r3, r0
 8006920:	4293      	cmp	r3, r2
 8006922:	d100      	bne.n	8006926 <memset+0xa>
 8006924:	4770      	bx	lr
 8006926:	f803 1b01 	strb.w	r1, [r3], #1
 800692a:	e7f9      	b.n	8006920 <memset+0x4>

0800692c <__errno>:
 800692c:	4b01      	ldr	r3, [pc, #4]	@ (8006934 <__errno+0x8>)
 800692e:	6818      	ldr	r0, [r3, #0]
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000010 	.word	0x20000010

08006938 <__libc_init_array>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4d0d      	ldr	r5, [pc, #52]	@ (8006970 <__libc_init_array+0x38>)
 800693c:	4c0d      	ldr	r4, [pc, #52]	@ (8006974 <__libc_init_array+0x3c>)
 800693e:	1b64      	subs	r4, r4, r5
 8006940:	10a4      	asrs	r4, r4, #2
 8006942:	2600      	movs	r6, #0
 8006944:	42a6      	cmp	r6, r4
 8006946:	d109      	bne.n	800695c <__libc_init_array+0x24>
 8006948:	4d0b      	ldr	r5, [pc, #44]	@ (8006978 <__libc_init_array+0x40>)
 800694a:	4c0c      	ldr	r4, [pc, #48]	@ (800697c <__libc_init_array+0x44>)
 800694c:	f000 fc64 	bl	8007218 <_init>
 8006950:	1b64      	subs	r4, r4, r5
 8006952:	10a4      	asrs	r4, r4, #2
 8006954:	2600      	movs	r6, #0
 8006956:	42a6      	cmp	r6, r4
 8006958:	d105      	bne.n	8006966 <__libc_init_array+0x2e>
 800695a:	bd70      	pop	{r4, r5, r6, pc}
 800695c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006960:	4798      	blx	r3
 8006962:	3601      	adds	r6, #1
 8006964:	e7ee      	b.n	8006944 <__libc_init_array+0xc>
 8006966:	f855 3b04 	ldr.w	r3, [r5], #4
 800696a:	4798      	blx	r3
 800696c:	3601      	adds	r6, #1
 800696e:	e7f2      	b.n	8006956 <__libc_init_array+0x1e>
 8006970:	080072f0 	.word	0x080072f0
 8006974:	080072f0 	.word	0x080072f0
 8006978:	080072f0 	.word	0x080072f0
 800697c:	080072f4 	.word	0x080072f4

08006980 <__retarget_lock_acquire_recursive>:
 8006980:	4770      	bx	lr

08006982 <__retarget_lock_release_recursive>:
 8006982:	4770      	bx	lr

08006984 <memcpy>:
 8006984:	440a      	add	r2, r1
 8006986:	4291      	cmp	r1, r2
 8006988:	f100 33ff 	add.w	r3, r0, #4294967295
 800698c:	d100      	bne.n	8006990 <memcpy+0xc>
 800698e:	4770      	bx	lr
 8006990:	b510      	push	{r4, lr}
 8006992:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006996:	f803 4f01 	strb.w	r4, [r3, #1]!
 800699a:	4291      	cmp	r1, r2
 800699c:	d1f9      	bne.n	8006992 <memcpy+0xe>
 800699e:	bd10      	pop	{r4, pc}

080069a0 <_free_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4605      	mov	r5, r0
 80069a4:	2900      	cmp	r1, #0
 80069a6:	d041      	beq.n	8006a2c <_free_r+0x8c>
 80069a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ac:	1f0c      	subs	r4, r1, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bfb8      	it	lt
 80069b2:	18e4      	addlt	r4, r4, r3
 80069b4:	f000 f8e0 	bl	8006b78 <__malloc_lock>
 80069b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a30 <_free_r+0x90>)
 80069ba:	6813      	ldr	r3, [r2, #0]
 80069bc:	b933      	cbnz	r3, 80069cc <_free_r+0x2c>
 80069be:	6063      	str	r3, [r4, #4]
 80069c0:	6014      	str	r4, [r2, #0]
 80069c2:	4628      	mov	r0, r5
 80069c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069c8:	f000 b8dc 	b.w	8006b84 <__malloc_unlock>
 80069cc:	42a3      	cmp	r3, r4
 80069ce:	d908      	bls.n	80069e2 <_free_r+0x42>
 80069d0:	6820      	ldr	r0, [r4, #0]
 80069d2:	1821      	adds	r1, r4, r0
 80069d4:	428b      	cmp	r3, r1
 80069d6:	bf01      	itttt	eq
 80069d8:	6819      	ldreq	r1, [r3, #0]
 80069da:	685b      	ldreq	r3, [r3, #4]
 80069dc:	1809      	addeq	r1, r1, r0
 80069de:	6021      	streq	r1, [r4, #0]
 80069e0:	e7ed      	b.n	80069be <_free_r+0x1e>
 80069e2:	461a      	mov	r2, r3
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	b10b      	cbz	r3, 80069ec <_free_r+0x4c>
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	d9fa      	bls.n	80069e2 <_free_r+0x42>
 80069ec:	6811      	ldr	r1, [r2, #0]
 80069ee:	1850      	adds	r0, r2, r1
 80069f0:	42a0      	cmp	r0, r4
 80069f2:	d10b      	bne.n	8006a0c <_free_r+0x6c>
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	4401      	add	r1, r0
 80069f8:	1850      	adds	r0, r2, r1
 80069fa:	4283      	cmp	r3, r0
 80069fc:	6011      	str	r1, [r2, #0]
 80069fe:	d1e0      	bne.n	80069c2 <_free_r+0x22>
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	6053      	str	r3, [r2, #4]
 8006a06:	4408      	add	r0, r1
 8006a08:	6010      	str	r0, [r2, #0]
 8006a0a:	e7da      	b.n	80069c2 <_free_r+0x22>
 8006a0c:	d902      	bls.n	8006a14 <_free_r+0x74>
 8006a0e:	230c      	movs	r3, #12
 8006a10:	602b      	str	r3, [r5, #0]
 8006a12:	e7d6      	b.n	80069c2 <_free_r+0x22>
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	1821      	adds	r1, r4, r0
 8006a18:	428b      	cmp	r3, r1
 8006a1a:	bf04      	itt	eq
 8006a1c:	6819      	ldreq	r1, [r3, #0]
 8006a1e:	685b      	ldreq	r3, [r3, #4]
 8006a20:	6063      	str	r3, [r4, #4]
 8006a22:	bf04      	itt	eq
 8006a24:	1809      	addeq	r1, r1, r0
 8006a26:	6021      	streq	r1, [r4, #0]
 8006a28:	6054      	str	r4, [r2, #4]
 8006a2a:	e7ca      	b.n	80069c2 <_free_r+0x22>
 8006a2c:	bd38      	pop	{r3, r4, r5, pc}
 8006a2e:	bf00      	nop
 8006a30:	20004cc8 	.word	0x20004cc8

08006a34 <sbrk_aligned>:
 8006a34:	b570      	push	{r4, r5, r6, lr}
 8006a36:	4e0f      	ldr	r6, [pc, #60]	@ (8006a74 <sbrk_aligned+0x40>)
 8006a38:	460c      	mov	r4, r1
 8006a3a:	6831      	ldr	r1, [r6, #0]
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	b911      	cbnz	r1, 8006a46 <sbrk_aligned+0x12>
 8006a40:	f000 fba4 	bl	800718c <_sbrk_r>
 8006a44:	6030      	str	r0, [r6, #0]
 8006a46:	4621      	mov	r1, r4
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f000 fb9f 	bl	800718c <_sbrk_r>
 8006a4e:	1c43      	adds	r3, r0, #1
 8006a50:	d103      	bne.n	8006a5a <sbrk_aligned+0x26>
 8006a52:	f04f 34ff 	mov.w	r4, #4294967295
 8006a56:	4620      	mov	r0, r4
 8006a58:	bd70      	pop	{r4, r5, r6, pc}
 8006a5a:	1cc4      	adds	r4, r0, #3
 8006a5c:	f024 0403 	bic.w	r4, r4, #3
 8006a60:	42a0      	cmp	r0, r4
 8006a62:	d0f8      	beq.n	8006a56 <sbrk_aligned+0x22>
 8006a64:	1a21      	subs	r1, r4, r0
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 fb90 	bl	800718c <_sbrk_r>
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d1f2      	bne.n	8006a56 <sbrk_aligned+0x22>
 8006a70:	e7ef      	b.n	8006a52 <sbrk_aligned+0x1e>
 8006a72:	bf00      	nop
 8006a74:	20004cc4 	.word	0x20004cc4

08006a78 <_malloc_r>:
 8006a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a7c:	1ccd      	adds	r5, r1, #3
 8006a7e:	f025 0503 	bic.w	r5, r5, #3
 8006a82:	3508      	adds	r5, #8
 8006a84:	2d0c      	cmp	r5, #12
 8006a86:	bf38      	it	cc
 8006a88:	250c      	movcc	r5, #12
 8006a8a:	2d00      	cmp	r5, #0
 8006a8c:	4606      	mov	r6, r0
 8006a8e:	db01      	blt.n	8006a94 <_malloc_r+0x1c>
 8006a90:	42a9      	cmp	r1, r5
 8006a92:	d904      	bls.n	8006a9e <_malloc_r+0x26>
 8006a94:	230c      	movs	r3, #12
 8006a96:	6033      	str	r3, [r6, #0]
 8006a98:	2000      	movs	r0, #0
 8006a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006b74 <_malloc_r+0xfc>
 8006aa2:	f000 f869 	bl	8006b78 <__malloc_lock>
 8006aa6:	f8d8 3000 	ldr.w	r3, [r8]
 8006aaa:	461c      	mov	r4, r3
 8006aac:	bb44      	cbnz	r4, 8006b00 <_malloc_r+0x88>
 8006aae:	4629      	mov	r1, r5
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	f7ff ffbf 	bl	8006a34 <sbrk_aligned>
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	4604      	mov	r4, r0
 8006aba:	d158      	bne.n	8006b6e <_malloc_r+0xf6>
 8006abc:	f8d8 4000 	ldr.w	r4, [r8]
 8006ac0:	4627      	mov	r7, r4
 8006ac2:	2f00      	cmp	r7, #0
 8006ac4:	d143      	bne.n	8006b4e <_malloc_r+0xd6>
 8006ac6:	2c00      	cmp	r4, #0
 8006ac8:	d04b      	beq.n	8006b62 <_malloc_r+0xea>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	4639      	mov	r1, r7
 8006ace:	4630      	mov	r0, r6
 8006ad0:	eb04 0903 	add.w	r9, r4, r3
 8006ad4:	f000 fb5a 	bl	800718c <_sbrk_r>
 8006ad8:	4581      	cmp	r9, r0
 8006ada:	d142      	bne.n	8006b62 <_malloc_r+0xea>
 8006adc:	6821      	ldr	r1, [r4, #0]
 8006ade:	1a6d      	subs	r5, r5, r1
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff ffa6 	bl	8006a34 <sbrk_aligned>
 8006ae8:	3001      	adds	r0, #1
 8006aea:	d03a      	beq.n	8006b62 <_malloc_r+0xea>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	442b      	add	r3, r5
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	f8d8 3000 	ldr.w	r3, [r8]
 8006af6:	685a      	ldr	r2, [r3, #4]
 8006af8:	bb62      	cbnz	r2, 8006b54 <_malloc_r+0xdc>
 8006afa:	f8c8 7000 	str.w	r7, [r8]
 8006afe:	e00f      	b.n	8006b20 <_malloc_r+0xa8>
 8006b00:	6822      	ldr	r2, [r4, #0]
 8006b02:	1b52      	subs	r2, r2, r5
 8006b04:	d420      	bmi.n	8006b48 <_malloc_r+0xd0>
 8006b06:	2a0b      	cmp	r2, #11
 8006b08:	d917      	bls.n	8006b3a <_malloc_r+0xc2>
 8006b0a:	1961      	adds	r1, r4, r5
 8006b0c:	42a3      	cmp	r3, r4
 8006b0e:	6025      	str	r5, [r4, #0]
 8006b10:	bf18      	it	ne
 8006b12:	6059      	strne	r1, [r3, #4]
 8006b14:	6863      	ldr	r3, [r4, #4]
 8006b16:	bf08      	it	eq
 8006b18:	f8c8 1000 	streq.w	r1, [r8]
 8006b1c:	5162      	str	r2, [r4, r5]
 8006b1e:	604b      	str	r3, [r1, #4]
 8006b20:	4630      	mov	r0, r6
 8006b22:	f000 f82f 	bl	8006b84 <__malloc_unlock>
 8006b26:	f104 000b 	add.w	r0, r4, #11
 8006b2a:	1d23      	adds	r3, r4, #4
 8006b2c:	f020 0007 	bic.w	r0, r0, #7
 8006b30:	1ac2      	subs	r2, r0, r3
 8006b32:	bf1c      	itt	ne
 8006b34:	1a1b      	subne	r3, r3, r0
 8006b36:	50a3      	strne	r3, [r4, r2]
 8006b38:	e7af      	b.n	8006a9a <_malloc_r+0x22>
 8006b3a:	6862      	ldr	r2, [r4, #4]
 8006b3c:	42a3      	cmp	r3, r4
 8006b3e:	bf0c      	ite	eq
 8006b40:	f8c8 2000 	streq.w	r2, [r8]
 8006b44:	605a      	strne	r2, [r3, #4]
 8006b46:	e7eb      	b.n	8006b20 <_malloc_r+0xa8>
 8006b48:	4623      	mov	r3, r4
 8006b4a:	6864      	ldr	r4, [r4, #4]
 8006b4c:	e7ae      	b.n	8006aac <_malloc_r+0x34>
 8006b4e:	463c      	mov	r4, r7
 8006b50:	687f      	ldr	r7, [r7, #4]
 8006b52:	e7b6      	b.n	8006ac2 <_malloc_r+0x4a>
 8006b54:	461a      	mov	r2, r3
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	42a3      	cmp	r3, r4
 8006b5a:	d1fb      	bne.n	8006b54 <_malloc_r+0xdc>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	6053      	str	r3, [r2, #4]
 8006b60:	e7de      	b.n	8006b20 <_malloc_r+0xa8>
 8006b62:	230c      	movs	r3, #12
 8006b64:	6033      	str	r3, [r6, #0]
 8006b66:	4630      	mov	r0, r6
 8006b68:	f000 f80c 	bl	8006b84 <__malloc_unlock>
 8006b6c:	e794      	b.n	8006a98 <_malloc_r+0x20>
 8006b6e:	6005      	str	r5, [r0, #0]
 8006b70:	e7d6      	b.n	8006b20 <_malloc_r+0xa8>
 8006b72:	bf00      	nop
 8006b74:	20004cc8 	.word	0x20004cc8

08006b78 <__malloc_lock>:
 8006b78:	4801      	ldr	r0, [pc, #4]	@ (8006b80 <__malloc_lock+0x8>)
 8006b7a:	f7ff bf01 	b.w	8006980 <__retarget_lock_acquire_recursive>
 8006b7e:	bf00      	nop
 8006b80:	20004cc0 	.word	0x20004cc0

08006b84 <__malloc_unlock>:
 8006b84:	4801      	ldr	r0, [pc, #4]	@ (8006b8c <__malloc_unlock+0x8>)
 8006b86:	f7ff befc 	b.w	8006982 <__retarget_lock_release_recursive>
 8006b8a:	bf00      	nop
 8006b8c:	20004cc0 	.word	0x20004cc0

08006b90 <__ssputs_r>:
 8006b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	688e      	ldr	r6, [r1, #8]
 8006b96:	461f      	mov	r7, r3
 8006b98:	42be      	cmp	r6, r7
 8006b9a:	680b      	ldr	r3, [r1, #0]
 8006b9c:	4682      	mov	sl, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	4690      	mov	r8, r2
 8006ba2:	d82d      	bhi.n	8006c00 <__ssputs_r+0x70>
 8006ba4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ba8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006bac:	d026      	beq.n	8006bfc <__ssputs_r+0x6c>
 8006bae:	6965      	ldr	r5, [r4, #20]
 8006bb0:	6909      	ldr	r1, [r1, #16]
 8006bb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006bb6:	eba3 0901 	sub.w	r9, r3, r1
 8006bba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006bbe:	1c7b      	adds	r3, r7, #1
 8006bc0:	444b      	add	r3, r9
 8006bc2:	106d      	asrs	r5, r5, #1
 8006bc4:	429d      	cmp	r5, r3
 8006bc6:	bf38      	it	cc
 8006bc8:	461d      	movcc	r5, r3
 8006bca:	0553      	lsls	r3, r2, #21
 8006bcc:	d527      	bpl.n	8006c1e <__ssputs_r+0x8e>
 8006bce:	4629      	mov	r1, r5
 8006bd0:	f7ff ff52 	bl	8006a78 <_malloc_r>
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	b360      	cbz	r0, 8006c32 <__ssputs_r+0xa2>
 8006bd8:	6921      	ldr	r1, [r4, #16]
 8006bda:	464a      	mov	r2, r9
 8006bdc:	f7ff fed2 	bl	8006984 <memcpy>
 8006be0:	89a3      	ldrh	r3, [r4, #12]
 8006be2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006be6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bea:	81a3      	strh	r3, [r4, #12]
 8006bec:	6126      	str	r6, [r4, #16]
 8006bee:	6165      	str	r5, [r4, #20]
 8006bf0:	444e      	add	r6, r9
 8006bf2:	eba5 0509 	sub.w	r5, r5, r9
 8006bf6:	6026      	str	r6, [r4, #0]
 8006bf8:	60a5      	str	r5, [r4, #8]
 8006bfa:	463e      	mov	r6, r7
 8006bfc:	42be      	cmp	r6, r7
 8006bfe:	d900      	bls.n	8006c02 <__ssputs_r+0x72>
 8006c00:	463e      	mov	r6, r7
 8006c02:	6820      	ldr	r0, [r4, #0]
 8006c04:	4632      	mov	r2, r6
 8006c06:	4641      	mov	r1, r8
 8006c08:	f000 faa6 	bl	8007158 <memmove>
 8006c0c:	68a3      	ldr	r3, [r4, #8]
 8006c0e:	1b9b      	subs	r3, r3, r6
 8006c10:	60a3      	str	r3, [r4, #8]
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	4433      	add	r3, r6
 8006c16:	6023      	str	r3, [r4, #0]
 8006c18:	2000      	movs	r0, #0
 8006c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c1e:	462a      	mov	r2, r5
 8006c20:	f000 fac4 	bl	80071ac <_realloc_r>
 8006c24:	4606      	mov	r6, r0
 8006c26:	2800      	cmp	r0, #0
 8006c28:	d1e0      	bne.n	8006bec <__ssputs_r+0x5c>
 8006c2a:	6921      	ldr	r1, [r4, #16]
 8006c2c:	4650      	mov	r0, sl
 8006c2e:	f7ff feb7 	bl	80069a0 <_free_r>
 8006c32:	230c      	movs	r3, #12
 8006c34:	f8ca 3000 	str.w	r3, [sl]
 8006c38:	89a3      	ldrh	r3, [r4, #12]
 8006c3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c3e:	81a3      	strh	r3, [r4, #12]
 8006c40:	f04f 30ff 	mov.w	r0, #4294967295
 8006c44:	e7e9      	b.n	8006c1a <__ssputs_r+0x8a>
	...

08006c48 <_svfiprintf_r>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	4698      	mov	r8, r3
 8006c4e:	898b      	ldrh	r3, [r1, #12]
 8006c50:	061b      	lsls	r3, r3, #24
 8006c52:	b09d      	sub	sp, #116	@ 0x74
 8006c54:	4607      	mov	r7, r0
 8006c56:	460d      	mov	r5, r1
 8006c58:	4614      	mov	r4, r2
 8006c5a:	d510      	bpl.n	8006c7e <_svfiprintf_r+0x36>
 8006c5c:	690b      	ldr	r3, [r1, #16]
 8006c5e:	b973      	cbnz	r3, 8006c7e <_svfiprintf_r+0x36>
 8006c60:	2140      	movs	r1, #64	@ 0x40
 8006c62:	f7ff ff09 	bl	8006a78 <_malloc_r>
 8006c66:	6028      	str	r0, [r5, #0]
 8006c68:	6128      	str	r0, [r5, #16]
 8006c6a:	b930      	cbnz	r0, 8006c7a <_svfiprintf_r+0x32>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	f04f 30ff 	mov.w	r0, #4294967295
 8006c74:	b01d      	add	sp, #116	@ 0x74
 8006c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c7a:	2340      	movs	r3, #64	@ 0x40
 8006c7c:	616b      	str	r3, [r5, #20]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c82:	2320      	movs	r3, #32
 8006c84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c8c:	2330      	movs	r3, #48	@ 0x30
 8006c8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006e2c <_svfiprintf_r+0x1e4>
 8006c92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c96:	f04f 0901 	mov.w	r9, #1
 8006c9a:	4623      	mov	r3, r4
 8006c9c:	469a      	mov	sl, r3
 8006c9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca2:	b10a      	cbz	r2, 8006ca8 <_svfiprintf_r+0x60>
 8006ca4:	2a25      	cmp	r2, #37	@ 0x25
 8006ca6:	d1f9      	bne.n	8006c9c <_svfiprintf_r+0x54>
 8006ca8:	ebba 0b04 	subs.w	fp, sl, r4
 8006cac:	d00b      	beq.n	8006cc6 <_svfiprintf_r+0x7e>
 8006cae:	465b      	mov	r3, fp
 8006cb0:	4622      	mov	r2, r4
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	4638      	mov	r0, r7
 8006cb6:	f7ff ff6b 	bl	8006b90 <__ssputs_r>
 8006cba:	3001      	adds	r0, #1
 8006cbc:	f000 80a7 	beq.w	8006e0e <_svfiprintf_r+0x1c6>
 8006cc0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cc2:	445a      	add	r2, fp
 8006cc4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cc6:	f89a 3000 	ldrb.w	r3, [sl]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	f000 809f 	beq.w	8006e0e <_svfiprintf_r+0x1c6>
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cda:	f10a 0a01 	add.w	sl, sl, #1
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	9307      	str	r3, [sp, #28]
 8006ce2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ce6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ce8:	4654      	mov	r4, sl
 8006cea:	2205      	movs	r2, #5
 8006cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cf0:	484e      	ldr	r0, [pc, #312]	@ (8006e2c <_svfiprintf_r+0x1e4>)
 8006cf2:	f7f9 fa8d 	bl	8000210 <memchr>
 8006cf6:	9a04      	ldr	r2, [sp, #16]
 8006cf8:	b9d8      	cbnz	r0, 8006d32 <_svfiprintf_r+0xea>
 8006cfa:	06d0      	lsls	r0, r2, #27
 8006cfc:	bf44      	itt	mi
 8006cfe:	2320      	movmi	r3, #32
 8006d00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d04:	0711      	lsls	r1, r2, #28
 8006d06:	bf44      	itt	mi
 8006d08:	232b      	movmi	r3, #43	@ 0x2b
 8006d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d12:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d14:	d015      	beq.n	8006d42 <_svfiprintf_r+0xfa>
 8006d16:	9a07      	ldr	r2, [sp, #28]
 8006d18:	4654      	mov	r4, sl
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	f04f 0c0a 	mov.w	ip, #10
 8006d20:	4621      	mov	r1, r4
 8006d22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d26:	3b30      	subs	r3, #48	@ 0x30
 8006d28:	2b09      	cmp	r3, #9
 8006d2a:	d94b      	bls.n	8006dc4 <_svfiprintf_r+0x17c>
 8006d2c:	b1b0      	cbz	r0, 8006d5c <_svfiprintf_r+0x114>
 8006d2e:	9207      	str	r2, [sp, #28]
 8006d30:	e014      	b.n	8006d5c <_svfiprintf_r+0x114>
 8006d32:	eba0 0308 	sub.w	r3, r0, r8
 8006d36:	fa09 f303 	lsl.w	r3, r9, r3
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	46a2      	mov	sl, r4
 8006d40:	e7d2      	b.n	8006ce8 <_svfiprintf_r+0xa0>
 8006d42:	9b03      	ldr	r3, [sp, #12]
 8006d44:	1d19      	adds	r1, r3, #4
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	9103      	str	r1, [sp, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	bfbb      	ittet	lt
 8006d4e:	425b      	neglt	r3, r3
 8006d50:	f042 0202 	orrlt.w	r2, r2, #2
 8006d54:	9307      	strge	r3, [sp, #28]
 8006d56:	9307      	strlt	r3, [sp, #28]
 8006d58:	bfb8      	it	lt
 8006d5a:	9204      	strlt	r2, [sp, #16]
 8006d5c:	7823      	ldrb	r3, [r4, #0]
 8006d5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d60:	d10a      	bne.n	8006d78 <_svfiprintf_r+0x130>
 8006d62:	7863      	ldrb	r3, [r4, #1]
 8006d64:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d66:	d132      	bne.n	8006dce <_svfiprintf_r+0x186>
 8006d68:	9b03      	ldr	r3, [sp, #12]
 8006d6a:	1d1a      	adds	r2, r3, #4
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	9203      	str	r2, [sp, #12]
 8006d70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d74:	3402      	adds	r4, #2
 8006d76:	9305      	str	r3, [sp, #20]
 8006d78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006e3c <_svfiprintf_r+0x1f4>
 8006d7c:	7821      	ldrb	r1, [r4, #0]
 8006d7e:	2203      	movs	r2, #3
 8006d80:	4650      	mov	r0, sl
 8006d82:	f7f9 fa45 	bl	8000210 <memchr>
 8006d86:	b138      	cbz	r0, 8006d98 <_svfiprintf_r+0x150>
 8006d88:	9b04      	ldr	r3, [sp, #16]
 8006d8a:	eba0 000a 	sub.w	r0, r0, sl
 8006d8e:	2240      	movs	r2, #64	@ 0x40
 8006d90:	4082      	lsls	r2, r0
 8006d92:	4313      	orrs	r3, r2
 8006d94:	3401      	adds	r4, #1
 8006d96:	9304      	str	r3, [sp, #16]
 8006d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9c:	4824      	ldr	r0, [pc, #144]	@ (8006e30 <_svfiprintf_r+0x1e8>)
 8006d9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006da2:	2206      	movs	r2, #6
 8006da4:	f7f9 fa34 	bl	8000210 <memchr>
 8006da8:	2800      	cmp	r0, #0
 8006daa:	d036      	beq.n	8006e1a <_svfiprintf_r+0x1d2>
 8006dac:	4b21      	ldr	r3, [pc, #132]	@ (8006e34 <_svfiprintf_r+0x1ec>)
 8006dae:	bb1b      	cbnz	r3, 8006df8 <_svfiprintf_r+0x1b0>
 8006db0:	9b03      	ldr	r3, [sp, #12]
 8006db2:	3307      	adds	r3, #7
 8006db4:	f023 0307 	bic.w	r3, r3, #7
 8006db8:	3308      	adds	r3, #8
 8006dba:	9303      	str	r3, [sp, #12]
 8006dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dbe:	4433      	add	r3, r6
 8006dc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dc2:	e76a      	b.n	8006c9a <_svfiprintf_r+0x52>
 8006dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dc8:	460c      	mov	r4, r1
 8006dca:	2001      	movs	r0, #1
 8006dcc:	e7a8      	b.n	8006d20 <_svfiprintf_r+0xd8>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	3401      	adds	r4, #1
 8006dd2:	9305      	str	r3, [sp, #20]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	f04f 0c0a 	mov.w	ip, #10
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006de0:	3a30      	subs	r2, #48	@ 0x30
 8006de2:	2a09      	cmp	r2, #9
 8006de4:	d903      	bls.n	8006dee <_svfiprintf_r+0x1a6>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0c6      	beq.n	8006d78 <_svfiprintf_r+0x130>
 8006dea:	9105      	str	r1, [sp, #20]
 8006dec:	e7c4      	b.n	8006d78 <_svfiprintf_r+0x130>
 8006dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df2:	4604      	mov	r4, r0
 8006df4:	2301      	movs	r3, #1
 8006df6:	e7f0      	b.n	8006dda <_svfiprintf_r+0x192>
 8006df8:	ab03      	add	r3, sp, #12
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	462a      	mov	r2, r5
 8006dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8006e38 <_svfiprintf_r+0x1f0>)
 8006e00:	a904      	add	r1, sp, #16
 8006e02:	4638      	mov	r0, r7
 8006e04:	f3af 8000 	nop.w
 8006e08:	1c42      	adds	r2, r0, #1
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	d1d6      	bne.n	8006dbc <_svfiprintf_r+0x174>
 8006e0e:	89ab      	ldrh	r3, [r5, #12]
 8006e10:	065b      	lsls	r3, r3, #25
 8006e12:	f53f af2d 	bmi.w	8006c70 <_svfiprintf_r+0x28>
 8006e16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e18:	e72c      	b.n	8006c74 <_svfiprintf_r+0x2c>
 8006e1a:	ab03      	add	r3, sp, #12
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	462a      	mov	r2, r5
 8006e20:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <_svfiprintf_r+0x1f0>)
 8006e22:	a904      	add	r1, sp, #16
 8006e24:	4638      	mov	r0, r7
 8006e26:	f000 f879 	bl	8006f1c <_printf_i>
 8006e2a:	e7ed      	b.n	8006e08 <_svfiprintf_r+0x1c0>
 8006e2c:	080072b4 	.word	0x080072b4
 8006e30:	080072be 	.word	0x080072be
 8006e34:	00000000 	.word	0x00000000
 8006e38:	08006b91 	.word	0x08006b91
 8006e3c:	080072ba 	.word	0x080072ba

08006e40 <_printf_common>:
 8006e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e44:	4616      	mov	r6, r2
 8006e46:	4698      	mov	r8, r3
 8006e48:	688a      	ldr	r2, [r1, #8]
 8006e4a:	690b      	ldr	r3, [r1, #16]
 8006e4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e50:	4293      	cmp	r3, r2
 8006e52:	bfb8      	it	lt
 8006e54:	4613      	movlt	r3, r2
 8006e56:	6033      	str	r3, [r6, #0]
 8006e58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e5c:	4607      	mov	r7, r0
 8006e5e:	460c      	mov	r4, r1
 8006e60:	b10a      	cbz	r2, 8006e66 <_printf_common+0x26>
 8006e62:	3301      	adds	r3, #1
 8006e64:	6033      	str	r3, [r6, #0]
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	0699      	lsls	r1, r3, #26
 8006e6a:	bf42      	ittt	mi
 8006e6c:	6833      	ldrmi	r3, [r6, #0]
 8006e6e:	3302      	addmi	r3, #2
 8006e70:	6033      	strmi	r3, [r6, #0]
 8006e72:	6825      	ldr	r5, [r4, #0]
 8006e74:	f015 0506 	ands.w	r5, r5, #6
 8006e78:	d106      	bne.n	8006e88 <_printf_common+0x48>
 8006e7a:	f104 0a19 	add.w	sl, r4, #25
 8006e7e:	68e3      	ldr	r3, [r4, #12]
 8006e80:	6832      	ldr	r2, [r6, #0]
 8006e82:	1a9b      	subs	r3, r3, r2
 8006e84:	42ab      	cmp	r3, r5
 8006e86:	dc26      	bgt.n	8006ed6 <_printf_common+0x96>
 8006e88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	3b00      	subs	r3, #0
 8006e90:	bf18      	it	ne
 8006e92:	2301      	movne	r3, #1
 8006e94:	0692      	lsls	r2, r2, #26
 8006e96:	d42b      	bmi.n	8006ef0 <_printf_common+0xb0>
 8006e98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e9c:	4641      	mov	r1, r8
 8006e9e:	4638      	mov	r0, r7
 8006ea0:	47c8      	blx	r9
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	d01e      	beq.n	8006ee4 <_printf_common+0xa4>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	6922      	ldr	r2, [r4, #16]
 8006eaa:	f003 0306 	and.w	r3, r3, #6
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	bf02      	ittt	eq
 8006eb2:	68e5      	ldreq	r5, [r4, #12]
 8006eb4:	6833      	ldreq	r3, [r6, #0]
 8006eb6:	1aed      	subeq	r5, r5, r3
 8006eb8:	68a3      	ldr	r3, [r4, #8]
 8006eba:	bf0c      	ite	eq
 8006ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ec0:	2500      	movne	r5, #0
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	bfc4      	itt	gt
 8006ec6:	1a9b      	subgt	r3, r3, r2
 8006ec8:	18ed      	addgt	r5, r5, r3
 8006eca:	2600      	movs	r6, #0
 8006ecc:	341a      	adds	r4, #26
 8006ece:	42b5      	cmp	r5, r6
 8006ed0:	d11a      	bne.n	8006f08 <_printf_common+0xc8>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	e008      	b.n	8006ee8 <_printf_common+0xa8>
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	4652      	mov	r2, sl
 8006eda:	4641      	mov	r1, r8
 8006edc:	4638      	mov	r0, r7
 8006ede:	47c8      	blx	r9
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	d103      	bne.n	8006eec <_printf_common+0xac>
 8006ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006eec:	3501      	adds	r5, #1
 8006eee:	e7c6      	b.n	8006e7e <_printf_common+0x3e>
 8006ef0:	18e1      	adds	r1, r4, r3
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	2030      	movs	r0, #48	@ 0x30
 8006ef6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006efa:	4422      	add	r2, r4
 8006efc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f04:	3302      	adds	r3, #2
 8006f06:	e7c7      	b.n	8006e98 <_printf_common+0x58>
 8006f08:	2301      	movs	r3, #1
 8006f0a:	4622      	mov	r2, r4
 8006f0c:	4641      	mov	r1, r8
 8006f0e:	4638      	mov	r0, r7
 8006f10:	47c8      	blx	r9
 8006f12:	3001      	adds	r0, #1
 8006f14:	d0e6      	beq.n	8006ee4 <_printf_common+0xa4>
 8006f16:	3601      	adds	r6, #1
 8006f18:	e7d9      	b.n	8006ece <_printf_common+0x8e>
	...

08006f1c <_printf_i>:
 8006f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f20:	7e0f      	ldrb	r7, [r1, #24]
 8006f22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f24:	2f78      	cmp	r7, #120	@ 0x78
 8006f26:	4691      	mov	r9, r2
 8006f28:	4680      	mov	r8, r0
 8006f2a:	460c      	mov	r4, r1
 8006f2c:	469a      	mov	sl, r3
 8006f2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f32:	d807      	bhi.n	8006f44 <_printf_i+0x28>
 8006f34:	2f62      	cmp	r7, #98	@ 0x62
 8006f36:	d80a      	bhi.n	8006f4e <_printf_i+0x32>
 8006f38:	2f00      	cmp	r7, #0
 8006f3a:	f000 80d1 	beq.w	80070e0 <_printf_i+0x1c4>
 8006f3e:	2f58      	cmp	r7, #88	@ 0x58
 8006f40:	f000 80b8 	beq.w	80070b4 <_printf_i+0x198>
 8006f44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f4c:	e03a      	b.n	8006fc4 <_printf_i+0xa8>
 8006f4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f52:	2b15      	cmp	r3, #21
 8006f54:	d8f6      	bhi.n	8006f44 <_printf_i+0x28>
 8006f56:	a101      	add	r1, pc, #4	@ (adr r1, 8006f5c <_printf_i+0x40>)
 8006f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f5c:	08006fb5 	.word	0x08006fb5
 8006f60:	08006fc9 	.word	0x08006fc9
 8006f64:	08006f45 	.word	0x08006f45
 8006f68:	08006f45 	.word	0x08006f45
 8006f6c:	08006f45 	.word	0x08006f45
 8006f70:	08006f45 	.word	0x08006f45
 8006f74:	08006fc9 	.word	0x08006fc9
 8006f78:	08006f45 	.word	0x08006f45
 8006f7c:	08006f45 	.word	0x08006f45
 8006f80:	08006f45 	.word	0x08006f45
 8006f84:	08006f45 	.word	0x08006f45
 8006f88:	080070c7 	.word	0x080070c7
 8006f8c:	08006ff3 	.word	0x08006ff3
 8006f90:	08007081 	.word	0x08007081
 8006f94:	08006f45 	.word	0x08006f45
 8006f98:	08006f45 	.word	0x08006f45
 8006f9c:	080070e9 	.word	0x080070e9
 8006fa0:	08006f45 	.word	0x08006f45
 8006fa4:	08006ff3 	.word	0x08006ff3
 8006fa8:	08006f45 	.word	0x08006f45
 8006fac:	08006f45 	.word	0x08006f45
 8006fb0:	08007089 	.word	0x08007089
 8006fb4:	6833      	ldr	r3, [r6, #0]
 8006fb6:	1d1a      	adds	r2, r3, #4
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	6032      	str	r2, [r6, #0]
 8006fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e09c      	b.n	8007102 <_printf_i+0x1e6>
 8006fc8:	6833      	ldr	r3, [r6, #0]
 8006fca:	6820      	ldr	r0, [r4, #0]
 8006fcc:	1d19      	adds	r1, r3, #4
 8006fce:	6031      	str	r1, [r6, #0]
 8006fd0:	0606      	lsls	r6, r0, #24
 8006fd2:	d501      	bpl.n	8006fd8 <_printf_i+0xbc>
 8006fd4:	681d      	ldr	r5, [r3, #0]
 8006fd6:	e003      	b.n	8006fe0 <_printf_i+0xc4>
 8006fd8:	0645      	lsls	r5, r0, #25
 8006fda:	d5fb      	bpl.n	8006fd4 <_printf_i+0xb8>
 8006fdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fe0:	2d00      	cmp	r5, #0
 8006fe2:	da03      	bge.n	8006fec <_printf_i+0xd0>
 8006fe4:	232d      	movs	r3, #45	@ 0x2d
 8006fe6:	426d      	negs	r5, r5
 8006fe8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fec:	4858      	ldr	r0, [pc, #352]	@ (8007150 <_printf_i+0x234>)
 8006fee:	230a      	movs	r3, #10
 8006ff0:	e011      	b.n	8007016 <_printf_i+0xfa>
 8006ff2:	6821      	ldr	r1, [r4, #0]
 8006ff4:	6833      	ldr	r3, [r6, #0]
 8006ff6:	0608      	lsls	r0, r1, #24
 8006ff8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ffc:	d402      	bmi.n	8007004 <_printf_i+0xe8>
 8006ffe:	0649      	lsls	r1, r1, #25
 8007000:	bf48      	it	mi
 8007002:	b2ad      	uxthmi	r5, r5
 8007004:	2f6f      	cmp	r7, #111	@ 0x6f
 8007006:	4852      	ldr	r0, [pc, #328]	@ (8007150 <_printf_i+0x234>)
 8007008:	6033      	str	r3, [r6, #0]
 800700a:	bf14      	ite	ne
 800700c:	230a      	movne	r3, #10
 800700e:	2308      	moveq	r3, #8
 8007010:	2100      	movs	r1, #0
 8007012:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007016:	6866      	ldr	r6, [r4, #4]
 8007018:	60a6      	str	r6, [r4, #8]
 800701a:	2e00      	cmp	r6, #0
 800701c:	db05      	blt.n	800702a <_printf_i+0x10e>
 800701e:	6821      	ldr	r1, [r4, #0]
 8007020:	432e      	orrs	r6, r5
 8007022:	f021 0104 	bic.w	r1, r1, #4
 8007026:	6021      	str	r1, [r4, #0]
 8007028:	d04b      	beq.n	80070c2 <_printf_i+0x1a6>
 800702a:	4616      	mov	r6, r2
 800702c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007030:	fb03 5711 	mls	r7, r3, r1, r5
 8007034:	5dc7      	ldrb	r7, [r0, r7]
 8007036:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800703a:	462f      	mov	r7, r5
 800703c:	42bb      	cmp	r3, r7
 800703e:	460d      	mov	r5, r1
 8007040:	d9f4      	bls.n	800702c <_printf_i+0x110>
 8007042:	2b08      	cmp	r3, #8
 8007044:	d10b      	bne.n	800705e <_printf_i+0x142>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	07df      	lsls	r7, r3, #31
 800704a:	d508      	bpl.n	800705e <_printf_i+0x142>
 800704c:	6923      	ldr	r3, [r4, #16]
 800704e:	6861      	ldr	r1, [r4, #4]
 8007050:	4299      	cmp	r1, r3
 8007052:	bfde      	ittt	le
 8007054:	2330      	movle	r3, #48	@ 0x30
 8007056:	f806 3c01 	strble.w	r3, [r6, #-1]
 800705a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800705e:	1b92      	subs	r2, r2, r6
 8007060:	6122      	str	r2, [r4, #16]
 8007062:	f8cd a000 	str.w	sl, [sp]
 8007066:	464b      	mov	r3, r9
 8007068:	aa03      	add	r2, sp, #12
 800706a:	4621      	mov	r1, r4
 800706c:	4640      	mov	r0, r8
 800706e:	f7ff fee7 	bl	8006e40 <_printf_common>
 8007072:	3001      	adds	r0, #1
 8007074:	d14a      	bne.n	800710c <_printf_i+0x1f0>
 8007076:	f04f 30ff 	mov.w	r0, #4294967295
 800707a:	b004      	add	sp, #16
 800707c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	f043 0320 	orr.w	r3, r3, #32
 8007086:	6023      	str	r3, [r4, #0]
 8007088:	4832      	ldr	r0, [pc, #200]	@ (8007154 <_printf_i+0x238>)
 800708a:	2778      	movs	r7, #120	@ 0x78
 800708c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007090:	6823      	ldr	r3, [r4, #0]
 8007092:	6831      	ldr	r1, [r6, #0]
 8007094:	061f      	lsls	r7, r3, #24
 8007096:	f851 5b04 	ldr.w	r5, [r1], #4
 800709a:	d402      	bmi.n	80070a2 <_printf_i+0x186>
 800709c:	065f      	lsls	r7, r3, #25
 800709e:	bf48      	it	mi
 80070a0:	b2ad      	uxthmi	r5, r5
 80070a2:	6031      	str	r1, [r6, #0]
 80070a4:	07d9      	lsls	r1, r3, #31
 80070a6:	bf44      	itt	mi
 80070a8:	f043 0320 	orrmi.w	r3, r3, #32
 80070ac:	6023      	strmi	r3, [r4, #0]
 80070ae:	b11d      	cbz	r5, 80070b8 <_printf_i+0x19c>
 80070b0:	2310      	movs	r3, #16
 80070b2:	e7ad      	b.n	8007010 <_printf_i+0xf4>
 80070b4:	4826      	ldr	r0, [pc, #152]	@ (8007150 <_printf_i+0x234>)
 80070b6:	e7e9      	b.n	800708c <_printf_i+0x170>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	f023 0320 	bic.w	r3, r3, #32
 80070be:	6023      	str	r3, [r4, #0]
 80070c0:	e7f6      	b.n	80070b0 <_printf_i+0x194>
 80070c2:	4616      	mov	r6, r2
 80070c4:	e7bd      	b.n	8007042 <_printf_i+0x126>
 80070c6:	6833      	ldr	r3, [r6, #0]
 80070c8:	6825      	ldr	r5, [r4, #0]
 80070ca:	6961      	ldr	r1, [r4, #20]
 80070cc:	1d18      	adds	r0, r3, #4
 80070ce:	6030      	str	r0, [r6, #0]
 80070d0:	062e      	lsls	r6, r5, #24
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	d501      	bpl.n	80070da <_printf_i+0x1be>
 80070d6:	6019      	str	r1, [r3, #0]
 80070d8:	e002      	b.n	80070e0 <_printf_i+0x1c4>
 80070da:	0668      	lsls	r0, r5, #25
 80070dc:	d5fb      	bpl.n	80070d6 <_printf_i+0x1ba>
 80070de:	8019      	strh	r1, [r3, #0]
 80070e0:	2300      	movs	r3, #0
 80070e2:	6123      	str	r3, [r4, #16]
 80070e4:	4616      	mov	r6, r2
 80070e6:	e7bc      	b.n	8007062 <_printf_i+0x146>
 80070e8:	6833      	ldr	r3, [r6, #0]
 80070ea:	1d1a      	adds	r2, r3, #4
 80070ec:	6032      	str	r2, [r6, #0]
 80070ee:	681e      	ldr	r6, [r3, #0]
 80070f0:	6862      	ldr	r2, [r4, #4]
 80070f2:	2100      	movs	r1, #0
 80070f4:	4630      	mov	r0, r6
 80070f6:	f7f9 f88b 	bl	8000210 <memchr>
 80070fa:	b108      	cbz	r0, 8007100 <_printf_i+0x1e4>
 80070fc:	1b80      	subs	r0, r0, r6
 80070fe:	6060      	str	r0, [r4, #4]
 8007100:	6863      	ldr	r3, [r4, #4]
 8007102:	6123      	str	r3, [r4, #16]
 8007104:	2300      	movs	r3, #0
 8007106:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800710a:	e7aa      	b.n	8007062 <_printf_i+0x146>
 800710c:	6923      	ldr	r3, [r4, #16]
 800710e:	4632      	mov	r2, r6
 8007110:	4649      	mov	r1, r9
 8007112:	4640      	mov	r0, r8
 8007114:	47d0      	blx	sl
 8007116:	3001      	adds	r0, #1
 8007118:	d0ad      	beq.n	8007076 <_printf_i+0x15a>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	079b      	lsls	r3, r3, #30
 800711e:	d413      	bmi.n	8007148 <_printf_i+0x22c>
 8007120:	68e0      	ldr	r0, [r4, #12]
 8007122:	9b03      	ldr	r3, [sp, #12]
 8007124:	4298      	cmp	r0, r3
 8007126:	bfb8      	it	lt
 8007128:	4618      	movlt	r0, r3
 800712a:	e7a6      	b.n	800707a <_printf_i+0x15e>
 800712c:	2301      	movs	r3, #1
 800712e:	4632      	mov	r2, r6
 8007130:	4649      	mov	r1, r9
 8007132:	4640      	mov	r0, r8
 8007134:	47d0      	blx	sl
 8007136:	3001      	adds	r0, #1
 8007138:	d09d      	beq.n	8007076 <_printf_i+0x15a>
 800713a:	3501      	adds	r5, #1
 800713c:	68e3      	ldr	r3, [r4, #12]
 800713e:	9903      	ldr	r1, [sp, #12]
 8007140:	1a5b      	subs	r3, r3, r1
 8007142:	42ab      	cmp	r3, r5
 8007144:	dcf2      	bgt.n	800712c <_printf_i+0x210>
 8007146:	e7eb      	b.n	8007120 <_printf_i+0x204>
 8007148:	2500      	movs	r5, #0
 800714a:	f104 0619 	add.w	r6, r4, #25
 800714e:	e7f5      	b.n	800713c <_printf_i+0x220>
 8007150:	080072c5 	.word	0x080072c5
 8007154:	080072d6 	.word	0x080072d6

08007158 <memmove>:
 8007158:	4288      	cmp	r0, r1
 800715a:	b510      	push	{r4, lr}
 800715c:	eb01 0402 	add.w	r4, r1, r2
 8007160:	d902      	bls.n	8007168 <memmove+0x10>
 8007162:	4284      	cmp	r4, r0
 8007164:	4623      	mov	r3, r4
 8007166:	d807      	bhi.n	8007178 <memmove+0x20>
 8007168:	1e43      	subs	r3, r0, #1
 800716a:	42a1      	cmp	r1, r4
 800716c:	d008      	beq.n	8007180 <memmove+0x28>
 800716e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007172:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007176:	e7f8      	b.n	800716a <memmove+0x12>
 8007178:	4402      	add	r2, r0
 800717a:	4601      	mov	r1, r0
 800717c:	428a      	cmp	r2, r1
 800717e:	d100      	bne.n	8007182 <memmove+0x2a>
 8007180:	bd10      	pop	{r4, pc}
 8007182:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007186:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800718a:	e7f7      	b.n	800717c <memmove+0x24>

0800718c <_sbrk_r>:
 800718c:	b538      	push	{r3, r4, r5, lr}
 800718e:	4d06      	ldr	r5, [pc, #24]	@ (80071a8 <_sbrk_r+0x1c>)
 8007190:	2300      	movs	r3, #0
 8007192:	4604      	mov	r4, r0
 8007194:	4608      	mov	r0, r1
 8007196:	602b      	str	r3, [r5, #0]
 8007198:	f7f9 ffd6 	bl	8001148 <_sbrk>
 800719c:	1c43      	adds	r3, r0, #1
 800719e:	d102      	bne.n	80071a6 <_sbrk_r+0x1a>
 80071a0:	682b      	ldr	r3, [r5, #0]
 80071a2:	b103      	cbz	r3, 80071a6 <_sbrk_r+0x1a>
 80071a4:	6023      	str	r3, [r4, #0]
 80071a6:	bd38      	pop	{r3, r4, r5, pc}
 80071a8:	20004cbc 	.word	0x20004cbc

080071ac <_realloc_r>:
 80071ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b0:	4607      	mov	r7, r0
 80071b2:	4614      	mov	r4, r2
 80071b4:	460d      	mov	r5, r1
 80071b6:	b921      	cbnz	r1, 80071c2 <_realloc_r+0x16>
 80071b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071bc:	4611      	mov	r1, r2
 80071be:	f7ff bc5b 	b.w	8006a78 <_malloc_r>
 80071c2:	b92a      	cbnz	r2, 80071d0 <_realloc_r+0x24>
 80071c4:	f7ff fbec 	bl	80069a0 <_free_r>
 80071c8:	4625      	mov	r5, r4
 80071ca:	4628      	mov	r0, r5
 80071cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071d0:	f000 f81a 	bl	8007208 <_malloc_usable_size_r>
 80071d4:	4284      	cmp	r4, r0
 80071d6:	4606      	mov	r6, r0
 80071d8:	d802      	bhi.n	80071e0 <_realloc_r+0x34>
 80071da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071de:	d8f4      	bhi.n	80071ca <_realloc_r+0x1e>
 80071e0:	4621      	mov	r1, r4
 80071e2:	4638      	mov	r0, r7
 80071e4:	f7ff fc48 	bl	8006a78 <_malloc_r>
 80071e8:	4680      	mov	r8, r0
 80071ea:	b908      	cbnz	r0, 80071f0 <_realloc_r+0x44>
 80071ec:	4645      	mov	r5, r8
 80071ee:	e7ec      	b.n	80071ca <_realloc_r+0x1e>
 80071f0:	42b4      	cmp	r4, r6
 80071f2:	4622      	mov	r2, r4
 80071f4:	4629      	mov	r1, r5
 80071f6:	bf28      	it	cs
 80071f8:	4632      	movcs	r2, r6
 80071fa:	f7ff fbc3 	bl	8006984 <memcpy>
 80071fe:	4629      	mov	r1, r5
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff fbcd 	bl	80069a0 <_free_r>
 8007206:	e7f1      	b.n	80071ec <_realloc_r+0x40>

08007208 <_malloc_usable_size_r>:
 8007208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800720c:	1f18      	subs	r0, r3, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	bfbc      	itt	lt
 8007212:	580b      	ldrlt	r3, [r1, r0]
 8007214:	18c0      	addlt	r0, r0, r3
 8007216:	4770      	bx	lr

08007218 <_init>:
 8007218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721a:	bf00      	nop
 800721c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721e:	bc08      	pop	{r3}
 8007220:	469e      	mov	lr, r3
 8007222:	4770      	bx	lr

08007224 <_fini>:
 8007224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007226:	bf00      	nop
 8007228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800722a:	bc08      	pop	{r3}
 800722c:	469e      	mov	lr, r3
 800722e:	4770      	bx	lr
